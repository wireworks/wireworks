{"version":3,"sources":["app/wireworks/networking/byte.ts","app/wireworks/utils/math.ts","app/wireworks/networking/layers/layer-3/address.ts","app/components/ErrorBox.tsx","app/wireworks/utils/array.ts","app/pages/tools/layer-3/undernets.tsx"],"names":["ByteZero","Byte","ByteMax","ERROR_BYTE_RANGE","value","Object","_home_void_Documents_wireworks_github_io_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","bits","decimal","setDecimal","setBits","_home_void_Documents_wireworks_github_io_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","Math","floor","err","RangeError","name","arr","length","bit8","i","undefined","booleanArrayToBit8","decimalToBinary","binaryToDecimal","index","arguments","slice","clamp","min","max","binary","reversed","realIndex","pow","tmpDecimal","reverse","__webpack_require__","d","__webpack_exports__","Byte4Zero","cloneByte4","byte4","clone","ERROR_MASK_RANGE","ERROR_ADDRESS_PARSE","ERROR_NOT_NETWORK","joinBitIndex","byteIndex","bitIndex","splitBitIndex","byte4Index","Address","ip","mask","requireMask","requireNetwork","maskShort","parseAddress","setMaskShort","setMask","isNetworkAddress","Error","bytes","Array","minByte","maskByte","bit","maxByte","allowAbove30","compare","getNetworkAddress","getBroadcastAddress","other","j","ipBytes","maskBytes","net","getDecimal","subnets","secondIpBytes","_splitBitIndex","maskShortTmp","end","tmpMask","address","trim","match","exec","ipByte0","parseInt","ipByte1","ipByte2","ipByte3","setIp","matchIp","omitMask","shortMaskString","getMaskShort","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ErrorBox","_ref","errorMessage","a","createElement","className","removeItem","list","item","indexOf","splice","COLORS","COLOR_QUEUE","Undernets","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","firstTime","txtAddress","rootBlockRef","state","showTree","rootAddress","reset","window","confirm","setState","errStr","current","error","toString","console","React","createRef","_this2","react_default","htmlFor","type","ref","onKeyDown","evt","placeholder","onClick","undernets_SubnetStrip","blockRef","undernets_SubnetTree","Component","SubnetTree","undernets_SubnetBranch","parent","color","SubnetBranch","_this3","divided","subnetComponents","nextColor","firstSubnet","assertThisInitialized","lastSubnet","subnetBefore","subnetAfter","canDivide","handleClick","push","shift","unshift","pop","colorList","before","after","handleMouseEnter","highlighted","handleMouseLeave","subdivide","Fragment","onMouseEnter","onMouseLeave","numberOfHosts","subnetBlockComponents","SubnetStrip","_this4","tooltip","showTooltip","text","textContent","style","opacity","transform","display","hideTooltip","undernets_SubnetBlock","id","content","SubnetBlock","_this5"],"mappings":"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","file":"static/js/5.fad3c86c.chunk.js","sourcesContent":["import { decimalToBinary, binaryToDecimal } from \"../utils/math\";\n\n/**\n * An array of 8 bits (boolean values).\n */\nexport type Bit8 = [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];\n\n/**\n * Returns a Bit8 filled with false.\n */\nexport function Bit8Zero(): Bit8 {\n\treturn [false, false, false, false, false, false, false, false];\n}\n\n/**\n * Returns a Bit8 filled with true.\n */\nexport function Bit8Max(): Bit8 {\n\treturn [true, true, true, true, true, true, true, true];\n}\n\n/**\n * Returns a Byte corresponding to the number 0.\n */\nexport function ByteZero(): Byte {\n\treturn new Byte(Bit8Zero());\n}\n\n/**\n * Returns a Byte corresponding to the number 255.\n */\nexport function ByteMax(): Byte {\n\treturn new Byte(Bit8Max());\n}\n\nexport function booleanArrayToBit8 (arr: boolean[]): Bit8 {\n\tif (arr.length > 8) {\n\t\tthrow new RangeError(\"The boolean array must have a length of 8 or less\");\n\t}\n\tlet bit8: Bit8 = Bit8Zero();\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tbit8[i] = arr[i] !== undefined ? arr[i] : false;\n\t}\n\treturn bit8;\n}\n\n/**\n * Error name for a byte outside the correct range.\n */\nexport const ERROR_BYTE_RANGE = \"ByteRangeError\";\n\n/**\n * A Byte, composed of 8 bits (boolean values).\n * @author Henrique Colini\n */\nexport class Byte {\n\n\t/**\n\t * This Byte's Bit8 representation.\n\t */\t\n\tprivate bits: Bit8;\n\n\t/**\n\t * This Byte's numerical representation.\n\t */\n\tprivate decimal: number;\n\t\n\t/**\n\t * Constructs a Byte from a number (0-255) or a Bit8.\n\t * @constructor\n\t * @param  {number|Bit8} value The value of this Byte.\n\t */\n\n\tconstructor(value: number | Bit8) {\n\n\t\tif (typeof value === \"number\") {\n\t\t\tthis.setDecimal(value);\n\t\t}\n\t\telse {\n\t\t\tthis.setBits(value);\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the value of this Byte, using a number (0-255).\n\t * @param  {number} decimal\n\t */\n\n\tsetDecimal(decimal: number): void {\n\n\t\tif (decimal < 0 || decimal > 255 || decimal !== Math.floor(decimal)) {\n\t\t\tlet err = new RangeError(\"The decimal value of a byte must be an integer between 0-255 (inclusive)\");\n\t\t\terr.name = ERROR_BYTE_RANGE;\n\t\t\tthrow err;\n\t\t}\n\n\t\tthis.bits = booleanArrayToBit8(decimalToBinary(decimal));\n\t\tthis.decimal = decimal;\n\n\t}\n\n\t/**\n\t * Sets the value of this Byte, using a Bit8.\n\t * @param  {Bit8} bits\n\t */\n\n\tsetBits(bits: Bit8): void {\n\n\t\tthis.bits = bits;\n\t\tthis.decimal = binaryToDecimal(bits);\n\n\t}\n\n\t/**\n\t * Returns this Byte's numeric value.\n\t */\n\n\tgetDecimal(): number {\n\t\treturn this.decimal;\n\t}\n\n\t/**\n\t * Returns this Byte's Bit8 representation.\n\t */\n\n\tgetBits(): Bit8 {\n\t\treturn this.bits;\n\t}\n\n\t/**\n\t * Getter/Setter of a single bit from this Byte.\n\t * @param  {number} index The index of the bit.\n\t * @param  {boolean|undefined=undefined} value Optional. Sets the value for this bit.\n\t */\n\n\tbit(index: number, value: boolean | undefined = undefined): boolean {\n\n\t\tif (value !== undefined) {\n\t\t\tlet bits = this.bits;\n\t\t\tbits[index] = value;\n\t\t\tthis.setBits(bits);\n\t\t}\n\n\t\treturn this.bits[index];\n\n\t}\n\n\t/**\n\t * Clones this Byte.\n\t */\n\tclone(): Byte {\n\n\t\treturn new Byte(this.bits.slice() as Bit8)\n\n\t}\n\n}","/**\n * Returns a value, clamped between max and min.\n * @param  {number} value The number to be clamped.\n * @param  {number} min The minimum possible number.\n * @param  {number} max The maximum possible number.\n */\nexport function clamp(value: number, min: number, max: number): number {\n\treturn Math.min(Math.max(value, min), max);\n};\n\n/**\n * Converts a binary number (as a string, boolean array, or number array) to a decimal number.\n * @param  {boolean[]} binary The number to be converted. An array of booleans, read from left to right (e.g. 001 equals 4).\n * @param  {boolean} reversed Optional. Whether the input should be reversed (read from right to left). Defaults to false.\n */\nexport function binaryToDecimal(binary: boolean[], reversed: boolean = false): number {\n\n\tif (binary.length === 0) {\n\t\treturn 0;\n\t}\n\n\tlet decimal = 0;\n\n\tfor (let realIndex = 0; realIndex < binary.length; realIndex++) {\n\n\t\tlet i = reversed ? binary.length - realIndex - 1 : realIndex;\n\n\t\tdecimal += binary[i] ? Math.pow(2, i) : 0;\n\t\t\n\t}\n\n\treturn decimal;\n\t\n}\n\n/**\n * Converts a decimal number (must be a positive integer) to an array of booleans (read from left to right, such that 001 equals 4).\n * @param  {number} decimal The number to be converted. Must be a positive integer.\n * @param  {boolean} reversed Optional. Whether the output should be reversed (read from right to left). Defaults to false.\n */\nexport function decimalToBinary(decimal: number, reversed: boolean = false): boolean[] {\n\n\tif (decimal < 0) {\n\t\tthrow new RangeError(\"Attempting to convert negative number to binary\");\n\t}\n\n\tif (decimal !== Math.floor(decimal)) {\n\t\tthrow new RangeError(\"Attempting to convert non-integer number to binary\");\n\t}\n\n\tlet binary: boolean[] = [];\n\n\tlet tmpDecimal = decimal, i = 0;\n\n\twhile (tmpDecimal > 0) {\n\n\t\tbinary[i] = tmpDecimal % 2 ? true : false;\n\t\ttmpDecimal = Math.floor(tmpDecimal / 2);\n\n\t\ti++;\n\n\t}\n\n\tif (reversed) {\n\t\tbinary.reverse();\n\t}\n\n\treturn binary;\n\n}","import { Byte, ByteZero, ByteMax } from \"../../byte\";\n\n/**\n * An array of 4 Bytes.\n */\nexport type Byte4 = [Byte,Byte,Byte,Byte];\n\n/**\n * Returns a Byte4 corresponding to 0, 0, 0, 0.\n */\nexport function Byte4Zero(): Byte4 {\n\treturn [ByteZero(), ByteZero(), ByteZero(), ByteZero()];\n}\n\n/**\n * Returns a Byte4 corresponding to 255, 255, 255, 255.\n */\nexport function Byte4Max(): Byte4 {\n\treturn [ByteMax(), ByteMax(), ByteMax(), ByteMax()];\n}\n\n/**\n * Clones a Byte4.\n * @param  {Byte4} byte4 The Byte4 to be cloned.\n */\nexport function cloneByte4(byte4: Byte4): Byte4 {\n\n\tbyte4 = byte4.slice() as Byte4;\n\n\tfor (let i = 0; i < 4; i++) {\n\t\tbyte4[i] = byte4[i].clone();\t\t\n\t}\n\n\treturn byte4;\n\n}\n\n/**\n * Error name for a mask with holes.\n */\nexport const ERROR_MASK_HOLES = \"MaskHolesError\";\n/**\n * Error name for a mask outside the correct range.\n */\nexport const ERROR_MASK_RANGE = \"MaskRangeError\";\n/**\n * Error name for a malformated address string.\n */\nexport const ERROR_ADDRESS_PARSE = \"AddressParseError\";\n/**\n * Error name for a when an Address should be a Network Address, but isn't.\n */\nexport const ERROR_NOT_NETWORK = \"NotNetworkError\";\n\n/**\n * Converts a bit in Byte index to a bit in Byte4 index.\n * @param  {number} byteIndex The index of the Byte in a Byte4.\n * @param  {number} bitIndex The index of the bit in the Byte.\n */\nexport function joinBitIndex(byteIndex: number, bitIndex: number): number {\n\tif (byteIndex > 3 || byteIndex < 0) {\n\t\tthrow new RangeError(\"The byteIndex must be between 0-3 (inclusive)\");\n\t}\n\tif (bitIndex > 7 || bitIndex < 0) {\n\t\tthrow new RangeError(\"The bitIndex must be between 0-7 (inclusive)\");\n\t}\n\treturn (8 * byteIndex) + (7 - bitIndex);\n}\n\n/**\n * Converts a bit in Byte4 index to a bit in Byte index.\n * @param  {number} byte4Index The index of the bit in a Byte4.\n */\nexport function splitBitIndex(byte4Index: number): { byteIndex: number, bitIndex: number } {\n\tif (byte4Index > 31 || byte4Index < 0) {\n\t\tthrow new RangeError(\"The byte4Index must be between 0-31 (inclusive)\");\n\t}\n\treturn {\n\t\tbyteIndex: Math.floor(byte4Index / 8),\n\t\tbitIndex: 7 - (byte4Index % 8)\n\t};\n}\n\n/**\n * A full IP/Mask address.\n * @author Henrique Colini\n */\nexport class Address {\n\t\n\t/**\n\t * This Address' IP.\n\t */\n\tprivate ip: Byte4;\n\n\t/**\n\t * This Address' mask.\n\t */\n\tprivate mask: Byte4;\n\n\t/**\n\t * The numerical representation of this Address' mask.\n\t */\n\tprivate maskShort: number;\n\n\t\n\t/**\n\t * Constructs an Address, given an IP and a mask.\n\t * @constructor\n\t * @param  {Byte4|string} ip The IP of this Address. May be a Byte4 or a formatted string.\n\t * @param  {Byte4|number} mask Optional. The mask of this Address. May be a Byte4 or its numerical representation. If not given, defaults to /0.\n\t * @param  {boolean} requireMask Optional. If set to true, the mask becomes a required parameter in the formatted string.\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a Network Address. Defaults to false.\n\t */\n\tconstructor(ip: Byte4 | string, mask?: Byte4 | number, requireMask: boolean = false, requireNetwork: boolean = false) {\n\n\t\tif (typeof ip === \"string\") {\n\t\t\tthis.parseAddress(ip, requireMask);\n\t\t}\n\t\telse {\n\t\t\tthis.ip = ip;\n\t\t}\n\n\t\tif (!this.mask) {\n\t\t\tif (mask) {\n\t\t\t\tif (typeof mask === \"number\") {\n\t\t\t\t\tthis.setMaskShort(mask);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.setMask(mask);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setMask(Byte4Zero());\n\t\t\t}\n\t\t}\n\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\n\t\t\tlet err = new Error(\"Not a Network Address\");\n\t\t\terr.name = ERROR_NOT_NETWORK;\n\t\t\tthrow err;\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the Network Address of this Address.\n\t * @param {boolean} allowAbove30 Optional. If false, returns undefined if the mask is greater than 30. Defaults to false.\n\t */\n\tpublic getNetworkAddress(allowAbove30: boolean = false): Address {\n\n\t\tif (!allowAbove30 && this.maskShort > 30) return undefined;\n\n\t\tlet bytes: Byte4 = Array<Byte>(4) as Byte4;\n\n\t\tfor (let i = 0; i < 4; i++) {\n\n\t\t\tlet minByte = this.ip[i].clone();\n\t\t\tlet maskByte = this.mask[i];\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (!maskByte.bit(i)) {\n\t\t\t\t\tminByte.bit(i, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbytes[i] = minByte;\n\n\t\t}\n\n\t\treturn new Address(bytes, cloneByte4(this.mask));\n\n\t}\n\n\t/**\n\t * Returns the Broadcast Address of this Address' network.\n\t * @param {boolean} allowAbove30 Optional. If false, returns undefined if the mask is greater than 30. Defaults to false.\n\t */\n\tpublic getBroadcastAddress(allowAbove30: boolean = false): Address {\n\n\t\tif (!allowAbove30 && this.maskShort > 30) return undefined;\n\n\t\tlet bytes: Byte4 = Array<Byte>(4) as Byte4;\n\n\t\tfor (let i = 0; i < 4; i++) {\n\n\t\t\tlet maxByte = this.ip[i].clone();\n\t\t\tlet maskByte = this.mask[i];\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\tif (!maskByte.bit(i)) {\n\t\t\t\t\tmaxByte.bit(i, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbytes[i] = maxByte;\n\n\t\t}\n\n\t\treturn new Address(bytes, cloneByte4(this.mask));\n\n\t}\n\t\n\t/**\n\t * Returns whether this Address is a Network Address.\n\t * @param {boolean} allowAbove30 Optional. If false, returns false if the mask is greater than 30. Defaults to false.\n\t */\n\tpublic isNetworkAddress(allowAbove30: boolean = false): boolean {\n\t\treturn this.compare(this.getNetworkAddress(allowAbove30));\n\t};\n\n\t/**\n\t * Returns whether this Address is a Broadcast Address.\n\t * @param {boolean} allowAbove30 Optional. If false, returns false if the mask is greater than 30. Defaults to false.\n\t */\n\tpublic isBroadcastAddress(allowAbove30: boolean = false): boolean {\n\t\treturn this.compare(this.getBroadcastAddress(allowAbove30));\n\t};\n\t\n\t/**\n\t * Returns true if this Address is the same as another.\n\t * @param {Address} other the Address to be compared with.\n\t */\n\tpublic compare(other: Address): boolean {\n\n\t\tif (!other) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this === other)\n\t\t\treturn true;\n\n\t\tif (this.ip === other.ip && (this.mask === other.mask || this.maskShort === other.maskShort))\n\t\t\treturn true;\n\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = 0; j < 8; j++) {\n\t\t\t\tif ((this.ip[i].bit(j) !== other.ip[i].bit(j)) || (this.mask[i].bit(j) !== other.mask[i].bit(j))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\n\t\treturn true;\n\n\t}\n\t\n\t/**\n\t * Returns the amount of hosts that this Address' network has.\n\t * @param {boolean} requireNetwork Optional. If true, throws an error if this is not a Network Address. Defaults to false.\n\t */\n\tpublic numberOfHosts(requireNetwork: boolean = false): number {\n\n\t\tif(requireNetwork && !this.isNetworkAddress(true)) {\n\t\t\tlet err = new Error(\"Not a Network Address\");\n\t\t\terr.name = ERROR_NOT_NETWORK;\n\t\t\tthrow err;\n\t\t}\n\n\t\tif (this.maskShort === 31)\n\t\t\treturn 2;\n\t\tif (this.maskShort === 32)\n\t\t\treturn 1;\n\t\treturn (Math.pow(2, 32 - this.maskShort) - 2);\n\n\t}\n\n\t/**\n\t * Returns the first valid host Address of this network.\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a Network Address. Defaults to false.\n\t */\n\tpublic firstHost(requireNetwork: boolean = false): Address {\n\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\n\t\t\tlet err = new Error(\"Not a Network Address\");\n\t\t\terr.name = ERROR_NOT_NETWORK;\n\t\t\tthrow err;\n\t\t}\n\n\t\tlet ipBytes: Byte4;\n\t\tlet maskBytes: Byte4;\n\n\t\tif (requireNetwork) {\n\t\t\tipBytes = cloneByte4(this.ip);\n\t\t\tmaskBytes = cloneByte4(this.mask);\n\t\t}\n\t\telse {\n\t\t\tlet net = this.getNetworkAddress(true);\n\t\t\tipBytes = net.ip;\n\t\t\tmaskBytes = net.mask;\n\t\t}\n\n\t\tif (this.maskShort < 31) {\n\t\t\tipBytes[3].setDecimal(ipBytes[3].getDecimal() + 1);\n\t\t}\n\n\t\treturn new Address(ipBytes, maskBytes);\n\n\t}\n\n\t/**\n\t * Returns the last valid host Address of this network.\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a Network Address. Defaults to false.\n\t */\n\tpublic lastHost(requireNetwork: boolean = false): Address {\n\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\n\t\t\tlet err = new Error(\"Not a Network Address\");\n\t\t\terr.name = ERROR_NOT_NETWORK;\n\t\t\tthrow err;\n\t\t}\n\n\t\tlet ipBytes: Byte4;\n\t\tlet maskBytes: Byte4;\n\n\t\tlet net = this.getBroadcastAddress(true);\n\t\tipBytes = net.ip;\n\t\tmaskBytes = net.mask;\n\n\t\tif (this.maskShort < 31) {\n\t\t\tipBytes[3].setDecimal(ipBytes[3].getDecimal() - 1);\n\t\t}\n\n\t\treturn new Address(ipBytes, maskBytes);\n\n\t}\n\n\t/**\n\t * Divides this Address into two subnets.\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a Network Address. Defaults to false.\n\t */\n\tpublic subdivide(requireNetwork: boolean = false): [Address, Address] {\n\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\n\t\t\tlet err = new Error(\"Not a Network Address\");\n\t\t\terr.name = ERROR_NOT_NETWORK;\n\t\t\tthrow err;\n\t\t}\n\n\t\tlet subnets: [Address, Address] = [undefined, undefined];\n\n\t\tif (this.maskShort === 32) {\n\t\t\treturn subnets;\n\t\t}\n\n\t\tlet ipBytes: Byte4;\n\n\t\tif (requireNetwork) {\n\t\t\tipBytes = cloneByte4(this.ip);\n\t\t}\n\t\telse {\n\t\t\tlet net = this.getNetworkAddress(true);\n\t\t\tipBytes = net.ip;\n\t\t}\n\n\t\tsubnets[0] = new Address(cloneByte4(ipBytes), this.maskShort+1);\n\t\t\n\t\tlet secondIpBytes: Byte4 = cloneByte4(ipBytes);\n\t\tlet {byteIndex, bitIndex} = splitBitIndex(this.maskShort);\n\t\tsecondIpBytes[byteIndex].bit(bitIndex, true);\n\n\t\tsubnets[1] = new Address(secondIpBytes, this.maskShort+1);\n\n\t\treturn subnets;\n\n\t}\n\t\n\t/**\n\t * Sets this Address' mask.\n\t * @param  {Byte4} mask The Byte4 mask to be set.\n\t */\n\tpublic setMask(mask: Byte4): void {\n\n\t\tlet maskShortTmp = 0;\n\t\tlet end = false;\n\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = 0; j < 8; j++) {\n\n\t\t\t\tif (mask[i].bit(8 - 1 - j)) {\n\t\t\t\t\tif(!end) {\n\t\t\t\t\t\tmaskShortTmp++;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet err = new Error(\"Mask contains holes\");\n\t\t\t\t\t\terr.name = ERROR_MASK_HOLES;\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tend = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.maskShort = maskShortTmp;\n\t\tthis.mask = mask;\n\n\t}\n\n\t/**\n\t * Sets this Address' mask, given its numerical representation (0-32).\n\t * @param  {number} maskShort The numerical mask to be set.\n\t */\n\tpublic setMaskShort(maskShort: number): void {\n\n\t\tif (maskShort < 0 || maskShort > 32) {\n\t\t\tlet err = new RangeError(\"The short mask should be between 0 and 32\");\n\t\t\terr.name = ERROR_MASK_RANGE;\n\t\t\tthrow err;\n\t\t}\n\n\t\tlet tmpMask: Byte4 = Byte4Zero();\n\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = 0; j < 8; j++) {\n\t\t\t\tif (((8 * i) + j) < maskShort) {\n\t\t\t\t\ttmpMask[i].bit(8 - 1 - j, true);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttmpMask[i].bit(8 - 1 - j, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.maskShort = maskShort;\n\t\tthis.mask = tmpMask;\n\n\t}\n\n\t/**\n\t * Sets this Address' IP value.\n\t * @param  {Byte4} ip\n\t */\n\tpublic setIp(ip: Byte4): void {\n\t\tthis.ip = ip;\n\t}\n\n\t/**\n\t * Returns this Address' mask.\n\t */\n\tpublic getMask(): Byte4 {\n\t\treturn this.mask;\n\t}\n\n\t/**\n\t * Returns the numerical representation of this Address' mask.\n\t */\n\tpublic getMaskShort(): number {\n\t\treturn this.maskShort;\n\t}\n\t\n\t/**\n\t * Returns this Address' IP value.\n\t */\n\tpublic getIp(): Byte4 {\n\t\treturn this.ip;\n\t}\n\n\t/**\n\t * Sets this Address IP/Mask values from a parsed string.\n\t * @param  {string} address The full address, in the X.X.X.X/X format. If requireMask is false, the mask can be ommited and defaults to /0.\n\t * @param  {boolean=true} requireMask Whether the address requires the mask to be given.\n\t */\n\tpublic parseAddress(address: string, requireMask: boolean = true): void {\n\n\t\taddress = address.trim();\n\t\tconst fullRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\/(\\d+)$/;\n\t\tconst ipRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/;\n\n\t\tlet match = fullRegex.exec(address);\n\n\t\tif (match !== null) {\n\t\t\tlet ipByte0 = new Byte(parseInt(match[1], 10));\n\t\t\tlet ipByte1 = new Byte(parseInt(match[2], 10));\n\t\t\tlet ipByte2 = new Byte(parseInt(match[3], 10));\n\t\t\tlet ipByte3 = new Byte(parseInt(match[4], 10));\n\t\t\tlet maskShort = parseInt(match[5], 10);\n\n\t\t\tif (maskShort < 0 || maskShort > 32) {\n\t\t\t\tlet err = new RangeError(\"The short mask should be between 0 and 32\");\n\t\t\t\terr.name = ERROR_MASK_RANGE;\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tthis.setIp([ipByte0, ipByte1, ipByte2, ipByte3]);\n\t\t\tthis.setMaskShort(maskShort);\n\t\t}\n\t\telse if (!requireMask) {\n\n\t\t\tlet matchIp = ipRegex.exec(address);\n\n\t\t\tif (matchIp !== null) {\n\t\t\t\tlet ipByte0 = new Byte(parseInt(matchIp[1], 10));\n\t\t\t\tlet ipByte1 = new Byte(parseInt(matchIp[2], 10));\n\t\t\t\tlet ipByte2 = new Byte(parseInt(matchIp[3], 10));\n\t\t\t\tlet ipByte3 = new Byte(parseInt(matchIp[4], 10));\n\n\t\t\t\tthis.setIp([ipByte0, ipByte1, ipByte2, ipByte3]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet err = new Error(\"Invalid IP/mask address string\");\n\t\t\t\terr.name = ERROR_ADDRESS_PARSE;\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tlet err = new Error(\"Invalid IP/mask address string\");\n\t\t\terr.name = ERROR_ADDRESS_PARSE;\n\t\t\tthrow err;\n\t\t}\n\n\t}\n\n\t\n\t/**\n\t * Returns the string representation of this Address in the X.X.X.X/X format.\n\t * @param  {boolean} omitMask Whether the mask should be ommited. Defaults to false.\n\t */\n\ttoString(omitMask: boolean = false): string {\n\n\t\treturn \"\" +\n\t\t\tthis.ip[0].getDecimal() + \".\" +\n\t\t\tthis.ip[1].getDecimal() + \".\" +\n\t\t\tthis.ip[2].getDecimal() + \".\" +\n\t\t\tthis.ip[3].getDecimal() + (omitMask? \"\" : this.shortMaskString());\n\n\t}\n\n\t/**\n\t * Returns the string representation of the mask.\n\t */\n\tmaskString(): string {\n\t\treturn \"\" +\n\t\t\tthis.mask[0].getDecimal() + \".\" +\n\t\t\tthis.mask[1].getDecimal() + \".\" +\n\t\t\tthis.mask[2].getDecimal() + \".\" +\n\t\t\tthis.mask[3].getDecimal();\n\t}\n\n\tshortMaskString(): string {\n\t\treturn \"/\" + this.getMaskShort();\n\t}\n\n}","import React, { FC } from \"react\";\n\ninterface ErrorBoxProps {\n\terrorMessage: string\n}\n\nconst ErrorBox: FC<ErrorBoxProps> = ({errorMessage}) => {\n\n    if (errorMessage) {\n        return (\n            <div className=\"errorbox\">{errorMessage}</div>\n        );\n    }\n\n    return null;\n\n}\n\nexport default ErrorBox;","/**\n * Removes an item from an array.\n * @param  {any[]} list The array that will have the item removed.\n * @param  {any} item The item to be removed.\n */\nexport function removeItem(list: any[], item: any): void {\n\tlet index = list.indexOf(item);\n\tif (index > -1) {\n\t\tlist.splice(index, 1);\n\t}\n}","// Undernets\n// +=========================+\n// Author: Henrique Colini\n// Version: 3.0 (2019-08-26)\n\nimport React, { Component, RefObject } from \"react\";\nimport ErrorBox from \"../../../components/ErrorBox\";\nimport { removeItem } from \"../../../wireworks/utils/array\";\nimport { Address, ERROR_NOT_NETWORK, ERROR_ADDRESS_PARSE, ERROR_MASK_RANGE, Byte4Zero } from \"../../../wireworks/networking/layers/layer-3/address\";\nimport { ERROR_BYTE_RANGE } from \"../../../wireworks/networking/byte\";\nimport \"src/sass/pages/undernets.scss\"\n\n/**\n * A list of color classes used in the Visual Networks.\n */\nconst COLORS = [];\n\nfor (let i = 0; i < 10; i++) COLORS[i] = 'ss-'+i;\n\n/**\n * The queue of colors that will be applied to future subnets.\n */\nconst COLOR_QUEUE = COLORS.slice();\n\n// +==============================================+\n\nclass Undernets extends Component {\n\n\t/**\n\t * Whether it's the first time the user has created a network.\n\t */\n\tprivate firstTime = true;\n\t/**\n\t * The text input for the base address.\n\t */\n\tprivate txtAddress: RefObject<HTMLInputElement>;\n\t/**\n\t * A reference to the root colored block component.\n\t */\n\tprivate rootBlockRef: RefObject<SubnetBlock>;\n\n\tstate = {\n\t\terrorMessage: null,\n\t\tshowTree: false,\n\t\trootAddress: new Address(Byte4Zero())\n\t};\n\n\t/**\n\t * Resets Undernets.\n\t */\n\tprivate reset = () => {\n\n\t\tif (this.firstTime || window.confirm(\"Tem certeza de que quer visualizar uma nova rede?\\nIsso irá excluir todas as sub-redes existentes.\")) {\n\n\t\t\tthis.setState({errorMessage: null, showTree: false, rootAddress: undefined});\n\n\t\t\tlet errStr: string = undefined;\n\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tlet rootAddress = new Address(this.txtAddress.current.value);\n\n\t\t\t\ttry {\n\n\t\t\t\t\trootAddress = new Address(this.txtAddress.current.value, undefined, true, true);\n\n\t\t\t\t} catch (error) {\n\n\t\t\t\t\tif (error.name === ERROR_NOT_NETWORK) {\n\t\t\t\t\t\terrStr = \"Este não é um endereço de rede. Você quis dizer \" + rootAddress.getNetworkAddress(true).toString() + \"?\";\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\tthis.setState({showTree: true, rootAddress: rootAddress});\n\t\t\t\tthis.firstTime = false;\n\n\t\t\t} catch (error) {\n\t\t\t\t\n\t\t\t\tif (!errStr) {\n\n\t\t\t\t\tswitch (error.name) {\n\t\t\t\t\t\tcase ERROR_ADDRESS_PARSE:\n\t\t\t\t\t\t\terrStr = \"A entrada deve possuir o formato 0.0.0.0/0.\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ERROR_MASK_RANGE:\n\t\t\t\t\t\t\terrStr = \"O valor da máscara é alto demais (deve estar entre 0-32).\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ERROR_BYTE_RANGE:\n\t\t\t\t\t\t\terrStr = \"Um ou mais octetos possui um valor alto demais (deve estar entre 0-255).\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\terrStr = \"Erro desconhecido (\" + error.name + \").\"\n\t\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.setState({errorMessage: errStr});\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state.rootAddress = undefined;\n\t\tthis.txtAddress = React.createRef();\n\t\tthis.rootBlockRef = React.createRef();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<label htmlFor=\"address\">Rede/Máscara</label>\n\n\t\t\t\t<h1>\n\t\t\t\t\t<input type=\"text\" name=\"address\" ref={this.txtAddress} onKeyDown={(evt) => { if (evt.key === \"Enter\") this.reset()}} placeholder=\"0.0.0.0/0\"/>\n\t\t\t\t\t<button type=\"button\" onClick={this.reset}>Visualizar Rede</button>\n\t\t\t\t</h1>\n\n\t\t\t\t<ErrorBox errorMessage={this.state.errorMessage}/>\n\n\t\t\t\t<SubnetStrip address={this.state.rootAddress} blockRef={this.rootBlockRef}/>\n\n\t\t\t\t{\n\t\t\t\t\tthis.state.showTree &&\n\t\t\t\t\t\t<SubnetTree address={this.state.rootAddress} blockRef={this.rootBlockRef}/>\n\t\t\t\t}\n\n\t\t\t</main>\n\t\t);\n\t}\n\n}\n\ninterface SubnetTreeProps {\n\taddress: Address,\n\tblockRef: RefObject<SubnetBlock>\n}\n\n/**\n * Component representing the subnet tree.\n */\nclass SubnetTree extends Component<SubnetTreeProps> {\n\t\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"subnet-tree\">\n\t\t\t\t<SubnetBranch address={this.props.address} parent={null} color=\"ss-0\" blockRef={this.props.blockRef}/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\ninterface SubnetBranchProps {\n\taddress: Address,\n\tparent: SubnetBranch,\n\tcolor: string,\n\tblockRef: RefObject<SubnetBlock>\n}\n\n/**\n * A branch of the subnet tree. Usually contains other branches.\n */\nclass SubnetBranch extends Component<SubnetBranchProps> {\n\n\tstate = {\n\t\tdivided: false\n\t};\n\n\t/**\n\t * The calculated subnets of this branch's network.\n\t */\n\tprivate subnets: [Address, Address];\n\t/**\n\t * The references to the subnet branch components child to this branch.\n\t */\n\tprivate subnetComponents: [RefObject<SubnetBranch>, RefObject<SubnetBranch>];\n\t/**\n\t * The color of the second child SubnetBranch.\n\t */\n\tprivate nextColor: string;\n\n\t/**\n\t * Recursively returns the first (non split) subnet in this network.\n\t */\n\tpublic firstSubnet = (): SubnetBranch => {\n\n\t\tif (this.subnetComponents[0].current)\n\t\t\treturn this.subnetComponents[0].current.firstSubnet();\n\t\telse\n\t\t\treturn this;\n\t}\n\n\t/**\n\t * Recursively returns the last (non split) subnet in this network.\n\t */\n\tpublic lastSubnet = (): SubnetBranch => {\n\n\t\tif (this.subnetComponents[1].current)\n\t\t\treturn this.subnetComponents[1].current.lastSubnet();\n\t\telse\n\t\t\treturn this;\n\t}\n\n\t/**\n\t * Returns this network's previous sibling.\n\t */\n\tpublic subnetBefore = (): SubnetBranch => {\n\n\t\tif (this.props.parent) {\n\t\t\tif (this.props.parent.subnetComponents[0].current === this) {\n\t\t\t\treturn this.props.parent.subnetBefore();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.props.parent.subnetComponents[0].current.lastSubnet();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns this network's next sibling.\n\t */\n\tpublic subnetAfter = (): SubnetBranch => {\n\n\t\tif (this.props.parent) {\n\t\t\tif (this.props.parent.subnetComponents[1].current === this) {\n\t\t\t\treturn this.props.parent.subnetAfter();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.props.parent.subnetComponents[1].current.firstSubnet();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Whether this branch's subnet can be further divided (i.e. mask is lower than 32).\n\t */\n\tpublic canDivide = (): boolean =>  {\n\t\treturn (this.subnets[0] && true) && (this.subnets[1] && true);\n\t}\n\n\t/**\n\t * Handles click events of this branch.\n\t */\n\tprivate handleClick = () => {\n\t\n\t\tif (this.state.divided) {\n\n\t\t\tif ((!this.subnetComponents[0].current.state.divided && !this.subnetComponents[1].current.state.divided) ||\n\t\t\t\t\twindow.confirm(\"Tem certeza de quer fundir essas duas sub-redes?\\nTodas as sub-redes dessas duas serão apagadas para sempre.\")) {\n\t\t\t\t\n\t\t\t\tCOLOR_QUEUE.push(COLOR_QUEUE[0]);\n\t\t\t\tCOLOR_QUEUE.shift();\n\t\t\t\t\n\t\t\t\tthis.props.blockRef.current.setState({divided: false, nextColor: \"\", subnets: undefined});\n\t\t\t\tthis.setState({divided: false});\t\n\t\t\t}\n\n\t\t}\n\t\telse if (this.canDivide()) {\n\n\t\t\tCOLOR_QUEUE.unshift(COLOR_QUEUE[COLOR_QUEUE.length - 1]);\n\t\t\tCOLOR_QUEUE.pop();\n\n\t\t\tlet colorList = COLOR_QUEUE.slice();\n\n\t\t\tlet before = this.subnetBefore();\n\t\t\tlet after = this.subnetAfter();\n\n\t\t\tremoveItem(colorList, this.props.color);\n\t\t\tif (before) removeItem(colorList, before.props.color);\n\t\t\tif (after) removeItem(colorList, after.props.color);\n\n\t\t\tthis.nextColor = colorList[0];\n\n\t\t\tthis.props.blockRef.current.setState({divided: true, nextColor: this.nextColor, subnets: this.subnets});\n\t\t\tthis.setState({divided: !this.state.divided});\n\n\t\t}\n\n\n\t}\n\n\t/**\n\t * Handles mouse entering events of this branch.\n\t */\n\tprivate handleMouseEnter = () => {\n\t\tif (this.props.parent)\n\t\t\tthis.props.blockRef.current.setState({highlighted: true});\n\t}\n\n\t/**\n\t * Handles mouse leaving events of this branch.\n\t */\n\tprivate handleMouseLeave = () => {\n\t\tif (this.props.parent)\n\t\t\tthis.props.blockRef.current.setState({highlighted: false});\n\t}\n\n\tcomponentWillReceiveProps(props: SubnetBranchProps) {\t\t\n\t\tthis.subnets = props.address.subdivide();\n\t\tthis.setState({divided: false});\n\t\tprops.blockRef.current.setState({divided: false});\n\t}\n\n\tconstructor(props: SubnetBranchProps) {\n\t\tsuper(props);\t\t\n\t\tthis.subnets = props.address.subdivide();\n\t\tthis.subnetComponents = [React.createRef(), React.createRef()];\n\t}\t\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<span\n\t\t\t\t\tonMouseEnter={this.handleMouseEnter}\n\t\t\t\t\tonMouseLeave={this.handleMouseLeave}\n\t\t\t\t\tclassName={this.props.color + \" \" + (this.state.divided ? \"subnet-merge\" : \"subnet-divide\") + (this.canDivide()? \"\" : \" disabled\")}\n\t\t\t\t\tonClick={this.handleClick}>\n\n\t\t\t\t\t{this.props.address.toString() + \" (\" + this.props.address.numberOfHosts() + \" hosts)\"}\n\t\t\t\t</span>\n\t\t\t\t{\n\t\t\t\t\tthis.state.divided && \n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li><SubnetBranch blockRef={this.props.blockRef.current.subnetBlockComponents[0]} ref={this.subnetComponents[0]} address={this.subnets[0]} parent={this} color={this.props.color}/></li>\n\t\t\t\t\t\t\t<li><SubnetBranch blockRef={this.props.blockRef.current.subnetBlockComponents[1]} ref={this.subnetComponents[1]} address={this.subnets[1]} parent={this} color={this.nextColor}/></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n\n}\n\ninterface SubnetStripProps {\n\taddress: Address,\n\tblockRef: RefObject<SubnetBlock>\n}\n\n/**\n * The component representing the strip of colored blocks.\n */\nclass SubnetStrip extends Component<SubnetStripProps> {\n\n\t/**\n\t * A reference to the tooltip of the colored strip.\n\t */\n\tprivate tooltip: RefObject<HTMLSpanElement>;\n\n\t/**\n\t * Displays a certain text through the tooltip.\n\t */\n\tprivate showTooltip = (text: string) => {\n\t\tthis.tooltip.current.textContent = text;\n\t\tthis.tooltip.current.style.opacity = \"1\";\n\t\tthis.tooltip.current.style.transform = \"scaleY(1)\";\n\t\tthis.tooltip.current.style.display = 'inline-block';\n\t}\n\n\t/**\n\t * Hides the tooltip.\n\t */\n\tprivate hideTooltip = () => {\n\t\tthis.tooltip.current.style.opacity = \"0\";\n\t\tthis.tooltip.current.style.transform = \"scaleY(0)\";\n\t}\n\n\tcomponentWillReceiveProps(props: SubnetStripProps) {\n\t\tif (!props.address) {\n\t\t\tthis.props.blockRef.current.setState({divided: false});\n\t\t}\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.tooltip = React.createRef();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"blocks-wrapper \" onMouseLeave={this.hideTooltip}>\n\t\t\t\t<SubnetBlock ref={this.props.blockRef} address={this.props.address} color=\"ss-0\" id=\"root_block\" content={ !this.props.address? \"Insira a sua rede\" : \"\"} showTooltip={this.showTooltip}/>\n\t\t\t\t<div className=\"tooltip-wrapper\">\n\t\t\t\t\t<span id=\"tooltip\" ref={this.tooltip}>Informações das suas sub-redes ficarão aqui</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\ninterface SubnetBlockProps {\n\taddress: Address,\n\tcolor: string,\n\tid?: string\n\tcontent?: string\n\tshowTooltip: (string)=>void\n}\n\n/**\n * The component representing a colored block.\n */\nclass SubnetBlock extends Component<SubnetBlockProps> {\n\n\t/**\n\t * The references to the child blocks (subnets of this block's network).\n\t */\n\tpublic subnetBlockComponents: [RefObject<SubnetBlock>, RefObject<SubnetBlock>];\n\n\tstate = {\n\t\thighlighted: false,\n\t\tdivided: false,\n\t\tsubnets: [undefined, undefined],\n\t\tnextColor: \"\"\n\t}\n\n\t/**\n\t * Handles mouse entering events.\n\t */\n\tprivate handleMouseEnter = () => {\n\t\tif (this.props.address && !this.state.divided)\n\t\t\tthis.props.showTooltip(this.props.address.toString() + \" (\" + this.props.address.numberOfHosts() + \" hosts)\");\n\t}\n\n\tconstructor(props: SubnetBlockProps) {\n\t\tsuper(props);\n\t\tthis.subnetBlockComponents = [React.createRef(), React.createRef()];\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div id={this.props.id} className={\"subnet-block \" + this.props.color + (this.state.highlighted? \" highlight\" : \"\")} onMouseEnter={this.handleMouseEnter}>\n\t\t\t\t{ this.props.content? <h1>{this.props.content}</h1>:\"\"}\n\t\t\t\t{ \n\t\t\t\t\tthis.state.divided &&\n\t\t\t\t\t<>\n\t\t\t\t\t\t<SubnetBlock address={this.state.subnets[0]} color={this.props.color} ref={this.subnetBlockComponents[0]} showTooltip={this.props.showTooltip}/>\n\t\t\t\t\t\t<SubnetBlock address={this.state.subnets[1]} color={this.state.nextColor} ref={this.subnetBlockComponents[1]} showTooltip={this.props.showTooltip}/>\n\t\t\t\t\t</>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default Undernets;"],"sourceRoot":""}