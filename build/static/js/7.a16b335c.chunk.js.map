{"version":3,"sources":["app/wireworks/networking/byte.ts","app/wireworks/utils/math.ts","app/wireworks/networking/layers/layer-3/ip.ts","app/wireworks/utils/dom.ts","app/wireworks/utils/string.ts","app/pages/tools/layer-3/ipbits.tsx"],"names":["ByteZero","Byte","ByteMax","ERROR_BYTE_RANGE","value","Object","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","bits","decimal","setDecimal","setBits","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","Math","floor","err","RangeError","name","arr","length","bit8","i","undefined","booleanArrayToBit8","decimalToBinary","binaryToDecimal","index","arguments","slice","clamp","min","max","binary","reversed","realIndex","pow","tmpDecimal","reverse","__webpack_require__","d","__webpack_exports__","Byte4Zero","cloneByte4","byte4","clone","ERROR_MASK_RANGE","ERROR_ADDRESS_PARSE","ERROR_NOT_NETWORK","joinBitIndex","byteIndex","bitIndex","splitBitIndex","byte4Index","IP","ip","mask","requireMask","requireNetwork","maskShort","parseIP","setMaskShort","setMask","isNetworkAddress","Error","bytes","Array","minByte","maskByte","bit","maxByte","allowAbove30","compare","getNetworkAddress","getBroadcastAddress","other","j","ipBytes","maskBytes","net","getDecimal","subnets","secondIpBytes","_splitBitIndex","maskShortTmp","end","tmpMask","address","trim","match","exec","ipByte0","parseInt","ipByte1","ipByte2","ipByte3","setIp","matchIp","omitMask","shortMaskString","getMaskShort","copyToClipboard","str","done","tmp","document","createElement","style","position","top","left","opacity","body","appendChild","focus","select","success","execCommand","removeChild","NUMBERS","isCharNumeric","indexOf","additionalKeys","Ipbits","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","MASK","maskDisplays","ipDisplays","ipDisplayShort","maskDisplayShort","copyMaskButton","copyIPButton","copyMaskText","copyIPText","updateDisplays","extractIPAddress","current","getIp","textContent","getMask","updateIPShort","toString","updateMaskShort","selectMaskBit","checked","_splitBitIndex2","on","disabled","copyIPToClipboard","scope","assertThisInitialized","text","transition","setTimeout","copyMaskToClipboard","maskString","handleIPBitChange","handleMaskBitChange","blurByte","handleDisplayFocus","display","originalAddress","handleDisplayBlur","setIPByteDOM","handleDisplayKeydown","evt","blur","selectedText","window","getSelection","anchorNode","parentNode","preventDefault","handleDisplayKeyup","next","handleDisplayChange","charAt","isStringNumeric","React","createRef","byte","updateBig","updateShort","dom","_this2","maskBox","ipBox","_loop","bitBox","_loop3","id","push","react_default","a","className","tabIndex","ref","type","onChange","htmlFor","_loop2","ipDisplay","onFocus","onBlur","onKeyDown","onKeyUp","onClick","Component"],"mappings":"qPAwBO,SAASA,IACf,OAAO,IAAIC,EAdJ,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,IAoBnD,SAASC,IACf,OAAO,IAAID,EAdJ,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IA+B5C,IAAME,EAAmB,iBAMnBF,EAAb,WAkBC,SAAAA,EAAYG,GAAuBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAAM,KAb3BC,UAa0B,EAAAD,KAR1BE,aAQ0B,EAEZ,kBAAVL,EACVG,KAAKG,WAAWN,GAGhBG,KAAKI,QAAQP,GAxBhB,OAAAC,OAAAO,EAAA,EAAAP,CAAAJ,EAAA,EAAAY,IAAA,aAAAT,MAAA,SAkCYK,GAEV,GAAIA,EAAU,GAAKA,EAAU,KAAOA,IAAYK,KAAKC,MAAMN,GAAU,CACpE,IAAIO,EAAM,IAAIC,WAAW,4EAEzB,MADAD,EAAIE,KAAOf,EACLa,EAGPT,KAAKC,KA9DA,SAA6BW,GACnC,GAAIA,EAAIC,OAAS,EAChB,MAAM,IAAIH,WAAW,qDAGtB,IADA,IAAII,EA5BG,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GA6BhDC,EAAI,EAAGA,EAAIH,EAAIC,OAAQE,IAC/BD,EAAKC,QAAgBC,IAAXJ,EAAIG,IAAmBH,EAAIG,GAEtC,OAAOD,EAsDMG,CAAmBC,YAAgBhB,IAC/CF,KAAKE,QAAUA,IA3CjB,CAAAI,IAAA,UAAAT,MAAA,SAoDSI,GAEPD,KAAKC,KAAOA,EACZD,KAAKE,QAAUiB,YAAgBlB,KAvDjC,CAAAK,IAAA,aAAAT,MAAA,WAgEE,OAAOG,KAAKE,UAhEd,CAAAI,IAAA,UAAAT,MAAA,WAwEE,OAAOG,KAAKC,OAxEd,CAAAK,IAAA,MAAAT,MAAA,SAiFKuB,GAAgE,IAAjDvB,EAAiDwB,UAAAR,OAAA,QAAAG,IAAAK,UAAA,GAAAA,UAAA,QAApBL,EAE/C,QAAcA,IAAVnB,EAAqB,CACxB,IAAII,EAAOD,KAAKC,KAChBA,EAAKmB,GAASvB,EACdG,KAAKI,QAAQH,GAGd,OAAOD,KAAKC,KAAKmB,KAzFnB,CAAAd,IAAA,QAAAT,MAAA,WAkGE,OAAO,IAAIH,EAAKM,KAAKC,KAAKqB,aAlG5B5B,EAAA,oCCjDO,SAAS6B,EAAM1B,EAAe2B,EAAaC,GACjD,OAAOlB,KAAKiB,IAAIjB,KAAKkB,IAAI5B,EAAO2B,GAAMC,GAQhC,SAASN,EAAgBO,GAAsD,IAAnCC,EAAmCN,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAErF,GAAsB,IAAlBK,EAAOb,OACV,OAAO,EAKR,IAFA,IAAIX,EAAU,EAEL0B,EAAY,EAAGA,EAAYF,EAAOb,OAAQe,IAAa,CAE/D,IAAIb,EAAIY,EAAWD,EAAOb,OAASe,EAAY,EAAIA,EAEnD1B,GAAWwB,EAAOX,GAAKR,KAAKsB,IAAI,EAAGd,GAAK,EAIzC,OAAOb,EASD,SAASgB,EAAgBhB,GAAuD,IAAtCyB,EAAsCN,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAEtF,GAAInB,EAAU,EACb,MAAM,IAAIQ,WAAW,mDAGtB,GAAIR,IAAYK,KAAKC,MAAMN,GAC1B,MAAM,IAAIQ,WAAW,sDAOtB,IAJA,IAAIgB,EAAoB,GAEpBI,EAAa5B,EAASa,EAAI,EAEvBe,EAAa,GAEnBJ,EAAOX,MAAKe,EAAa,GACzBA,EAAavB,KAAKC,MAAMsB,EAAa,GAErCf,IAQD,OAJIY,GACHD,EAAOK,UAGDL,EAnERM,EAAAC,EAAAC,EAAA,sBAAAX,IAAAS,EAAAC,EAAAC,EAAA,sBAAAf,IAAAa,EAAAC,EAAAC,EAAA,sBAAAhB,iSCUO,SAASiB,IACf,MAAO,CAAC1C,cAAYA,cAAYA,cAAYA,eActC,SAAS2C,EAAWC,GAE1BA,EAAQA,EAAMf,QAEd,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAGA,IACtBsB,EAAMtB,GAAKsB,EAAMtB,GAAGuB,QAGrB,OAAOD,EAOD,IAIME,EAAmB,iBAInBC,EAAsB,oBAItBC,EAAoB,kBAO1B,SAASC,EAAaC,EAAmBC,GAC/C,GAAID,EAAY,GAAKA,EAAY,EAChC,MAAM,IAAIjC,WAAW,iDAEtB,GAAIkC,EAAW,GAAKA,EAAW,EAC9B,MAAM,IAAIlC,WAAW,gDAEtB,OAAQ,EAAIiC,GAAc,EAAIC,GAOxB,SAASC,EAAcC,GAC7B,GAAIA,EAAa,IAAMA,EAAa,EACnC,MAAM,IAAIpC,WAAW,mDAEtB,MAAO,CACNiC,UAAWpC,KAAKC,MAAMsC,EAAa,GACnCF,SAAU,EAAKE,EAAa,GAQvB,IAAMC,EAAb,WA0BC,SAAAA,EAAYC,EAAoBC,GAAsF,IAA/DC,EAA+D7B,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAAjC8B,EAAiC9B,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAuBrH,GAvBqHvB,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,GAAA/C,KArB9GgD,QAqB8G,EAAAhD,KAhB9GiD,UAgB8G,EAAAjD,KAX9GoD,eAW8G,EAEnG,kBAAPJ,EACVhD,KAAKqD,QAAQL,EAAIE,GAGjBlD,KAAKgD,GAAKA,EAGNhD,KAAKiD,OACLA,EACiB,kBAATA,EACVjD,KAAKsD,aAAaL,GAGlBjD,KAAKuD,QAAQN,GAIdjD,KAAKuD,QAAQpB,MAIXgB,IAAmBnD,KAAKwD,kBAAiB,GAAO,CACnD,IAAI/C,EAAM,IAAIgD,MAAM,yBAEpB,MADAhD,EAAIE,KAAO8B,EACLhC,GApDT,OAAAX,OAAAO,EAAA,EAAAP,CAAAiD,EAAA,EAAAzC,IAAA,oBAAAT,MAAA,WA+DE,GAF2DwB,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,MAEtCrB,KAAKoD,UAAY,IAAtC,CAIA,IAFA,IAAIM,EAAeC,MAAY,GAEtB5C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAK3B,IAHA,IAAI6C,EAAU5D,KAAKgD,GAAGjC,GAAGuB,QACrBuB,EAAW7D,KAAKiD,KAAKlC,GAEhBA,EAAI,EAAGA,EAAI,EAAGA,IACjB8C,EAASC,IAAI/C,IACjB6C,EAAQE,IAAI/C,GAAG,GAIjB2C,EAAM3C,GAAK6C,EAIZ,OAAO,IAAIb,EAAGW,EAAOtB,EAAWpC,KAAKiD,UAlFvC,CAAA3C,IAAA,sBAAAT,MAAA,WA4FE,GAF6DwB,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,MAExCrB,KAAKoD,UAAY,IAAtC,CAIA,IAFA,IAAIM,EAAeC,MAAY,GAEtB5C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAK3B,IAHA,IAAIgD,EAAU/D,KAAKgD,GAAGjC,GAAGuB,QACrBuB,EAAW7D,KAAKiD,KAAKlC,GAEhBA,EAAI,EAAGA,EAAI,EAAGA,IACjB8C,EAASC,IAAI/C,IACjBgD,EAAQD,IAAI/C,GAAG,GAIjB2C,EAAM3C,GAAKgD,EAIZ,OAAO,IAAIhB,EAAGW,EAAOtB,EAAWpC,KAAKiD,UA/GvC,CAAA3C,IAAA,mBAAAT,MAAA,WAuHiE,IAAxCmE,EAAwC3C,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAC/D,OAAOrB,KAAKiE,QAAQjE,KAAKkE,kBAAkBF,MAxH7C,CAAA1D,IAAA,qBAAAT,MAAA,WA+HmE,IAAxCmE,EAAwC3C,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GACjE,OAAOrB,KAAKiE,QAAQjE,KAAKmE,oBAAoBH,MAhI/C,CAAA1D,IAAA,UAAAT,MAAA,SAuIgBuE,GAEd,IAAKA,EACJ,OAAO,EAGR,GAAIpE,OAASoE,EACZ,OAAO,EAER,GAAIpE,KAAKgD,KAAOoB,EAAMpB,KAAOhD,KAAKiD,OAASmB,EAAMnB,MAAQjD,KAAKoD,YAAcgB,EAAMhB,WACjF,OAAO,EAER,IAAK,IAAIrC,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIsD,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAKrE,KAAKgD,GAAGjC,GAAG+C,IAAIO,KAAOD,EAAMpB,GAAGjC,GAAG+C,IAAIO,IAAQrE,KAAKiD,KAAKlC,GAAG+C,IAAIO,KAAOD,EAAMnB,KAAKlC,GAAG+C,IAAIO,GAC5F,OAAO,EAKV,OAAO,IA3JT,CAAA/D,IAAA,gBAAAT,MAAA,WAqKE,GAF6DwB,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,KAEvCrB,KAAKwD,kBAAiB,GAAO,CAClD,IAAI/C,EAAM,IAAIgD,MAAM,yBAEpB,MADAhD,EAAIE,KAAO8B,EACLhC,EAGP,OAAuB,KAAnBT,KAAKoD,UACD,EACe,KAAnBpD,KAAKoD,UACD,EACA7C,KAAKsB,IAAI,EAAG,GAAK7B,KAAKoD,WAAa,IA/K7C,CAAA9C,IAAA,YAAAT,MAAA,WAuLuD,IAQjDyE,EACAC,EATYpB,EAAqC9B,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAErD,GAAI8B,IAAmBnD,KAAKwD,kBAAiB,GAAO,CACnD,IAAI/C,EAAM,IAAIgD,MAAM,yBAEpB,MADAhD,EAAIE,KAAO8B,EACLhC,EAMP,GAAI0C,EACHmB,EAAUlC,EAAWpC,KAAKgD,IAC1BuB,EAAYnC,EAAWpC,KAAKiD,UAExB,CACJ,IAAIuB,EAAMxE,KAAKkE,mBAAkB,GACjCI,EAAUE,EAAIxB,GACduB,EAAYC,EAAIvB,KAOjB,OAJIjD,KAAKoD,UAAY,IACpBkB,EAAQ,GAAGnE,WAAWmE,EAAQ,GAAGG,aAAe,GAG1C,IAAI1B,EAAGuB,EAASC,KAhNzB,CAAAjE,IAAA,WAAAT,MAAA,WAwNsD,IAQhDyE,EACAC,EAPJ,GAFoDlD,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,KAE7BrB,KAAKwD,kBAAiB,GAAO,CACnD,IAAI/C,EAAM,IAAIgD,MAAM,yBAEpB,MADAhD,EAAIE,KAAO8B,EACLhC,EAMP,IAAI+D,EAAMxE,KAAKmE,qBAAoB,GAQnC,OAPAG,EAAUE,EAAIxB,GACduB,EAAYC,EAAIvB,KAEZjD,KAAKoD,UAAY,IACpBkB,EAAQ,GAAGnE,WAAWmE,EAAQ,GAAGG,aAAe,GAG1C,IAAI1B,EAAGuB,EAASC,KA3OzB,CAAAjE,IAAA,YAAAT,MAAA,WAmP6D,IAA3CsD,EAA2C9B,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAE3D,GAAI8B,IAAmBnD,KAAKwD,kBAAiB,GAAO,CACnD,IAAI/C,EAAM,IAAIgD,MAAM,yBAEpB,MADAhD,EAAIE,KAAO8B,EACLhC,EAGP,IAMI6D,EANAI,EAAoB,MAAC1D,OAAWA,GAEpC,GAAuB,KAAnBhB,KAAKoD,UACR,OAAOsB,EAKJvB,EACHmB,EAAUlC,EAAWpC,KAAKgD,IAI1BsB,EADUtE,KAAKkE,mBAAkB,GACnBlB,GAGf0B,EAAQ,GAAK,IAAI3B,EAAGX,EAAWkC,GAAUtE,KAAKoD,UAAU,GAExD,IAAIuB,EAAuBvC,EAAWkC,GA1BqBM,EA2B/B/B,EAAc7C,KAAKoD,WAA1CT,EA3BsDiC,EA2BtDjC,UAAWC,EA3B2CgC,EA2B3ChC,SAKhB,OAJA+B,EAAchC,GAAWmB,IAAIlB,GAAU,GAEvC8B,EAAQ,GAAK,IAAI3B,EAAG4B,EAAe3E,KAAKoD,UAAU,GAE3CsB,IAnRT,CAAApE,IAAA,UAAAT,MAAA,SA2RgBoD,GAKd,IAHA,IAAI4B,EAAe,EACfC,GAAM,EAED/D,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIsD,EAAI,EAAGA,EAAI,EAAGA,IAEtB,GAAIpB,EAAKlC,GAAG+C,IAAI,EAAQO,GAAI,CAC3B,GAAIS,EAGC,CACJ,IAAIrE,EAAM,IAAIgD,MAAM,uBAEpB,MADAhD,EAAIE,KAxVsB,iBAyVpBF,EALNoE,SASDC,GAAM,EAKT9E,KAAKoD,UAAYyB,EACjB7E,KAAKiD,KAAOA,IApTd,CAAA3C,IAAA,eAAAT,MAAA,SA4TqBuD,GAEnB,GAAIA,EAAY,GAAKA,EAAY,GAAI,CACpC,IAAI3C,EAAM,IAAIC,WAAW,6CAEzB,MADAD,EAAIE,KAAO4B,EACL9B,EAKP,IAFA,IAAIsE,EAAiB5C,IAEZpB,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIsD,EAAI,EAAGA,EAAI,EAAGA,IAChB,EAAItD,EAAKsD,EAAKjB,EACnB2B,EAAQhE,GAAG+C,IAAI,EAAQO,GAAG,GAG1BU,EAAQhE,GAAG+C,IAAI,EAAQO,GAAG,GAK7BrE,KAAKoD,UAAYA,EACjBpD,KAAKiD,KAAO8B,IAlVd,CAAAzE,IAAA,QAAAT,MAAA,SA0VcmD,GACZhD,KAAKgD,GAAKA,IA3VZ,CAAA1C,IAAA,UAAAT,MAAA,WAkWE,OAAOG,KAAKiD,OAlWd,CAAA3C,IAAA,eAAAT,MAAA,WAyWE,OAAOG,KAAKoD,YAzWd,CAAA9C,IAAA,QAAAT,MAAA,WAgXE,OAAOG,KAAKgD,KAhXd,CAAA1C,IAAA,UAAAT,MAAA,SAwXgBmF,GAAoD,IAAnC9B,IAAmC7B,UAAAR,OAAA,QAAAG,IAAAK,UAAA,KAAAA,UAAA,GAElE2D,EAAUA,EAAQC,OAClB,IAGIC,EAHc,sCAGIC,KAAKH,GAE3B,GAAc,OAAVE,EAAgB,CACnB,IAAIE,EAAU,IAAI1F,IAAK2F,SAASH,EAAM,GAAI,KACtCI,EAAU,IAAI5F,IAAK2F,SAASH,EAAM,GAAI,KACtCK,EAAU,IAAI7F,IAAK2F,SAASH,EAAM,GAAI,KACtCM,EAAU,IAAI9F,IAAK2F,SAASH,EAAM,GAAI,KACtC9B,EAAYiC,SAASH,EAAM,GAAI,IAEnC,GAAI9B,EAAY,GAAKA,EAAY,GAAI,CACpC,IAAI3C,EAAM,IAAIC,WAAW,6CAEzB,MADAD,EAAIE,KAAO4B,EACL9B,EAGPT,KAAKyF,MAAM,CAACL,EAASE,EAASC,EAASC,IACvCxF,KAAKsD,aAAaF,OAEd,IAAKF,EAmBL,CACJ,IAAIzC,EAAM,IAAIgD,MAAM,kCAEpB,MADAhD,EAAIE,KAAO6B,EACL/B,EApBN,IAAIiF,EAtBW,+BAsBOP,KAAKH,GAE3B,GAAgB,OAAZU,EAQC,CACJ,IAAIjF,EAAM,IAAIgD,MAAM,kCAEpB,MADAhD,EAAIE,KAAO6B,EACL/B,EAVN,IAAI2E,EAAU,IAAI1F,IAAK2F,SAASK,EAAQ,GAAI,KACxCJ,EAAU,IAAI5F,IAAK2F,SAASK,EAAQ,GAAI,KACxCH,EAAU,IAAI7F,IAAK2F,SAASK,EAAQ,GAAI,KACxCF,EAAU,IAAI9F,IAAK2F,SAASK,EAAQ,GAAI,KAE5C1F,KAAKyF,MAAM,CAACL,EAASE,EAASC,EAASC,OA1Z3C,CAAAlF,IAAA,WAAAT,MAAA,WAgb6C,IAAnC8F,EAAmCtE,UAAAR,OAAA,QAAAG,IAAAK,UAAA,IAAAA,UAAA,GAE3C,OACCrB,KAAKgD,GAAG,GAAGyB,aAAe,IAC1BzE,KAAKgD,GAAG,GAAGyB,aAAe,IAC1BzE,KAAKgD,GAAG,GAAGyB,aAAe,IAC1BzE,KAAKgD,GAAG,GAAGyB,cAAgBkB,EAAU,GAAK3F,KAAK4F,qBAtblD,CAAAtF,IAAA,aAAAT,MAAA,WA8bE,OACCG,KAAKiD,KAAK,GAAGwB,aAAe,IAC5BzE,KAAKiD,KAAK,GAAGwB,aAAe,IAC5BzE,KAAKiD,KAAK,GAAGwB,aAAe,IAC5BzE,KAAKiD,KAAK,GAAGwB,eAlchB,CAAAnE,IAAA,kBAAAT,MAAA,WAscE,MAAO,IAAMG,KAAK6F,mBAtcpB9C,EAAA,oIC1EO,SAAS+C,EAAgBC,EAAaC,GAE5C,IAAIC,EAAMC,SAASC,cAAc,YAEjCF,EAAIG,MAAMC,SAAW,QACrBJ,EAAIG,MAAME,IAAM,IAChBL,EAAIG,MAAMG,KAAO,IACjBN,EAAIG,MAAMI,QAAU,IACpBP,EAAIpG,MAAQkG,EAEZG,SAASO,KAAKC,YAAYT,GAC1BA,EAAIU,QACJV,EAAIW,SAEJ,IAAIC,EAAUX,SAASY,YAAY,QACnCZ,SAASO,KAAKM,YAAYd,GAEtBD,GACHA,EAAKa,GC/BA,IAAMG,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAM9D,SAASC,EAAclB,GAC7B,OAAiC,IAA1BiB,EAAQE,QAAQnB,+BCSlBoB,SAAiB,CAAC,YAAa,SAAU,MAAO,YAAa,aAAc,OAAQ,MAAO,WAI1FC,cA4UL,SAAAA,EAAYC,GAAY,IAAAC,EAAAxH,OAAAyH,EAAA,EAAAzH,CAAAE,KAAAoH,IAEvBE,EAAAxH,OAAA0H,EAAA,EAAA1H,CAAAE,KAAAF,OAAA2H,EAAA,EAAA3H,CAAAsH,GAAAM,KAAA1H,KAAMqH,KAzUCtE,GAAsC,GAuUtBuE,EAnUhBK,KAAwC,GAmUxBL,EA9ThBM,aAA4C,GA8T5BN,EAzThBO,WAA4C,GAyT5BP,EApThBQ,oBAoTgB,EAAAR,EA/ShBS,sBA+SgB,EAAAT,EA1ShBU,oBA0SgB,EAAAV,EArShBW,kBAqSgB,EAAAX,EAhShBY,kBAgSgB,EAAAZ,EA3RhBa,gBA2RgB,EAAAb,EApNhBc,eAAiB,SAACpF,GAEzBA,EAAKA,GAASsE,EAAKe,mBAEnB,IAAK,IAAItH,EAAI,EAAGA,EAAI,EAAGA,IACtBuG,EAAKO,WAAW9G,GAAGuH,QAAQzI,MAAQ,GAAKmD,EAAGuF,QAAQxH,GAAG0D,aACtD6C,EAAKM,aAAa7G,GAAGuH,QAAQE,YAAc,GAAKxF,EAAGyF,UAAU1H,GAAG0D,aAGjE6C,EAAKoB,cAAc1F,EAAG2F,UAAS,IAC/BrB,EAAKsB,gBAAgB5F,EAAG4C,oBA0MD0B,EAlMhBuB,cAAgB,SAACzH,GAAwB,IAAAwD,EAElB/B,YAAczB,GAAtCwB,EAF0CgC,EAE1ChC,SAAUD,EAFgCiC,EAEhCjC,UAEhBvB,GAASkG,EAAKK,KAAKhF,GAAWC,GAAU0F,QAAQQ,QAAU,EAAI,EAE9D,IAAK,IAAIhG,EAAa,EAAGA,EAAa,GAAIA,IAAc,KAAAiG,EAEzBlG,YAAcC,GAAtCF,EAFiDmG,EAEjDnG,SAAUD,EAFuCoG,EAEvCpG,UACZqG,EAAKlG,EAAa1B,EAEtBkG,EAAKK,KAAKhF,GAAWC,GAAU0F,QAAQQ,QAAUE,EACjD1B,EAAKvE,GAAGJ,GAAWC,GAAU0F,QAAQW,SAAWD,EAIjD1B,EAAKc,kBAkLkBd,EA3KhB4B,kBAAoB,WAE3B,IAAIC,EAAarJ,OAAAsJ,EAAA,EAAAtJ,CAAAwH,GAEjBxB,EAAgBwB,EAAKe,mBAAmBM,UAAS,GAAO,SAAU9B,GAEjE,IAAIwC,EAAOF,EAAMhB,WAAWG,QAC5Be,EAAKjD,MAAMkD,WAAa,GACxBD,EAAKjD,MAAMI,QAAU,IACrB+C,WAAW,WACVF,EAAKjD,MAAMkD,WAAa,aACxBD,EAAKjD,MAAMI,QAAU,KACnB,QA+JmBc,EAtJhBkC,oBAAsB,WAE7B,IAAIL,EAAarJ,OAAAsJ,EAAA,EAAAtJ,CAAAwH,GAEjBxB,EAAgBwB,EAAKe,mBAAmBoB,aAAc,SAAU5C,GAE/D,IAAIwC,EAAOF,EAAMjB,aAAaI,QAC9Be,EAAKjD,MAAMkD,WAAa,GACxBD,EAAKjD,MAAMI,QAAU,IACrB+C,WAAW,WACVF,EAAKjD,MAAMkD,WAAa,aACxBD,EAAKjD,MAAMI,QAAU,KACnB,QA0ImBc,EAjIxBoC,kBAAoB,WACnBpC,EAAKc,kBAgIkBd,EA1HxBqC,oBAAsB,SAAChH,EAAmBC,GACzC0E,EAAKuB,cAAcnG,YAAaC,EAAWC,KAyHpB0E,EAnHhBsC,cAmHgB,EAAAtC,EA9GhBuC,mBAAqB,SAACC,EAA2BnH,GAExDmH,EAAQlD,SAER,IAAImD,EAAkBzC,EAAKe,mBAC3Bf,EAAKsC,SAAWG,EAAgBxB,QAAQ5F,IAyGjB2E,EAlGhB0C,kBAAoB,SAACrH,GAC5B2E,EAAK2C,aAAa3C,EAAKsC,SAAUjH,GAAW,IAiGrB2E,EA3FhB4C,qBAAuB,SAACC,EAA4CL,GAM3E,GAJgB,UAAZK,EAAI7J,KACPwJ,EAAQM,QAGgC,IAArCjD,EAAeD,QAAQiD,EAAI7J,MAAgB2G,EAAckD,EAAI7J,KAAjE,CAKA,IAAI+J,EAAeC,OAAOC,eAAeC,aAAeV,EAAQW,WAAaH,OAAOC,eAAe5B,WAAa,IAEvE,IAArCxB,EAAeD,QAAQiD,EAAI7J,MAAewJ,EAAQjK,MAAMgB,QAAU,GAAsB,KAAjBwJ,GAAsBF,EAAIO,sBANpGP,EAAIO,kBAoFkBpD,EAvEhBqD,mBAAqB,SAACR,EAA4CL,EAA2BnH,GAEpG,IAAIiI,EAAOjI,EAAY,EAAI2E,EAAKO,WAAWlF,EAAY,GAAG2F,aAAUtH,EAEhEqJ,EAAeC,OAAOC,eAAeC,aAAeV,EAAQW,WAAaH,OAAOC,eAAe5B,WAAa,IAEvE,IAArCxB,EAAeD,QAAQiD,EAAI7J,MAAewJ,EAAQjK,MAAMgB,QAAU,GAAsB,KAAjBwJ,GAEtEO,GACHA,EAAKjE,SA8DgBW,EApDhBuD,oBAAsB,SAACV,EAAoCL,EAA2BnH,GAE7F,GAAsB,KAAlBmH,EAAQjK,MAAc,CAOzB,IALA,IAAImF,EAAUsC,EAAKe,mBAEfzE,EAAUoB,EAAQuD,QAAQ5F,GAC1BM,EAAO+B,EAAQyD,UAAU9F,GAEpB5B,EAAI,EAAGA,EAAI,EAAGA,IACjBkC,EAAKa,IAAI/C,IACb6C,EAAQE,IAAI/C,GAAG,GAIjBuG,EAAKsC,SAAWhG,OAKhB,GDlTI,SAAyBmC,GAC/B,IAAK,IAAIhF,EAAI,EAAGA,EAAIgF,EAAIlF,OAAQE,IAC/B,IAAKkG,EAAclB,EAAI+E,OAAO/J,IAC7B,OAAO,EAET,OAAO,EC6SDgK,CAAgBjB,EAAQjK,OAAO,CAQlC,IANA,IAAImF,EAAUsC,EAAKe,mBAEfzE,EAAUoB,EAAQuD,QAAQ5F,GAC1BoB,EAAUH,EAAQtB,QAClBW,EAAO+B,EAAQyD,UAAU9F,GAEpB5B,EAAI,EAAGA,EAAI,EAAGA,IACjBkC,EAAKa,IAAI/C,KACb6C,EAAQE,IAAI/C,GAAG,GACfgD,EAAQD,IAAI/C,GAAG,IAIjB,IAAIlB,EAAQ,IAAIH,IACf6B,YACC8D,SAASyE,EAAQjK,MAAO,IACxB+D,EAAQa,aACRV,EAAQU,eAIV6C,EAAKsC,SAAW/J,EAChByH,EAAK2C,aAAapK,EAAO8C,GAAW,KAYtC,IAAK,IAAI5B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE3BuG,EAAKM,aAAa7G,GAAKiK,IAAMC,YAC7B3D,EAAKO,WAAW9G,GAAKiK,IAAMC,YAC3B3D,EAAKK,KAAK5G,GAAK,GACfuG,EAAKvE,GAAGhC,GAAK,GAEb,IAAK,IAAIsD,EAAI,EAAGA,EAAI,EAAGA,IACtBiD,EAAKK,KAAK5G,GAAGsD,GAAK2G,IAAMC,YACxB3D,EAAKvE,GAAGhC,GAAGsD,GAAK2G,IAAMC,YAbD,OAkBvB3D,EAAKS,iBAAmBiD,IAAMC,YAC9B3D,EAAKQ,eAAiBkD,IAAMC,YAE5B3D,EAAKU,eAAiBgD,IAAMC,YAC5B3D,EAAKW,aAAe+C,IAAMC,YAC1B3D,EAAKY,aAAe8C,IAAMC,YAC1B3D,EAAKa,WAAa6C,IAAMC,YAxBD3D,kFAjRvB,IAHA,IAAIhD,EAAUnC,cACVoC,EAAYpC,cAEPpB,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIsD,EAAI,EAAGA,EAAI,EAAGA,IACtBC,EAAQvD,GAAG+C,IAAIO,IAAIrE,KAAK+C,GAAGhC,GAAGsD,GAAIiE,QAAQQ,SAC1CvE,EAAUxD,GAAG+C,IAAIO,IAAIrE,KAAK2H,KAAK5G,GAAGsD,GAAIiE,QAAQQ,SAIhD,OAAO,IAAI/F,IAAGuB,EAAQC,wCAWF2G,EAAY9J,GAIhC,IAJ6G,IAA9D+J,IAA8D9J,UAAAR,OAAA,QAAAG,IAAAK,UAAA,KAAAA,UAAA,GAAnC+J,IAAmC/J,UAAAR,OAAA,QAAAG,IAAAK,UAAA,KAAAA,UAAA,GAEzGgK,EAAMrL,KAAK+C,GAAG3B,GAETL,EAAI,EAAGA,EAAI,EAAGA,IAEtBsK,EAAItK,GAAGuH,QAAQQ,QAAUoC,EAAKpH,IAAI/C,GAI/BoK,EACHnL,KAAKoI,iBAEGgD,GACRpL,KAAK0I,sDASe3C,GAErB/F,KAAK8H,eAAeQ,QAAQE,YAAczC,GAAY/F,KAAKqI,mBAAmBM,UAAS,2CAQhE5C,GAEvB/F,KAAK+H,iBAAiBO,QAAQE,YAAczC,GAAY/F,KAAKqI,mBAAmBzC,+EAyPhF5F,KAAKoI,iBACLpI,KAAK0I,iDAQL,IALQ,IAAA4C,EAAAtL,KAEJuL,EAAU,GACVC,EAAQ,GAHJC,EAAA,SAKC1K,GAIR,IAFA,IAAI2K,EAAS,GAPNC,EAAA,SASEtH,GACR,IAAIuH,EAAK,aAAa7K,EAAE,IAAIsD,EAC5BqH,EAAOG,KACNC,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,MAAM1L,IAAKsL,EAAG,QAC5BE,EAAAC,EAAA5F,cAAA,SAAO8F,UAAW,EAAGL,GAAIA,EAAIM,IAAKZ,EAAK3D,KAAK5G,GAAGsD,GAAI8H,KAAK,WAAWC,SAAU,WAAKd,EAAK3B,oBAAoB5I,EAAEsD,MAC7GyH,EAAAC,EAAA5F,cAAA,SAAOkG,QAAST,OALVvH,EAAI,EAAGA,GAAK,EAAGA,IAAKsH,EAApBtH,GAUTkH,EAAQM,KACPC,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,QAAQ1L,IAAK,cAAcS,GACzC+K,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,eAAeE,IAAKZ,EAAK1D,aAAa7G,IAArD,KACA+K,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,WAAf,IAA4BN,EAA5B,OAGE3K,EAAI,GAAGwK,EAAQM,KAAKC,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,MAAM1L,IAAK,YAAYS,MApBtDA,EAAI,EAAGA,EAAI,EAAGA,IAAK0K,EAAnB1K,GALD,IAAAuL,EAAA,SA6BCvL,GAIR,IAFA,IAAI2K,EAAS,GAEJrH,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC5B,IAAIuH,EAAK,WAAW7K,EAAE,IAAIsD,EAC1BqH,EAAOG,KACNC,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,MAAM1L,IAAKsL,EAAG,QAC5BE,EAAAC,EAAA5F,cAAA,SAAO8F,UAAW,EAAGL,GAAIA,EAAIM,IAAKZ,EAAKvI,GAAGhC,GAAGsD,GAAI8H,KAAK,WAAWC,SAAUd,EAAK5B,oBAChFoC,EAAAC,EAAA5F,cAAA,SAAOkG,QAAST,MAKnB,IAAIW,EAAYT,EAAAC,EAAA5F,cAAA,SACXgG,KAAK,OACLH,UAAU,UACVE,IAAKZ,EAAKzD,WAAW9G,GACrBqL,SAAU,SAACjC,GAASmB,EAAKT,oBAAoBV,EAAKmB,EAAKzD,WAAW9G,GAAGuH,QAASvH,IAC9EyL,QAAS,WAAOlB,EAAKzB,mBAAmByB,EAAKzD,WAAW9G,GAAGuH,QAASvH,IACpE0L,OAAQ,WAAOnB,EAAKtB,kBAAkBjJ,IACtC2L,UAAW,SAACvC,GAAgDmB,EAAKpB,qBAAqBC,EAAKmB,EAAKzD,WAAW9G,GAAGuH,UAC9GqE,QAAS,SAACxC,GAAgDmB,EAAKX,mBAAmBR,EAAKmB,EAAKzD,WAAW9G,GAAGuH,QAASvH,MAGxHyK,EAAMK,KACLC,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,QAAQ1L,IAAK,YAAYS,GACrCwL,EACFT,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,WAAf,IAA4BN,EAA5B,OAGE3K,EAAI,GAAGyK,EAAMK,KAAKC,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,MAAM1L,IAAK,UAAUS,MA/B3D,IAASA,EAAI,EAAGA,EAAI,EAAGA,IAAKuL,EAAnBvL,GAmCT,OACC+K,EAAAC,EAAA5F,cAAA,YACC2F,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,UACdF,EAAAC,EAAA5F,cAAA,wBAAY2F,EAAAC,EAAA5F,cAAA,KAAG6F,UAAU,6BAA6BE,IAAKlM,KAAKgI,eAAgB4E,QAAS5M,KAAKwJ,sBAA9F,IAAwHsC,EAAAC,EAAA5F,cAAA,QAAM6F,UAAU,YAAYE,IAAKlM,KAAKkI,cAAtC,uBACxH4D,EAAAC,EAAA5F,cAAA,MAAI6F,UAAU,wBAAwBE,IAAKlM,KAAK+H,kBAAhD,OAGD+D,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,OAAf,IAAuBT,EAAvB,KAEAO,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,UACdF,EAAAC,EAAA5F,cAAA,gBAAO2F,EAAAC,EAAA5F,cAAA,KAAG6F,UAAU,6BAA6BE,IAAKlM,KAAKiI,aAAc2E,QAAS5M,KAAKkJ,oBAAvF,IAA+G4C,EAAAC,EAAA5F,cAAA,QAAM6F,UAAU,YAAYE,IAAKlM,KAAKmI,YAAtC,eAC/G2D,EAAAC,EAAA5F,cAAA,MAAI6F,UAAU,wBAAwBE,IAAKlM,KAAK8H,gBAAhD,YAGDgE,EAAAC,EAAA5F,cAAA,OAAK6F,UAAU,OAAf,IAAuBR,EAAvB,aA3biBqB,aAmcNzF","file":"static/js/7.a16b335c.chunk.js","sourcesContent":["import { decimalToBinary, binaryToDecimal } from \"../utils/math\";\r\n\r\n/**\r\n * An array of 8 bits (boolean values).\r\n */\r\nexport type Bit8 = [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];\r\n\r\n/**\r\n * Returns a Bit8 filled with false.\r\n */\r\nexport function Bit8Zero(): Bit8 {\r\n\treturn [false, false, false, false, false, false, false, false];\r\n}\r\n\r\n/**\r\n * Returns a Bit8 filled with true.\r\n */\r\nexport function Bit8Max(): Bit8 {\r\n\treturn [true, true, true, true, true, true, true, true];\r\n}\r\n\r\n/**\r\n * Returns a Byte corresponding to the number 0.\r\n */\r\nexport function ByteZero(): Byte {\r\n\treturn new Byte(Bit8Zero());\r\n}\r\n\r\n/**\r\n * Returns a Byte corresponding to the number 255.\r\n */\r\nexport function ByteMax(): Byte {\r\n\treturn new Byte(Bit8Max());\r\n}\r\n\r\nexport function booleanArrayToBit8 (arr: boolean[]): Bit8 {\r\n\tif (arr.length > 8) {\r\n\t\tthrow new RangeError(\"The boolean array must have a length of 8 or less\");\r\n\t}\r\n\tlet bit8: Bit8 = Bit8Zero();\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t\tbit8[i] = arr[i] !== undefined ? arr[i] : false;\r\n\t}\r\n\treturn bit8;\r\n}\r\n\r\n/**\r\n * Error name for a byte outside the correct range.\r\n */\r\nexport const ERROR_BYTE_RANGE = \"ByteRangeError\";\r\n\r\n/**\r\n * A Byte, composed of 8 bits (boolean values).\r\n * @author Henrique Colini\r\n */\r\nexport class Byte {\r\n\r\n\t/**\r\n\t * This Byte's Bit8 representation.\r\n\t */\t\r\n\tprivate bits: Bit8;\r\n\r\n\t/**\r\n\t * This Byte's numerical representation.\r\n\t */\r\n\tprivate decimal: number;\r\n\t\r\n\t/**\r\n\t * Constructs a Byte from a number (0-255) or a Bit8.\r\n\t * @constructor\r\n\t * @param  {number|Bit8} value The value of this Byte.\r\n\t */\r\n\r\n\tconstructor(value: number | Bit8) {\r\n\r\n\t\tif (typeof value === \"number\") {\r\n\t\t\tthis.setDecimal(value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setBits(value);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value of this Byte, using a number (0-255).\r\n\t * @param  {number} decimal\r\n\t */\r\n\r\n\tsetDecimal(decimal: number): void {\r\n\r\n\t\tif (decimal < 0 || decimal > 255 || decimal !== Math.floor(decimal)) {\r\n\t\t\tlet err = new RangeError(\"The decimal value of a byte must be an integer between 0-255 (inclusive)\");\r\n\t\t\terr.name = ERROR_BYTE_RANGE;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tthis.bits = booleanArrayToBit8(decimalToBinary(decimal));\r\n\t\tthis.decimal = decimal;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value of this Byte, using a Bit8.\r\n\t * @param  {Bit8} bits\r\n\t */\r\n\r\n\tsetBits(bits: Bit8): void {\r\n\r\n\t\tthis.bits = bits;\r\n\t\tthis.decimal = binaryToDecimal(bits);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this Byte's numeric value.\r\n\t */\r\n\r\n\tgetDecimal(): number {\r\n\t\treturn this.decimal;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this Byte's Bit8 representation.\r\n\t */\r\n\r\n\tgetBits(): Bit8 {\r\n\t\treturn this.bits;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter/Setter of a single bit from this Byte.\r\n\t * @param  {number} index The index of the bit.\r\n\t * @param  {boolean|undefined=undefined} value Optional. Sets the value for this bit.\r\n\t */\r\n\r\n\tbit(index: number, value: boolean | undefined = undefined): boolean {\r\n\r\n\t\tif (value !== undefined) {\r\n\t\t\tlet bits = this.bits;\r\n\t\t\tbits[index] = value;\r\n\t\t\tthis.setBits(bits);\r\n\t\t}\r\n\r\n\t\treturn this.bits[index];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones this Byte.\r\n\t */\r\n\tclone(): Byte {\r\n\r\n\t\treturn new Byte(this.bits.slice() as Bit8)\r\n\r\n\t}\r\n\r\n}","/**\r\n * Returns a value, clamped between max and min.\r\n * @param  {number} value The number to be clamped.\r\n * @param  {number} min The minimum possible number.\r\n * @param  {number} max The maximum possible number.\r\n */\r\nexport function clamp(value: number, min: number, max: number): number {\r\n\treturn Math.min(Math.max(value, min), max);\r\n};\r\n\r\n/**\r\n * Converts a binary number (as a string, boolean array, or number array) to a decimal number.\r\n * @param  {boolean[]} binary The number to be converted. An array of booleans, read from left to right (e.g. 001 equals 4).\r\n * @param  {boolean} reversed Optional. Whether the input should be reversed (read from right to left). Defaults to false.\r\n */\r\nexport function binaryToDecimal(binary: boolean[], reversed: boolean = false): number {\r\n\r\n\tif (binary.length === 0) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tlet decimal = 0;\r\n\r\n\tfor (let realIndex = 0; realIndex < binary.length; realIndex++) {\r\n\r\n\t\tlet i = reversed ? binary.length - realIndex - 1 : realIndex;\r\n\r\n\t\tdecimal += binary[i] ? Math.pow(2, i) : 0;\r\n\t\t\r\n\t}\r\n\r\n\treturn decimal;\r\n\t\r\n}\r\n\r\n/**\r\n * Converts a decimal number (must be a positive integer) to an array of booleans (read from left to right, such that 001 equals 4).\r\n * @param  {number} decimal The number to be converted. Must be a positive integer.\r\n * @param  {boolean} reversed Optional. Whether the output should be reversed (read from right to left). Defaults to false.\r\n */\r\nexport function decimalToBinary(decimal: number, reversed: boolean = false): boolean[] {\r\n\r\n\tif (decimal < 0) {\r\n\t\tthrow new RangeError(\"Attempting to convert negative number to binary\");\r\n\t}\r\n\r\n\tif (decimal !== Math.floor(decimal)) {\r\n\t\tthrow new RangeError(\"Attempting to convert non-integer number to binary\");\r\n\t}\r\n\r\n\tlet binary: boolean[] = [];\r\n\r\n\tlet tmpDecimal = decimal, i = 0;\r\n\r\n\twhile (tmpDecimal > 0) {\r\n\r\n\t\tbinary[i] = tmpDecimal % 2 ? true : false;\r\n\t\ttmpDecimal = Math.floor(tmpDecimal / 2);\r\n\r\n\t\ti++;\r\n\r\n\t}\r\n\r\n\tif (reversed) {\r\n\t\tbinary.reverse();\r\n\t}\r\n\r\n\treturn binary;\r\n\r\n}","import { Byte, ByteZero, ByteMax } from \"../../byte\";\r\n\r\n/**\r\n * An array of 4 Bytes.\r\n */\r\nexport type Byte4 = [Byte,Byte,Byte,Byte];\r\n\r\n/**\r\n * Returns a Byte4 corresponding to 0, 0, 0, 0.\r\n */\r\nexport function Byte4Zero(): Byte4 {\r\n\treturn [ByteZero(), ByteZero(), ByteZero(), ByteZero()];\r\n}\r\n\r\n/**\r\n * Returns a Byte4 corresponding to 255, 255, 255, 255.\r\n */\r\nexport function Byte4Max(): Byte4 {\r\n\treturn [ByteMax(), ByteMax(), ByteMax(), ByteMax()];\r\n}\r\n\r\n/**\r\n * Clones a Byte4.\r\n * @param  {Byte4} byte4 The Byte4 to be cloned.\r\n */\r\nexport function cloneByte4(byte4: Byte4): Byte4 {\r\n\r\n\tbyte4 = byte4.slice() as Byte4;\r\n\r\n\tfor (let i = 0; i < 4; i++) {\r\n\t\tbyte4[i] = byte4[i].clone();\t\t\r\n\t}\r\n\r\n\treturn byte4;\r\n\r\n}\r\n\r\n/**\r\n * Error name for a mask with holes.\r\n */\r\nexport const ERROR_MASK_HOLES = \"MaskHolesError\";\r\n/**\r\n * Error name for a mask outside the correct range.\r\n */\r\nexport const ERROR_MASK_RANGE = \"MaskRangeError\";\r\n/**\r\n * Error name for a malformated address string.\r\n */\r\nexport const ERROR_ADDRESS_PARSE = \"AddressParseError\";\r\n/**\r\n * Error name for a when an IP Address should be a network address, but isn't.\r\n */\r\nexport const ERROR_NOT_NETWORK = \"NotNetworkError\";\r\n\r\n/**\r\n * Converts a bit in Byte index to a bit in Byte4 index.\r\n * @param  {number} byteIndex The index of the Byte in a Byte4.\r\n * @param  {number} bitIndex The index of the bit in the Byte.\r\n */\r\nexport function joinBitIndex(byteIndex: number, bitIndex: number): number {\r\n\tif (byteIndex > 3 || byteIndex < 0) {\r\n\t\tthrow new RangeError(\"The byteIndex must be between 0-3 (inclusive)\");\r\n\t}\r\n\tif (bitIndex > 7 || bitIndex < 0) {\r\n\t\tthrow new RangeError(\"The bitIndex must be between 0-7 (inclusive)\");\r\n\t}\r\n\treturn (8 * byteIndex) + (7 - bitIndex);\r\n}\r\n\r\n/**\r\n * Converts a bit in Byte4 index to a bit in Byte index.\r\n * @param  {number} byte4Index The index of the bit in a Byte4.\r\n */\r\nexport function splitBitIndex(byte4Index: number): { byteIndex: number, bitIndex: number } {\r\n\tif (byte4Index > 31 || byte4Index < 0) {\r\n\t\tthrow new RangeError(\"The byte4Index must be between 0-31 (inclusive)\");\r\n\t}\r\n\treturn {\r\n\t\tbyteIndex: Math.floor(byte4Index / 8),\r\n\t\tbitIndex: 7 - (byte4Index % 8)\r\n\t};\r\n}\r\n\r\n/**\r\n * A full IP/Mask address.\r\n * @author Henrique Colini\r\n */\r\nexport class IP {\r\n\t\r\n\t/**\r\n\t * This IP address's IP octets.\r\n\t */\r\n\tprivate ip: Byte4;\r\n\r\n\t/**\r\n\t * This IP address' mask.\r\n\t */\r\n\tprivate mask: Byte4;\r\n\r\n\t/**\r\n\t * The numerical representation of this IP address' mask.\r\n\t */\r\n\tprivate maskShort: number;\r\n\r\n\t\r\n\t/**\r\n\t * Constructs an IP address, given an IP and a mask.\r\n\t * @constructor\r\n\t * @param  {Byte4|string} ip The IP of this address. May be a Byte4 or a formatted string.\r\n\t * @param  {Byte4|number} mask Optional. The mask of this address. May be a Byte4 or its numerical representation. If not given, defaults to /0.\r\n\t * @param  {boolean} requireMask Optional. If set to true, the mask becomes a required parameter in the formatted string.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tconstructor(ip: Byte4 | string, mask?: Byte4 | number, requireMask: boolean = false, requireNetwork: boolean = false) {\r\n\r\n\t\tif (typeof ip === \"string\") {\r\n\t\t\tthis.parseIP(ip, requireMask);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.ip = ip;\r\n\t\t}\r\n\r\n\t\tif (!this.mask) {\r\n\t\t\tif (mask) {\r\n\t\t\t\tif (typeof mask === \"number\") {\r\n\t\t\t\t\tthis.setMaskShort(mask);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setMask(mask);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setMask(Byte4Zero());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a Network Address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the network address of this IP Address.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns undefined if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic getNetworkAddress(allowAbove30: boolean = false): IP {\r\n\r\n\t\tif (!allowAbove30 && this.maskShort > 30) return undefined;\r\n\r\n\t\tlet bytes: Byte4 = Array<Byte>(4) as Byte4;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\r\n\t\t\tlet minByte = this.ip[i].clone();\r\n\t\t\tlet maskByte = this.mask[i];\r\n\r\n\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\tif (!maskByte.bit(i)) {\r\n\t\t\t\t\tminByte.bit(i, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbytes[i] = minByte;\r\n\r\n\t\t}\r\n\r\n\t\treturn new IP(bytes, cloneByte4(this.mask));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the broadcast address of this IP Address' network.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns undefined if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic getBroadcastAddress(allowAbove30: boolean = false): IP {\r\n\r\n\t\tif (!allowAbove30 && this.maskShort > 30) return undefined;\r\n\r\n\t\tlet bytes: Byte4 = Array<Byte>(4) as Byte4;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\r\n\t\t\tlet maxByte = this.ip[i].clone();\r\n\t\t\tlet maskByte = this.mask[i];\r\n\r\n\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\tif (!maskByte.bit(i)) {\r\n\t\t\t\t\tmaxByte.bit(i, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbytes[i] = maxByte;\r\n\r\n\t\t}\r\n\r\n\t\treturn new IP(bytes, cloneByte4(this.mask));\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether this IP Address is a network address.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns false if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic isNetworkAddress(allowAbove30: boolean = false): boolean {\r\n\t\treturn this.compare(this.getNetworkAddress(allowAbove30));\r\n\t};\r\n\r\n\t/**\r\n\t * Returns whether this IP Address is a broadcast address.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns false if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic isBroadcastAddress(allowAbove30: boolean = false): boolean {\r\n\t\treturn this.compare(this.getBroadcastAddress(allowAbove30));\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns true if this IP Address is the same as another.\r\n\t * @param {IP} other the IP Address to be compared with.\r\n\t */\r\n\tpublic compare(other: IP): boolean {\r\n\r\n\t\tif (!other) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this === other)\r\n\t\t\treturn true;\r\n\r\n\t\tif (this.ip === other.ip && (this.mask === other.mask || this.maskShort === other.maskShort))\r\n\t\t\treturn true;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tif ((this.ip[i].bit(j) !== other.ip[i].bit(j)) || (this.mask[i].bit(j) !== other.mask[i].bit(j))) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the amount of hosts that this IP Address' network has.\r\n\t * @param {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic numberOfHosts(requireNetwork: boolean = false): number {\r\n\r\n\t\tif(requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a network address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tif (this.maskShort === 31)\r\n\t\t\treturn 2;\r\n\t\tif (this.maskShort === 32)\r\n\t\t\treturn 1;\r\n\t\treturn (Math.pow(2, 32 - this.maskShort) - 2);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the first valid host IP Address of this network.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic firstHost(requireNetwork: boolean = false): IP {\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a network address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet ipBytes: Byte4;\r\n\t\tlet maskBytes: Byte4;\r\n\r\n\t\tif (requireNetwork) {\r\n\t\t\tipBytes = cloneByte4(this.ip);\r\n\t\t\tmaskBytes = cloneByte4(this.mask);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet net = this.getNetworkAddress(true);\r\n\t\t\tipBytes = net.ip;\r\n\t\t\tmaskBytes = net.mask;\r\n\t\t}\r\n\r\n\t\tif (this.maskShort < 31) {\r\n\t\t\tipBytes[3].setDecimal(ipBytes[3].getDecimal() + 1);\r\n\t\t}\r\n\r\n\t\treturn new IP(ipBytes, maskBytes);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the last valid host IP Address of this network.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic lastHost(requireNetwork: boolean = false): IP {\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a Network Address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet ipBytes: Byte4;\r\n\t\tlet maskBytes: Byte4;\r\n\r\n\t\tlet net = this.getBroadcastAddress(true);\r\n\t\tipBytes = net.ip;\r\n\t\tmaskBytes = net.mask;\r\n\r\n\t\tif (this.maskShort < 31) {\r\n\t\t\tipBytes[3].setDecimal(ipBytes[3].getDecimal() - 1);\r\n\t\t}\r\n\r\n\t\treturn new IP(ipBytes, maskBytes);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this IP Address into two subnets.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic subdivide(requireNetwork: boolean = false): [IP, IP] {\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a Network Address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet subnets: [IP, IP] = [undefined, undefined];\r\n\r\n\t\tif (this.maskShort === 32) {\r\n\t\t\treturn subnets;\r\n\t\t}\r\n\r\n\t\tlet ipBytes: Byte4;\r\n\r\n\t\tif (requireNetwork) {\r\n\t\t\tipBytes = cloneByte4(this.ip);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet net = this.getNetworkAddress(true);\r\n\t\t\tipBytes = net.ip;\r\n\t\t}\r\n\r\n\t\tsubnets[0] = new IP(cloneByte4(ipBytes), this.maskShort+1);\r\n\t\t\r\n\t\tlet secondIpBytes: Byte4 = cloneByte4(ipBytes);\r\n\t\tlet {byteIndex, bitIndex} = splitBitIndex(this.maskShort);\r\n\t\tsecondIpBytes[byteIndex].bit(bitIndex, true);\r\n\r\n\t\tsubnets[1] = new IP(secondIpBytes, this.maskShort+1);\r\n\r\n\t\treturn subnets;\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets this IP Address' mask.\r\n\t * @param  {Byte4} mask The Byte4 mask to be set.\r\n\t */\r\n\tpublic setMask(mask: Byte4): void {\r\n\r\n\t\tlet maskShortTmp = 0;\r\n\t\tlet end = false;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\r\n\t\t\t\tif (mask[i].bit(8 - 1 - j)) {\r\n\t\t\t\t\tif(!end) {\r\n\t\t\t\t\t\tmaskShortTmp++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet err = new Error(\"Mask contains holes\");\r\n\t\t\t\t\t\terr.name = ERROR_MASK_HOLES;\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tend = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.maskShort = maskShortTmp;\r\n\t\tthis.mask = mask;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this IP Address' mask, given its numerical representation (0-32).\r\n\t * @param  {number} maskShort The numerical mask to be set.\r\n\t */\r\n\tpublic setMaskShort(maskShort: number): void {\r\n\r\n\t\tif (maskShort < 0 || maskShort > 32) {\r\n\t\t\tlet err = new RangeError(\"The short mask should be between 0 and 32\");\r\n\t\t\terr.name = ERROR_MASK_RANGE;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet tmpMask: Byte4 = Byte4Zero();\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tif (((8 * i) + j) < maskShort) {\r\n\t\t\t\t\ttmpMask[i].bit(8 - 1 - j, true);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttmpMask[i].bit(8 - 1 - j, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.maskShort = maskShort;\r\n\t\tthis.mask = tmpMask;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this IP Address' IP value.\r\n\t * @param  {Byte4} ip\r\n\t */\r\n\tpublic setIp(ip: Byte4): void {\r\n\t\tthis.ip = ip;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this IP Address' mask.\r\n\t */\r\n\tpublic getMask(): Byte4 {\r\n\t\treturn this.mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the numerical representation of this IP Address' mask.\r\n\t */\r\n\tpublic getMaskShort(): number {\r\n\t\treturn this.maskShort;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns this IP Address' IP value.\r\n\t */\r\n\tpublic getIp(): Byte4 {\r\n\t\treturn this.ip;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this IP Address IP/Mask values from a parsed string.\r\n\t * @param  {string} address The full address, in the X.X.X.X/X format. If requireMask is false, the mask can be ommited and defaults to /0.\r\n\t * @param  {boolean=true} requireMask Whether the address requires the mask to be given.\r\n\t */\r\n\tpublic parseIP(address: string, requireMask: boolean = true): void {\r\n\r\n\t\taddress = address.trim();\r\n\t\tconst fullRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\/(\\d+)$/;\r\n\t\tconst ipRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/;\r\n\r\n\t\tlet match = fullRegex.exec(address);\r\n\r\n\t\tif (match !== null) {\r\n\t\t\tlet ipByte0 = new Byte(parseInt(match[1], 10));\r\n\t\t\tlet ipByte1 = new Byte(parseInt(match[2], 10));\r\n\t\t\tlet ipByte2 = new Byte(parseInt(match[3], 10));\r\n\t\t\tlet ipByte3 = new Byte(parseInt(match[4], 10));\r\n\t\t\tlet maskShort = parseInt(match[5], 10);\r\n\r\n\t\t\tif (maskShort < 0 || maskShort > 32) {\r\n\t\t\t\tlet err = new RangeError(\"The short mask should be between 0 and 32\");\r\n\t\t\t\terr.name = ERROR_MASK_RANGE;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\r\n\t\t\tthis.setIp([ipByte0, ipByte1, ipByte2, ipByte3]);\r\n\t\t\tthis.setMaskShort(maskShort);\r\n\t\t}\r\n\t\telse if (!requireMask) {\r\n\r\n\t\t\tlet matchIp = ipRegex.exec(address);\r\n\r\n\t\t\tif (matchIp !== null) {\r\n\t\t\t\tlet ipByte0 = new Byte(parseInt(matchIp[1], 10));\r\n\t\t\t\tlet ipByte1 = new Byte(parseInt(matchIp[2], 10));\r\n\t\t\t\tlet ipByte2 = new Byte(parseInt(matchIp[3], 10));\r\n\t\t\t\tlet ipByte3 = new Byte(parseInt(matchIp[4], 10));\r\n\r\n\t\t\t\tthis.setIp([ipByte0, ipByte1, ipByte2, ipByte3]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet err = new Error(\"Invalid IP/mask address string\");\r\n\t\t\t\terr.name = ERROR_ADDRESS_PARSE;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet err = new Error(\"Invalid IP/mask address string\");\r\n\t\t\terr.name = ERROR_ADDRESS_PARSE;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Returns the string representation of this IP Address in the X.X.X.X/X format.\r\n\t * @param  {boolean} omitMask Whether the mask should be ommited. Defaults to false.\r\n\t */\r\n\ttoString(omitMask: boolean = false): string {\r\n\r\n\t\treturn \"\" +\r\n\t\t\tthis.ip[0].getDecimal() + \".\" +\r\n\t\t\tthis.ip[1].getDecimal() + \".\" +\r\n\t\t\tthis.ip[2].getDecimal() + \".\" +\r\n\t\t\tthis.ip[3].getDecimal() + (omitMask? \"\" : this.shortMaskString());\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the string representation of the mask.\r\n\t */\r\n\tmaskString(): string {\r\n\t\treturn \"\" +\r\n\t\t\tthis.mask[0].getDecimal() + \".\" +\r\n\t\t\tthis.mask[1].getDecimal() + \".\" +\r\n\t\t\tthis.mask[2].getDecimal() + \".\" +\r\n\t\t\tthis.mask[3].getDecimal();\r\n\t}\r\n\r\n\tshortMaskString(): string {\r\n\t\treturn \"/\" + this.getMaskShort();\r\n\t}\r\n\r\n}","/**\r\n * Shorthand for document.getElementById(id).\r\n * @param  {string} elementId String that specifies the ID value. Case-insensitive.\r\n */\r\nexport function id(elementId: string): HTMLElement {\r\n\treturn document.getElementById(elementId);\r\n}\r\n\r\n/**\r\n * Copies a string to the user's clipboard.\r\n * @param  {string} str String to be copied.\r\n * @param  {(success:boolean)=>void} done What happens on success/failure. Optional.\r\n */\r\nexport function copyToClipboard(str: string, done?: (success: boolean) => void): void {\r\n\r\n\tlet tmp = document.createElement(\"textarea\");\r\n\r\n\ttmp.style.position = 'fixed';\r\n\ttmp.style.top = \"0\";\r\n\ttmp.style.left = \"0\";\r\n\ttmp.style.opacity = \"0\";\r\n\ttmp.value = str;\r\n\r\n\tdocument.body.appendChild(tmp);\r\n\ttmp.focus();\r\n\ttmp.select();\r\n\r\n\tlet success = document.execCommand('copy');\r\n\tdocument.body.removeChild(tmp);\r\n\r\n\tif (done) {\r\n\t\tdone(success);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Creates an HTML element.\r\n * @param  {string} tagName The tag of the element, such as \"div\", \"span\", \"p\" etc.\r\n * @param  {string} classes The classes of the element. Optional.\r\n * @param  {string} text The text content of this element.\r\n * @param  {string} id The ID of this element.\r\n */\r\nexport function make(tagName: string, classes: string = undefined, text: string = undefined, id: string = undefined): HTMLElement {\r\n\r\n\tlet dom = document.createElement(tagName);\r\n\tif (classes !== undefined) {\r\n\t\tif (classes.length > 0) {\r\n\t\t\tdom.className = classes;\r\n\t\t}\r\n\t}\r\n\tif (text !== undefined) {\r\n\t\tdom.appendChild(textNode(text));\r\n\t}\r\n\tif (id !== undefined) {\r\n\t\tdom.id = id;\r\n\t}\r\n\treturn dom;\r\n}\r\n\r\n/**\r\n * This removes all children from the element.\r\n * @param  {HTMLElement} element The parent element.\r\n */\r\nexport function clearChildren(element: HTMLElement): void {\r\n\twhile (element.lastChild) element.removeChild(element.lastChild);\r\n}\r\n\r\n/**\r\n * Returns a text node, given a string.\r\n * @param  {string} text The text of the node.\r\n */\r\nexport function textNode(text: string): Text {\r\n\treturn document.createTextNode(text);\r\n}","export const NUMBERS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\n\r\n/**\r\n * Returns whether a character is a number.\r\n * @param  {string} str The character to be anyalized.\r\n*/\r\nexport function isCharNumeric(str: string): boolean {\r\n\treturn NUMBERS.indexOf(str) !== -1;\r\n}\r\n\r\n/**\r\n * Returns whether a string is composed of numbers only.\r\n * @param  {string} str The string to be anyalized.\r\n */\r\nexport function isStringNumeric(str: string): boolean {\r\n\tfor (let i = 0; i < str.length; i++) {\r\n\t\tif (!isCharNumeric(str.charAt(i)))\r\n\t\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n","// IPBits\r\n// +=========================+\r\n// Author: Henrique Colini\r\n// Version: 4.0 (2019-08-25)\r\n\r\nimport React, { Component, RefObject, ChangeEvent } from \"react\";\r\nimport { copyToClipboard } from \"../../../wireworks/utils/dom\";\r\nimport { isCharNumeric, isStringNumeric } from \"../../../wireworks/utils/string\";\r\nimport { clamp } from \"../../../wireworks/utils/math\";\r\nimport { Byte } from \"../../../wireworks/networking/byte\";\r\nimport { joinBitIndex, IP, Byte4Zero, splitBitIndex } from \"../../../wireworks/networking/layers/layer-3/ip\";\r\nimport \"src/sass/pages/ipbits.scss\";\r\n\r\n/**\r\n * Keys that will not trigger keyUp/keyDown events.\r\n */\r\nconst additionalKeys = [\"Backspace\", \"Delete\", \"Tab\", \"ArrowLeft\", \"ArrowRight\", \"Home\", \"End\", \"Insert\"];\r\n\r\n// +==============================================+\r\n\r\nclass Ipbits extends Component {\r\n\r\n\t/**\r\n\t * The checkboxes corresponding to the IP bits.\r\n\t */\r\n\tprivate IP: RefObject<HTMLInputElement>[][] = [];\r\n\t/**\r\n\t * The checkboxes corresponding to the mask bits.\r\n\t */\r\n\tprivate MASK: RefObject<HTMLInputElement>[][] = [];\r\n\r\n\t/**\r\n\t * The mask displays.\r\n\t */\r\n\tprivate maskDisplays: RefObject<HTMLDivElement>[] = [];\r\n\r\n\t/**\r\n\t * The IP displays.\r\n\t */\r\n\tprivate ipDisplays: RefObject<HTMLInputElement>[] = [];\r\n\r\n\t/**\r\n\t * The short IP display.\r\n\t */\r\n\tprivate ipDisplayShort: RefObject<HTMLHeadingElement>;\r\n\r\n\t/**\r\n\t * The short mask display.\r\n\t */\r\n\tprivate maskDisplayShort: RefObject<HTMLHeadingElement>;\r\n\r\n\t/**\r\n\t * The button that copies the mask.\r\n\t */\r\n\tprivate copyMaskButton: RefObject<HTMLElement>;\r\n\r\n\t/**\r\n\t * The button that copies the IP.\r\n\t */\r\n\tprivate copyIPButton: RefObject<HTMLElement>;\r\n\r\n\t/**\r\n\t * The button that copies the mask.\r\n\t */\r\n\tprivate copyMaskText: RefObject<HTMLSpanElement>;\r\n\r\n\t/**\r\n\t * The button that copies the IP.\r\n\t */\r\n\tprivate copyIPText: RefObject<HTMLSpanElement>;\r\n\t\r\n\t/**\r\n\t * Returns the IP Address, extracted from the DOM elements.\r\n\t */\r\n\tprivate extractIPAddress(): IP {\r\n\r\n\t\tlet ipBytes = Byte4Zero()\r\n\t\tlet maskBytes = Byte4Zero()\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tipBytes[i].bit(j, (this.IP[i][j]).current.checked ? true : false);\r\n\t\t\t\tmaskBytes[i].bit(j, (this.MASK[i][j]).current.checked ? true : false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new IP(ipBytes,maskBytes);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the checkboxes and display of a DOM representation of a Byte, given a real one.\r\n\t * @param  {Byte} byte The byte to be displayed.\r\n\t * @param  {number} index The index of the 4 possible IP DOM bytes.\r\n\t * @param  {boolean} updateBig Whether the big displays should be updated as well. Defaults to true.\r\n\t * @param  {boolean} updateShort Whether the short display should be updated as well. Defaults to true.\r\n\t */\r\n\tprivate setIPByteDOM(byte: Byte, index: number, updateBig: boolean = true, updateShort: boolean = true): void {\r\n\t\t\r\n\t\tlet dom = this.IP[index];\r\n\r\n\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\r\n\t\t\tdom[i].current.checked = byte.bit(i);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif (updateBig) {\t\t\r\n\t\t\tthis.updateDisplays();\r\n\t\t}\r\n\t\telse if (updateShort) {\r\n\t\t\tthis.updateIPShort();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the small IP display string.\r\n\t * @param  {string} str? The string to be shown. If not given, it will be calculated.\r\n\t */\r\n\tprivate updateIPShort(str?: string): void {\r\n\r\n\t\tthis.ipDisplayShort.current.textContent = str ? str : this.extractIPAddress().toString(true);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the small mask display string.\r\n\t * @param  {string} str? The string to be shown. If not given, it will be calculated.\r\n\t */\r\n\tprivate updateMaskShort(str?: string): void {\r\n\r\n\t\tthis.maskDisplayShort.current.textContent = str ? str : this.extractIPAddress().shortMaskString();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the big displays for the IP and mask.\r\n\t * @param  {IP} ip? The IP address that will be displayed. If not given, it will be calculated.\r\n\t */\r\n\tprivate updateDisplays = (ip?: IP): void => {\r\n\r\n\t\tip = ip? ip : this.extractIPAddress();\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tthis.ipDisplays[i].current.value = \"\" + ip.getIp()[i].getDecimal();\r\n\t\t\tthis.maskDisplays[i].current.textContent = \"\" + ip.getMask()[i].getDecimal();\r\n\t\t}\r\n\r\n\t\tthis.updateIPShort(ip.toString(true));\r\n\t\tthis.updateMaskShort(ip.shortMaskString());\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Selects all the mask bit checkboxes until a given index.\r\n\t * @param  {number} index The last checked bit.\r\n\t */\r\n\tprivate selectMaskBit = (index: number): void => {\r\n\r\n\t\tlet { bitIndex, byteIndex } = splitBitIndex(index);\r\n\r\n\t\tindex += this.MASK[byteIndex][bitIndex].current.checked ? 1 : 0;\r\n\r\n\t\tfor (let byte4Index = 0; byte4Index < 32; byte4Index++) {\r\n\t\t\t\r\n\t\t\tlet { bitIndex, byteIndex } = splitBitIndex(byte4Index);\r\n\t\t\tlet on = byte4Index < index;\r\n\r\n\t\t\tthis.MASK[byteIndex][bitIndex].current.checked = on;\r\n\t\t\tthis.IP[byteIndex][bitIndex].current.disabled = on;\t\t\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateDisplays();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the IP (in X.X.X.X format) to the clipboard.\r\n\t */\r\n\tprivate copyIPToClipboard = (): void => {\r\n\r\n\t\tlet scope: Ipbits = this;\r\n\r\n\t\tcopyToClipboard(this.extractIPAddress().toString(true), function (success: boolean): void {\r\n\r\n\t\t\tlet text = scope.copyIPText.current;\r\n\t\t\ttext.style.transition = \"\";\r\n\t\t\ttext.style.opacity = \"1\";\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\ttext.style.transition = \"opacity 1s\";\r\n\t\t\t\ttext.style.opacity = \"0\";\r\n\t\t\t}, 2000);\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the mask (in X.X.X.X format) to the clipboard.\r\n\t */\r\n\tprivate copyMaskToClipboard = (): void => {\r\n\r\n\t\tlet scope: Ipbits = this;\r\n\r\n\t\tcopyToClipboard(this.extractIPAddress().maskString(), function (success: boolean): void {\r\n\r\n\t\t\tlet text = scope.copyMaskText.current;\r\n\t\t\ttext.style.transition = \"\";\r\n\t\t\ttext.style.opacity = \"1\";\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\ttext.style.transition = \"opacity 1s\";\r\n\t\t\t\ttext.style.opacity = \"0\";\r\n\t\t\t}, 2000);\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles IP bit clicking.\r\n\t */\r\n\thandleIPBitChange = () => {\r\n\t\tthis.updateDisplays();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mask bit clicking.\r\n\t */\r\n\thandleMaskBitChange = (byteIndex: number, bitIndex: number) => {\t\t\r\n\t\tthis.selectMaskBit(joinBitIndex(byteIndex, bitIndex));\r\n\t}\r\n\r\n\t/**\r\n\t * The byte that will be set after the last display gets blurred.\r\n\t */\r\n\tprivate blurByte: Byte;\r\n\r\n\t/**\r\n\t * Handles IP display focus.\r\n\t */\r\n\tprivate handleDisplayFocus = (display: HTMLInputElement, byteIndex: number): void => {\r\n\t\t\r\n\t\tdisplay.select();\r\n\r\n\t\tlet originalAddress = this.extractIPAddress();\r\n\t\tthis.blurByte = originalAddress.getIp()[byteIndex];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles IP display blur.\r\n\t */\r\n\tprivate handleDisplayBlur = (byteIndex: number): void => {\r\n\t\tthis.setIPByteDOM(this.blurByte, byteIndex, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles IP display key down.\r\n\t */\r\n\tprivate handleDisplayKeydown = (evt: React.KeyboardEvent<HTMLInputElement>, display: HTMLInputElement): void => { \r\n\t\t\r\n\t\tif (evt.key === \"Enter\") {\r\n\t\t\tdisplay.blur(); // only for UX, otherwise useless\r\n\t\t}\r\n\t\t\r\n\t\tif (additionalKeys.indexOf(evt.key) === -1 && !isCharNumeric(evt.key)){\t\t\t\t\r\n\t\t\tevt.preventDefault();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet selectedText = window.getSelection().anchorNode === display.parentNode ? window.getSelection().toString() : \"\";\r\n\r\n\t\tif (additionalKeys.indexOf(evt.key) === -1 && display.value.length >= 3 && selectedText === \"\")  evt.preventDefault();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles IP display key up.\r\n\t */\r\n\tprivate handleDisplayKeyup = (evt: React.KeyboardEvent<HTMLInputElement>, display: HTMLInputElement, byteIndex: number): void => {\r\n\t\t\t\t\r\n\t\tlet next = byteIndex < 3 ? this.ipDisplays[byteIndex + 1].current : undefined;\r\n\r\n\t\tlet selectedText = window.getSelection().anchorNode === display.parentNode ? window.getSelection().toString() : \"\";\r\n\r\n\t\tif (additionalKeys.indexOf(evt.key) === -1 && display.value.length >= 3 && selectedText === \"\") {\r\n\r\n\t\t\tif (next) {\r\n\t\t\t\tnext.focus();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles IP display input.\r\n\t */\r\n\tprivate handleDisplayChange = (evt: ChangeEvent<HTMLInputElement>, display: HTMLInputElement, byteIndex: number): void => {\r\n\t\t\r\n\t\tif (display.value === \"\") {\r\n\t\t\t\t\t\t\r\n\t\t\tlet address = this.extractIPAddress();\r\n\r\n\t\t\tlet minByte = address.getIp()[byteIndex];\r\n\t\t\tlet mask = address.getMask()[byteIndex];\r\n\r\n\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\tif (!mask.bit(i)) {\r\n\t\t\t\t\tminByte.bit(i, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.blurByte = minByte;\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tif (isStringNumeric(display.value)){\r\n\r\n\t\t\t\tlet address = this.extractIPAddress();\r\n\r\n\t\t\t\tlet minByte = address.getIp()[byteIndex];\r\n\t\t\t\tlet maxByte = minByte.clone();\r\n\t\t\t\tlet mask = address.getMask()[byteIndex];\r\n\r\n\t\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\t\tif (!mask.bit(i)) {\r\n\t\t\t\t\t\tminByte.bit(i, false);\r\n\t\t\t\t\t\tmaxByte.bit(i, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet value = new Byte(\r\n\t\t\t\t\tclamp(\r\n\t\t\t\t\t\tparseInt(display.value, 10),\r\n\t\t\t\t\t\tminByte.getDecimal(),\r\n\t\t\t\t\t\tmaxByte.getDecimal()\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tthis.blurByte = value;\r\n\t\t\t\tthis.setIPByteDOM(value, byteIndex, false);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tconstructor(props: any) {\r\n\t\t\r\n\t\tsuper(props);\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\r\n\t\t\tthis.maskDisplays[i] = React.createRef();\r\n\t\t\tthis.ipDisplays[i] = React.createRef();\r\n\t\t\tthis.MASK[i] = [];\r\n\t\t\tthis.IP[i] = [];\r\n\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tthis.MASK[i][j] = React.createRef();\r\n\t\t\t\tthis.IP[i][j] = React.createRef();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tthis.maskDisplayShort = React.createRef();\r\n\t\tthis.ipDisplayShort = React.createRef();\r\n\r\n\t\tthis.copyMaskButton = React.createRef();\r\n\t\tthis.copyIPButton = React.createRef();\r\n\t\tthis.copyMaskText = React.createRef();\r\n\t\tthis.copyIPText = React.createRef();\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\t\t\r\n\t\tthis.updateDisplays();\r\n\t\tthis.updateIPShort();\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tlet maskBox = [];\r\n\t\tlet ipBox = [];\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\r\n\t\t\tlet bitBox = [];\r\n\t\t\t\r\n\t\t\tfor (let j = 7; j >= 0; j--) {\r\n\t\t\t\tlet id = \"byte_mask_\"+i+\"_\"+j;\r\n\t\t\t\tbitBox.push(\r\n\t\t\t\t\t<div className=\"bit\" key={id+\"_bit\"}>\r\n\t\t\t\t\t\t<input tabIndex={-1} id={id} ref={this.MASK[i][j]} type=\"checkbox\" onChange={()=>{this.handleMaskBitChange(i,j)}}/>\r\n\t\t\t\t\t\t<label htmlFor={id}></label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tmaskBox.push(\r\n\t\t\t\t<div className=\"block\" key={\"mask_block_\"+i}>\r\n\t\t\t\t\t<div className=\"mask-display\" ref={this.maskDisplays[i]}>0</div>\r\n\t\t\t\t\t<div className=\"bit-box\"> { bitBox } </div>\r\n\t\t\t\t</div>\t\t\t\t\r\n\t\t\t);\r\n\t\t\tif (i < 3) maskBox.push(<div className=\"dot\" key={\"mask_dot_\"+i}></div>);\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\r\n\t\t\tlet bitBox = [];\r\n\t\t\t\r\n\t\t\tfor (let j = 7; j >= 0; j--) {\r\n\t\t\t\tlet id = \"byte_ip_\"+i+\"_\"+j;\r\n\t\t\t\tbitBox.push(\r\n\t\t\t\t\t<div className=\"bit\" key={id+\"_bit\"}>\r\n\t\t\t\t\t\t<input tabIndex={-1} id={id} ref={this.IP[i][j]} type=\"checkbox\" onChange={this.handleIPBitChange}/>\r\n\t\t\t\t\t\t<label htmlFor={id}></label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tlet ipDisplay = <input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tclassName=\"display\"\r\n\t\t\t\t\t\t\t\tref={this.ipDisplays[i]}\r\n\t\t\t\t\t\t\t\tonChange={(evt) => {this.handleDisplayChange(evt, this.ipDisplays[i].current, i)}}\r\n\t\t\t\t\t\t\t\tonFocus={() => {this.handleDisplayFocus(this.ipDisplays[i].current, i)}}\r\n\t\t\t\t\t\t\t\tonBlur={() => {this.handleDisplayBlur(i)}}\r\n\t\t\t\t\t\t\t\tonKeyDown={(evt: React.KeyboardEvent<HTMLInputElement>) => {this.handleDisplayKeydown(evt, this.ipDisplays[i].current)}}\r\n\t\t\t\t\t\t\t\tonKeyUp={(evt: React.KeyboardEvent<HTMLInputElement>) => {this.handleDisplayKeyup(evt, this.ipDisplays[i].current, i)}}\r\n\t\t\t\t\t\t\t\t/>;\r\n\r\n\t\t\tipBox.push(\r\n\t\t\t\t<div className=\"block\" key={\"ip_block_\"+i}>\r\n\t\t\t\t\t{ ipDisplay }\r\n\t\t\t\t\t<div className=\"bit-box\"> { bitBox } </div>\r\n\t\t\t\t</div>\t\t\t\t\r\n\t\t\t);\r\n\t\t\tif (i < 3) ipBox.push(<div className=\"dot\" key={\"ip_dot_\"+i}></div>);\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\treturn(\r\n\t\t\t<main>\r\n\t\t\t\t<div className=\"spacer\">\r\n\t\t\t\t\t<h2>Máscara <i className=\"far fa-clipboard copy-icon\" ref={this.copyMaskButton} onClick={this.copyMaskToClipboard}></i> <span className=\"copy-text\" ref={this.copyMaskText}>Máscara copiada</span></h2>\r\n\t\t\t\t\t<h2 className=\"text-light font-light\" ref={this.maskDisplayShort}>/0</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"box\"> {maskBox} </div>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"spacer\">\r\n\t\t\t\t\t<h2>IP <i className=\"far fa-clipboard copy-icon\" ref={this.copyIPButton} onClick={this.copyIPToClipboard}></i> <span className=\"copy-text\" ref={this.copyIPText}>IP Copiado</span></h2>\r\n\t\t\t\t\t<h2 className=\"text-light font-light\" ref={this.ipDisplayShort}>0.0.0.0</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"box\"> {ipBox} </div>\r\n\t\t\t</main>\r\n\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Ipbits;"],"sourceRoot":""}