{"version":3,"sources":["app/wireworks/utils/math.ts","app/components/ErrorBox.tsx","app/wireworks/networking/layers/layer-5/domain.ts","app/components/FlowCanvas.tsx","app/wireworks/utils/canvas.ts","app/pages/tools/layer-5/dnsflow.tsx"],"names":["clamp","value","min","max","Math","binaryToDecimal","binary","reversed","arguments","length","undefined","decimal","realIndex","i","pow","decimalToBinary","RangeError","floor","tmpDecimal","reverse","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ErrorBox","_ref","errorMessage","a","createElement","className","ERROR_INVALID_LABEL","ERROR_FULL_NAME_RANGE","ERROR_SMALL_DOMAIN","Domain","label","parent","address","Object","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","subdomains","setParent","setAddress","setLabel","getFullName","err","name","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","other","overrideAddresses","Error","concat","compare","sub","thisSub","getSubdomain","merge","push","toLowerCase","test","revalidateLabel","detach","splice","indexOf","getLabel","domainParts","split","error","fullStr","tldStr","destStr","interStr","unshift","middle","full","tld","dest","inter","admin","first","prefix","isTail","str","toString","getTreeStrRaw","root","fullName","parts","trim","curr","next","getSubdomains","Node","pos","width","heigth","margins","image","connectorOffset","classCallCheck","visible","height","createClass","ctx","drawImage","x","y","w2","h2","b","c","side","p","getVertices","fw","fh","t","l","r","Label","text","textColor","backgroundColor","padding","borderRadius","font","textHeight","textAlign","lineDistance","getRealWidth","getRealHeight","fillStyle","w","h","beginPath","moveTo","arcTo","closePath","roundRect","fill","lines","line","spacer","measureText","fillText","biggest","Line","from","to","time","strokeStyle","strokeWidth","lineWidth","offX","offY","abs","getOutput","getInput","fromPoint","getStartPoint","toPoint","getEndPoint","currEnd","getCurrentEndPoint","lineCap","lineTo","stroke","draw","FlowCanvas","props","_this","possibleConstructorReturn","getPrototypeOf","call","drawables","canvas","lineIntervals","addDrawable","drawable","removeDrawable","index","clearDrawables","getDrawables","stopLineAnimations","clearInterval","connectNodes","speed","labelText","callback","prevTime","Date","now","scope","assertThisInitialized","interval","setInterval","deltaTime","startPoint","endPoint","distance","sqrt","fixedDeltaTime","connectMultipleNodes","connections","iterativeConnect","connection","getAlignedPoint","positionY","positionX","fromWidth","fromHeight","toWidth","toHeight","current","getContext","clearRect","React","createRef","react_default","ref","Component","serverImage","Image","clientImage","e","then","bind","res","src","default","greenWire","redWire","blueWire","yellowWire","verySlowSpeed","slowSpeed","normalSpeed","fastSpeed","veryFastSpeed","ITERATIVE","RECURSIVE","DnsFlow","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","txtDomain","dnsCanvas","selectSpeed","selectLocalMode","selectRootMode","selectTldMode","selectInterMode","state","domain","localMode","rootMode","tldMode","interMode","run","setState","errStr","tmpDomain","extractDomain","console","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","htmlFor","type","onKeyDown","ev","placeholder","id","defaultValue","onClick","_components_ErrorBox__WEBPACK_IMPORTED_MODULE_7__","DnsFlowCanvas","_this3","flowCanvas","client","local","makerConfigs","drawIndex","cons","calculateConnections","success","onSuccess","onFailure","node","getDomainParts","makeConnection","mode","apply","kind","msg","style","resetCanvas","pt","onload","_components_FlowCanvas__WEBPACK_IMPORTED_MODULE_6__"],"mappings":"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","file":"static/js/8.70653e3e.chunk.js","sourcesContent":["/**\r\n * Returns a value, clamped between max and min.\r\n * @param  {number} value The number to be clamped.\r\n * @param  {number} min The minimum possible number.\r\n * @param  {number} max The maximum possible number.\r\n */\r\nexport function clamp(value: number, min: number, max: number): number {\r\n\treturn Math.min(Math.max(value, min), max);\r\n};\r\n\r\n/**\r\n * Converts a binary number (as a string, boolean array, or number array) to a decimal number.\r\n * @param  {boolean[]} binary The number to be converted. An array of booleans, read from left to right (e.g. 001 equals 4).\r\n * @param  {boolean} reversed Optional. Whether the input should be reversed (read from right to left). Defaults to false.\r\n */\r\nexport function binaryToDecimal(binary: boolean[], reversed: boolean = false): number {\r\n\r\n\tif (binary.length === 0) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tlet decimal = 0;\r\n\r\n\tfor (let realIndex = 0; realIndex < binary.length; realIndex++) {\r\n\r\n\t\tlet i = reversed ? binary.length - realIndex - 1 : realIndex;\r\n\r\n\t\tdecimal += binary[i] ? Math.pow(2, i) : 0;\r\n\t\t\r\n\t}\r\n\r\n\treturn decimal;\r\n\t\r\n}\r\n\r\n/**\r\n * Converts a decimal number (must be a positive integer) to an array of booleans (read from left to right, such that 001 equals 4).\r\n * @param  {number} decimal The number to be converted. Must be a positive integer.\r\n * @param  {boolean} reversed Optional. Whether the output should be reversed (read from right to left). Defaults to false.\r\n */\r\nexport function decimalToBinary(decimal: number, reversed: boolean = false): boolean[] {\r\n\r\n\tif (decimal < 0) {\r\n\t\tthrow new RangeError(\"Attempting to convert negative number to binary\");\r\n\t}\r\n\r\n\tif (decimal !== Math.floor(decimal)) {\r\n\t\tthrow new RangeError(\"Attempting to convert non-integer number to binary\");\r\n\t}\r\n\r\n\tlet binary: boolean[] = [];\r\n\r\n\tlet tmpDecimal = decimal, i = 0;\r\n\r\n\twhile (tmpDecimal > 0) {\r\n\r\n\t\tbinary[i] = tmpDecimal % 2 ? true : false;\r\n\t\ttmpDecimal = Math.floor(tmpDecimal / 2);\r\n\r\n\t\ti++;\r\n\r\n\t}\r\n\r\n\tif (reversed) {\r\n\t\tbinary.reverse();\r\n\t}\r\n\r\n\treturn binary;\r\n\r\n}","import React, { FC } from \"react\";\r\n\r\ninterface ErrorBoxProps {\r\n\terrorMessage: string\r\n}\r\n\r\nconst ErrorBox: FC<ErrorBoxProps> = ({errorMessage}) => {\r\n\r\n    if (errorMessage) {\r\n        return (\r\n            <div className=\"errorbox\">{errorMessage}</div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n\r\nexport default ErrorBox;","import { IP } from \"../layer-3/ip\";\r\n\r\n/**\r\n * Error name for when a root Domain has a label that isn't \".\" or undefined.\r\n */\r\nexport const ERROR_INVALID_ROOT_LABEL = \"InvalidRootLabelError\";\r\n\r\n/**\r\n * Error name for when a Domain has an invalid label.\r\n */\r\nexport const ERROR_INVALID_LABEL = \"InvalidLabelError\";\r\n\r\n/**\r\n * Error name for when a Domain's full name is greater than 253.\r\n */\r\nexport const ERROR_FULL_NAME_RANGE = \"FullNameRangeError\";\r\n\r\n/**\r\n * Error name for when a root Domain has an Address.\r\n */\r\nexport const ERROR_ROOT_ADDRESS = \"RootAddressError\";\r\n\r\n/**\r\n * Error name for when a domain with same label but different address is found during merge.\r\n */\r\nexport const ERROR_MERGE_OVERLAP = \"MergeOverlapError\";\r\n\r\n/**\r\n * Error name for when two merging domains have different labels.\r\n */\r\nexport const ERROR_MERGE_WRONG_ROOT = \"MergeWrongRootError\";\r\n\r\n/**\r\n * Error name for when trying to get the parts of an incomplete domain.\r\n */\r\nexport const ERROR_SMALL_DOMAIN = \"SmallDomainError\"\r\n\r\n/**\r\n * A DNS domain tree.\r\n * @author Henrique Colini\r\n */\r\nexport class Domain {\r\n\t\r\n\t/**\r\n\t * The parent Domain. Undefined if this is a root domain.\r\n\t */\r\n\tprivate parent: Domain = undefined;\r\n\r\n\t/**\r\n\t * This Domain's subdomains.\r\n\t */\r\n\tprivate subdomains: Domain[] = [];\r\n\r\n\t/**\r\n\t * The IP address this Domain refers to. Undefined if this is not a hostname.\r\n\t */\r\n\tprivate address: IP = undefined;\r\n\r\n\t/**\r\n\t * This Domain's text label.\r\n\t */\r\n\tprivate label: string;\r\n\t\r\n\t/**\r\n\t * Constructs a Domain, provided its label, parent and optionally an Address.\r\n\t * @param  {string} label The label of this Domain. Must follow naming conventions.\r\n\t * @param  {Domain} parent The parent of this Domain. If undefined, this is a root domain.\r\n\t * @param  {IP} address The address of this Domain, if it's a hostname. Optional. Defaults to undefined. Must not exist if this is a root domain.\r\n\t */\r\n\tconstructor(label: string, parent: Domain, address: IP = undefined) {\r\n\r\n\t\tthis.setParent(parent, false);\r\n\t\tthis.setAddress(address);\r\n\t\tthis.setLabel(label);\r\n\r\n\t\tif (this.getFullName().length > 253) {\r\n\t\t\t\r\n\t\t\tlet err = new RangeError(\"The full name of a domain must not exceed 253 characters\");\r\n\t\t\terr.name = ERROR_FULL_NAME_RANGE;\r\n\t\t\tthrow err;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a Domain from a string, in the format abc.def.ghi. Returns the last subdomain.\r\n\t * @param  {Domain} root The root domain to be used.\r\n\t * @param  {string} fullName The full name of the domain, in the format abc.def.ghi.\r\n\t */\r\n\tpublic static extractDomain(root: Domain, fullName: string): Domain {\r\n\r\n\t\tlet parts = fullName.trim().split(\".\");\r\n\r\n\t\tlet curr: Domain = root;\r\n\r\n\t\tfor (let i = parts.length - 1; i >= 0; i--) {\r\n\r\n\t\t\tif (parts[i].length === 0) {\r\n\t\t\t\tlet err = new Error();\r\n\t\t\t\terr.name = ERROR_INVALID_LABEL;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\r\n\t\t\tlet next = new Domain(parts[i], curr);\r\n\t\t\tcurr.getSubdomains().push(next);\r\n\t\t\tcurr = next;\r\n\r\n\t\t}\r\n\r\n\t\treturn curr;\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Merges two domains (combines their subdomains) given the original two have the same label. It has options for what to do when domains with the same labels and different addresses are found:\r\n\t * \"ignore\" - Nothing happens. The original address is kept. \r\n\t * \"override\" - The new address replaces the old one, no matter what. \r\n\t * \"merge\" - The new address replaces the old one only if the new one exists. \r\n\t * \"error\" - Throws an error when this happens. \r\n\t * @param  {Domain} other The domain to be merged with this. \r\n\t * @param  {string} overrideAddresses What to do when domains with the same labels and different addresses are found. May be \"ignore\", \"override\", \"merge\" or \"error\".\r\n\t */\r\n\tpublic merge(other: Domain, overrideAddresses: \"ignore\" | \"override\" | \"merge\" | \"error\" = \"ignore\"): void {\r\n\t\t\r\n\t\tif (other.label !== this.label) {\r\n\t\t\tlet err = new Error(`Attempting to merge domains with different roots (\"${this.label}\" != \"${other.label}\")`);\r\n\t\t\terr.name = ERROR_MERGE_WRONG_ROOT;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tif (this.address !== other.address && ((this.address && !this.address.compare(other.address)) || !other.address.compare(this.address))) {\r\n\t\t\t\r\n\t\t\tif (overrideAddresses === \"override\") {\r\n\t\t\t\tthis.address = other.address;\r\n\t\t\t}\r\n\r\n\t\t\tif (overrideAddresses === \"merge\") {\r\n\t\t\t\tif (other.address) {\r\n\t\t\t\t\tthis.address = other.address;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (overrideAddresses === \"error\") {\r\n\t\t\t\tlet err = new Error(\"Overlapping Domain addresses\");\r\n\t\t\t\terr.name = ERROR_MERGE_OVERLAP;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < other.subdomains.length; i++) {\r\n\t\t\tconst sub = other.subdomains[i];\r\n\t\t\tconst thisSub = this.getSubdomain(sub.label);\r\n\t\t\t\r\n\t\t\tif (thisSub) {\r\n\t\t\t\tthisSub.merge(sub, overrideAddresses);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.subdomains.push(sub);\r\n\t\t\t\tsub.setParent(this);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the label of this Domain.\r\n\t * @param  {string} label The label to be set. Must follow naming conventions. If empty, the parent should be undefined.\r\n\t */\r\n\tpublic setLabel(label: string): void {\r\n\r\n\t\tlabel = label.toLowerCase();\r\n\r\n\t\tif ((label === '.' || label === undefined || label === \"\") && !this.parent) {\r\n\t\t\tthis.label = '';\r\n\t\t}\r\n\t\telse if (!this.parent) {\r\n\t\t\tlet err = new Error(\"The root domain's label must be either \\\".\\\", \\\"\\\" or undefined\");\r\n\t\t\terr.name = ERROR_INVALID_ROOT_LABEL;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\telse if ((label === '.' || label === undefined || label === \"\") && this.parent) {\r\n\t\t\tlet err = new Error(\"The domain's label must not be \\\".\\\", \\\"\\\" or undefined\");\r\n\t\t\terr.name = ERROR_INVALID_LABEL;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tconst basicReg = /^[a-zA-Z]$/;\r\n\t\t\tconst reg = /^[a-zA-Z][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$/;\r\n\r\n\t\t\tif (!basicReg.test(label) && !reg.test(label)) {\r\n\r\n\t\t\t\tlet err = new Error(\"Domain label doesn't follow the naming standards\");\r\n\t\t\t\terr.name = ERROR_INVALID_LABEL;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\r\n\t\t\tthis.label = label;\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the parent of this Domain.\r\n\t * @param  {Domain} parent The parent domain to be set. If undefined, the address must also be undefined.\r\n\t * @param  {boolean} revalidateLabel Optional. Whether the label should also be revalidated. Defaults to true.\r\n\t * @param  {boolean} detach Optional. Whether this should be removed from the old parent's subdomains list. Defaults to false.\r\n\t */\r\n\tpublic setParent(parent: Domain, revalidateLabel: boolean = true, detach: boolean = false): void {\r\n\t\t\r\n\t\tif (this.address && !parent) {\r\n\t\t\tlet err = new Error(\"The root domain must not have an Address.\");\r\n\t\t\terr.name = ERROR_ROOT_ADDRESS;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\t\r\n\t\tif (detach) {\r\n\t\t\tthis.parent.subdomains.splice(this.parent.subdomains.indexOf(this), 1);\r\n\t\t}\r\n\r\n\t\tthis.parent = parent;\r\n\r\n\t\tif (revalidateLabel) {\r\n\t\t\tthis.setLabel(this.label);\r\n\t\t}\r\n\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Sets the address of this Domain, making it a hostname.\r\n\t * @param  {IP} address The address to be set. If the parent is undefined, this must be undefined as well.\r\n\t */\r\n\tpublic setAddress(address: IP): void {\r\n\t\tif (address && !this.parent) {\r\n\t\t\tlet err = new Error(\"The root domain must not have an Address.\");\r\n\t\t\terr.name = ERROR_ROOT_ADDRESS;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\tthis.address = address;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this Domain's subdomains.\r\n\t */\r\n\tpublic setSubdomains(subdomains: Domain[]) {\r\n\t\tthis.subdomains = subdomains;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this Domain's label.\r\n\t */\r\n\tpublic getLabel(): string {\r\n\t\treturn this.label;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this Domain's parent domain.\r\n\t */\r\n\tpublic getParent(): Domain {\r\n\t\treturn this.parent;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this Domain's address if this is a hostname.\r\n\t */\r\n\tpublic getAddress(): IP {\r\n\t\treturn this.address;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns this Domain's subdomains.\r\n\t */\r\n\tpublic getSubdomains(): Domain[] {\r\n\t\treturn this.subdomains;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns a subdomain, given its label. If not found, returns undefined.\r\n\t * @param  {string} label The label of the Domain to be searched.\r\n\t */\r\n\tpublic getSubdomain(label: string): Domain {\r\n\t\t\r\n\t\tfor (let i = 0; i < this.subdomains.length; i++) {\r\n\t\t\tconst sub = this.subdomains[i];\r\n\t\t\tif (sub.label === label) {\r\n\t\t\t\treturn sub;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a string representation of this Domain. Similar to getLabel(), except it returns \".\" if this is a root domain.\r\n\t */\r\n\tpublic toString(): string {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn \".\";\r\n\t\t}\r\n\t\treturn this.getLabel();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the full name of this Domain, recursively adding parents.\r\n\t */\r\n\tpublic getFullName(): string {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tif (!this.parent.parent) {\r\n\t\t\treturn this.label;\r\n\t\t}\r\n\t\treturn this.label + \".\" + this.parent.getFullName();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the parts of a complete domain (such as the full domain, top-level domain etc), as strings. Adds \"www\" if missing.\r\n\t */\r\n\tpublic getDomainParts(): { full: string, tld: string, dest: string, inter: string, admin: string } {\r\n\r\n\t\tlet domainParts = this.getFullName().split(\".\");\r\n\r\n\t\tif (domainParts.length < 2) {\r\n\t\t\tlet error = Error();\r\n\t\t\terror.name = ERROR_SMALL_DOMAIN;\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tlet fullStr = \"\";\r\n\t\tlet tldStr = domainParts[domainParts.length - 1];\r\n\t\tlet destStr = domainParts[0];\r\n\t\tlet interStr = \"\";\r\n\t\tlet adminStr = \"\";\r\n\r\n\t\tif (domainParts.length === 2 || destStr !== \"www\") {\r\n\t\t\tdomainParts.unshift(\"www\");\r\n\t\t\tdestStr = \"www\";\r\n\t\t}\r\n\t\t\r\n\t\tif (domainParts.length > 3) {\r\n\t\t\tlet middle = \"\";\r\n\t\t\tfor (let i = 2; i < domainParts.length - 1; i++) middle += domainParts[i] + ((i < domainParts.length - 2) ? \".\" : \"\");\r\n\t\t\tdomainParts = [domainParts[0], domainParts[1], middle, domainParts[domainParts.length - 1]];\r\n\t\t\tinterStr = middle;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < domainParts.length; i++) fullStr += domainParts[i] + ((i < domainParts.length - 1) ? \".\" : \"\");\r\n\t\tadminStr = domainParts[1];\r\n\r\n\t\treturn { full: fullStr, tld: tldStr, dest: destStr, inter: interStr, admin: adminStr };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a neatly formatted string showing the whole tree. Raw method.\r\n\t * @param  {boolean} first Whether this is the root of the tree.\r\n\t * @param  {string} prefix The prefix of this line of the tree.\r\n\t * @param  {boolean} isTail Whether this line is the tail of the tree.\r\n\t */\r\n\tprivate getTreeStrRaw(first: boolean, prefix: string, isTail: boolean): string {\r\n\r\n\t\tlet str = (first ? \"\" : (prefix + (isTail ? \"└── \" : \"├── \"))) + this.toString() + (this.address ? ` <${this.address.toString(true)}>` : \"\") + \"\\n\";\r\n\t\r\n\t\tfor (let i = 0; i < this.subdomains.length - 1; i++) {\r\n\t\t\tstr += this.subdomains[i].getTreeStrRaw(false, (first ? \"\" : (prefix + (isTail ? \"    \" : \"│   \"))), false);\r\n\t\t}\r\n\r\n\t\tif (this.subdomains.length > 0) {\r\n\t\t\tstr += this.subdomains[this.subdomains.length - 1].getTreeStrRaw(false, (first ? \"\" : (prefix + (isTail ? \"    \" : \"│   \"))), true);\r\n\t\t}\r\n\r\n\t\treturn str;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a neatly formatted string showing the whole tree.\r\n\t */\r\n\tpublic getTreeStr(): string {\r\n\t\treturn this.getTreeStrRaw(true, \"\", true);\r\n\t}\r\n\r\n}","import React, { Component, RefObject } from \"react\";\r\nimport { clamp } from \"../wireworks/utils/math\";\r\nimport { roundRect } from \"../wireworks/utils/canvas\";\r\n\r\n/**\r\n * A 2D point.\r\n */\r\nexport type Point = { x: number, y: number }\r\n\r\n/**\r\n * Interface representing anything that can be drawn on the canvas.\r\n */\r\nexport interface Drawable {\r\n\r\n\tvisible: boolean;\r\n\tdraw(ctx: CanvasRenderingContext2D): void;\r\n\r\n}\r\n\r\n/**\r\n * A Drawable image that has special connecting points. Used to represent servers and clients in the canvas.\r\n */\r\nexport class Node implements Drawable {\r\n\t\r\n\tpublic visible = true;\r\n\tpublic pos: Point;\r\n\tpublic margins: { l: number, t: number, r: number, b: number };\r\n\tpublic width: number;\r\n\tpublic height: number;\r\n\tpublic image: HTMLImageElement;\r\n\tpublic connectorOffset: number;\r\n\r\n\tconstructor(pos: Point, width: number, heigth: number, margins: { l: number, t: number, r: number, b: number }, image: HTMLImageElement, connectorOffset: number = 0.25) {\r\n\t\tthis.pos = pos;\r\n\t\tthis.width = width;\r\n\t\tthis.height = heigth;\r\n\t\tthis.image = image;\r\n\t\tthis.margins = margins;\r\n\t\tthis.connectorOffset = connectorOffset;\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\t\r\n\t\tif (this.visible)\r\n\t\t\tctx.drawImage(this.image, this.pos.x - (this.width / 2), this.pos.y - (this.height / 2), this.width, this.height);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the 4 vertices of this rectangular Node. A, B, C and D represent the vertices clockwise, starting from the top left corner.\r\n\t */\r\n\tpublic getVertices(): {a: Point, b: Point, c: Point, d: Point} {\r\n\r\n\t\tlet x = this.pos.x;\r\n\t\tlet y = this.pos.y;\r\n\t\tlet w2 = this.width / 2;\r\n\t\tlet h2 = this.height / 2;\r\n\r\n\t\tlet a = { x: x - w2, y: y - h2 };\r\n\t\tlet b = { x: x + w2, y: y - h2 };\r\n\t\tlet c = { x: x + w2, y: y + h2 };\r\n\t\tlet d = { x: x - w2, y: y + h2 };\r\n\r\n\t\treturn {a,b,c,d};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an exit point of this Node, given the side.\r\n\t * @param side Which side to get the point from.\r\n\t */\r\n\tpublic getOutput(side: \"top\" | \"bottom\" | \"left\" | \"right\"): Point {\r\n\r\n\t\tlet p = this.getVertices();\r\n\t\tlet fw = this.connectorOffset * this.width;\r\n\t\tlet fh = this.connectorOffset * this.height;\r\n\r\n\t\tswitch (side) {\r\n\r\n\t\t\tcase \"top\":\r\n\t\t\t\treturn { x: p.a.x + fw, y: p.a.y - this.margins.t };\r\n\t\t\tcase \"bottom\":\r\n\t\t\t\treturn { x: p.c.x - fw, y: p.c.y + this.margins.b };\r\n\t\t\tcase \"left\":\r\n\t\t\t\treturn { x: p.d.x - this.margins.l, y: p.d.y - fh };\r\n\t\t\tcase \"right\":\r\n\t\t\t\treturn { x: p.c.x + this.margins.r, y: p.b.y + fh };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an entry point of this Node, given the side.\r\n\t * @param side Which side to get the point from.\r\n\t */\r\n\tpublic getInput(side: \"top\" | \"bottom\" | \"left\" | \"right\"): Point {\r\n\r\n\t\tlet p = this.getVertices();\r\n\t\tlet fw = this.connectorOffset * this.width;\r\n\t\tlet fh = this.connectorOffset * this.height;\r\n\r\n\t\tswitch (side) {\r\n\r\n\t\t\tcase \"top\":\r\n\t\t\t\treturn { x: p.b.x - fw, y: p.a.y - this.margins.t };\r\n\t\t\tcase \"bottom\":\r\n\t\t\t\treturn { x: p.d.x + fw, y: p.c.y + this.margins.b };\r\n\t\t\tcase \"left\":\r\n\t\t\t\treturn { x: p.d.x - this.margins.l, y: p.a.y + fh };\r\n\t\t\tcase \"right\":\r\n\t\t\t\treturn { x: p.c.x + this.margins.r, y: p.c.y - fh };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A Drawable text box.\r\n */\r\nexport class Label implements Drawable {\r\n\t\r\n\tpublic visible = true;\r\n\tpublic pos: Point;\r\n\tpublic text: string;\r\n\tpublic textColor: string;\r\n\tpublic backgroundColor: string;\r\n\tpublic padding: number;\r\n\tpublic borderRadius: number;\r\n\tpublic font: string;\r\n\tpublic textHeight: number;\r\n\tpublic lineDistance: number;\r\n\tpublic textAlign: \"left\"|\"center\"|\"right\";\r\n\r\n\tconstructor(pos: Point, text: string, textColor: string, backgroundColor: string, padding: number, borderRadius: number, font: string, textHeight: number, textAlign:\"left\"|\"center\"|\"right\" = \"left\", lineDistance: number = 3) {\r\n\t\tthis.pos = pos;\r\n\t\tthis.text = text;\r\n\t\tthis.textColor = textColor;\r\n\t\tthis.backgroundColor = backgroundColor;\r\n\t\tthis.padding = padding;\r\n\t\tthis.borderRadius = borderRadius;\r\n\t\tthis.font = font;\r\n\t\tthis.textHeight = textHeight;\r\n\t\tthis.lineDistance = lineDistance;\r\n\t\tthis.textAlign = textAlign;\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\t\r\n\t\tif (this.visible) {\r\n\t\t\tlet width = this.getRealWidth(ctx);\r\n\t\t\tlet height = this.getRealHeight();\r\n\r\n\t\t\tctx.fillStyle = this.backgroundColor;\r\n\t\t\troundRect(ctx, this.pos.x - (width / 2), this.pos.y - (height / 2), width, height, this.borderRadius).fill();\r\n\r\n\t\t\tctx.fillStyle = this.textColor;\r\n\t\t\tctx.font = this.font;\r\n\r\n\t\t\tlet lines = this.text.split(\"\\n\");\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < lines.length; i++) {\r\n\t\t\t\tconst line = lines[i];\r\n\t\t\t\tconst lineWidth = ctx.measureText(line).width + (2*this.padding);\r\n\t\t\t\tlet spacer = width-lineWidth;\r\n\r\n\t\t\t\tswitch (this.textAlign) {\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tspacer = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"center\":\r\n\t\t\t\t\t\tspacer /= 2;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tctx.fillText(line, this.pos.x + this.padding - (width / 2) + spacer, this.pos.y + this.padding + ((i+1)*this.textHeight) + ((i)*this.lineDistance) - (height / 2));\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\t/**\r\n\t * Returns the width of this Label, considering the width of the text and the padding.\r\n\t */\r\n\tpublic getRealWidth(ctx: CanvasRenderingContext2D): number {\r\n\t\t\r\n\t\tlet biggest = 0;\r\n\t\tctx.font = this.font;\r\n\r\n\t\tlet lines = this.text.split('\\n');\r\n\t\t\r\n\t\tfor (let i = 0; i < lines.length; i++) {\r\n\t\t\tconst line = lines[i];\r\n\t\t\tlet w = ctx.measureText(line).width + (2*this.padding);\r\n\t\t\tif (w > biggest) biggest = w;\r\n\t\t}\r\n\r\n\t\treturn biggest;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the height of this Label, considering the height of the text and the padding.\r\n\t */\r\n\tpublic getRealHeight(): number {\r\n\t\t// return this.textHeight + (2*this.padding);\r\n\t\tlet lines = this.text.split('\\n').length;\r\n\t\treturn (lines * this.textHeight) + ((lines-1) * this.lineDistance) + (2*this.padding);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A Drawable line that connects the outputs and inputs of Nodes.\r\n */\r\nexport class Line implements Drawable {\r\n\r\n\tpublic visible = true;\r\n\tpublic from: Node;\r\n\tpublic to: Node;\r\n\tpublic time: number;\r\n\tpublic strokeStyle: string;\r\n\tpublic lineWidth: number;\r\n\tpublic label: Label;\r\n\r\n\tconstructor(from: Node, to: Node, time: number, strokeStyle: string, strokeWidth: number) {\r\n\r\n\t\tthis.from = from;\r\n\t\tthis.to = to;\r\n\t\tthis.time = time;\r\n\t\tthis.strokeStyle = strokeStyle;\r\n\t\tthis.lineWidth = strokeWidth;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the start point of this Line.\r\n\t */\r\n\tpublic getStartPoint(): Point {\r\n\r\n\t\tlet offX = this.from.pos.x - this.to.pos.x;\r\n\t\tlet offY = this.from.pos.y - this.to.pos.y;\r\n\r\n\t\tif (Math.abs(offX) > Math.abs(offY)) {\r\n\t\t\tif (offX > 0) {\r\n\t\t\t\treturn this.from.getOutput(\"left\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.from.getOutput(\"right\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (offY > 0) {\r\n\t\t\t\treturn this.from.getOutput(\"top\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.from.getOutput(\"bottom\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the end point of this Line.\r\n\t */\r\n\tpublic getEndPoint(): Point {\r\n\r\n\t\tlet offX = this.from.pos.x - this.to.pos.x;\r\n\t\tlet offY = this.from.pos.y - this.to.pos.y;\r\n\r\n\t\tif (Math.abs(offX) > Math.abs(offY)) {\r\n\t\t\tif (offX > 0) {\r\n\t\t\t\treturn this.to.getInput(\"right\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.to.getInput(\"left\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (offY > 0) {\r\n\t\t\t\treturn this.to.getInput(\"bottom\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.to.getInput(\"top\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current end point of this Line in a point of time.\r\n\t * @param fromPoint The starting point.\r\n\t * @param toPoint The end point to be reached.\r\n\t */\r\n\tpublic getCurrentEndPoint(fromPoint = this.getStartPoint(), toPoint = this.getEndPoint()): Point {\r\n\t\treturn {x: fromPoint.x + (this.time * (toPoint.x - fromPoint.x)), y: fromPoint.y + (this.time * (toPoint.y - fromPoint.y))};\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\r\n\t\tif (this.visible){\r\n\r\n\t\t\tlet fromPoint = this.getStartPoint();\r\n\t\t\tlet currEnd = this.getCurrentEndPoint(fromPoint);\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.strokeStyle = this.strokeStyle;\r\n\t\t\tctx.lineWidth = this.lineWidth;\r\n\t\t\tctx.lineCap = \"round\";\r\n\r\n\t\t\tctx.moveTo(fromPoint.x, fromPoint.y);\r\n\t\t\tctx.lineTo(currEnd.x, currEnd.y);\r\n\t\t\tctx.stroke();\r\n\r\n\t\t\tif (this.label) {\t\t\t\t\t\t\t\t\r\n\t\t\t\tthis.label.pos = currEnd;\r\n\t\t\t\tthis.label.draw(ctx);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A helper data structure used to represent the connection between two Nodes when creating a line. \r\n */\r\nexport type NodeConnection = {\r\n\tfrom: Node, \r\n\tto: Node, \r\n\tstrokeStyle: string, \r\n\tlineWidth: number, \r\n\tspeed: number, \r\n\tlabelText: string | undefined \r\n};\r\n\r\nexport interface FlowCanvasProps {\r\n\twidth: number,\r\n\theight: number,\r\n\tfixedDeltaTime: number\r\n};\r\n\r\nclass FlowCanvas extends Component<FlowCanvasProps> {\r\n\r\n\t/**\r\n\t * The list of elements drawn to the canvas.\r\n\t */\r\n\tprivate drawables: Drawable[] = [];\r\n\r\n\t/**\r\n\t * The reference to the canvas.\r\n\t */\r\n\tprotected canvas: RefObject<HTMLCanvasElement>;\t\t\r\n\t\r\n\t/**\r\n\t * The intervals of each line being drawn.\r\n\t */\r\n\tprotected lineIntervals: NodeJS.Timeout[] = [];\r\n\r\n\t/**\r\n\t * Adds a drawable to this FlowCanvas.\r\n\t * @param drawable The drawable to be added.\r\n\t */\r\n\tpublic addDrawable = (drawable: Drawable) => {\r\n\t\tthis.drawables.push(drawable);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a drawable from this FlowCanvas.\r\n\t * @param drawable The drawable to be removed.\r\n\t */\r\n\tpublic removeDrawable = (drawable: Drawable): boolean => {\r\n\t\tlet index = this.drawables.indexOf(drawable);\t\t\r\n\t\tif (index < 0) return false;\r\n\t\tthis.drawables.splice(index, 1);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all drawables from this FlowCanvas.\r\n\t */\r\n\tpublic clearDrawables = () => {\r\n\t\tthis.drawables = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the list of drawables of this FlowCanvas.\r\n\t */\r\n\tpublic getDrawables = (): Drawable[] => {\r\n\t\treturn this.drawables;\r\n\t}\r\n\r\n\t/**\r\n\t * Stops all line animations.\r\n\t */\r\n\tpublic stopLineAnimations = () => {\r\n\t\tfor (let i = 0; i < this.lineIntervals.length; i++) {\r\n\t\t\tclearInterval(this.lineIntervals[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Connects two Nodes with a Line, drawing it over time, given a speed. \r\n\t * @param from The Node to start the Line from.\r\n\t * @param to The Node to get the Line to.\r\n\t * @param strokeStyle The stroke style of the Line.\r\n\t * @param lineWidth The line width.\r\n\t * @param speed The speed of the Line being drawn, in pixels per second.\r\n\t * @param labelText The text of the Line's label.\r\n\t * @param callback A callback for when the Line finishes drawing.\r\n\t */\r\n\tpublic connectNodes = (from: Node, to: Node, strokeStyle: string, lineWidth: number, speed: number, labelText: string|undefined, callback: Function = undefined): Line => {\r\n\r\n\t\tlet line = new Line(from, to, 0, strokeStyle, lineWidth);\r\n\r\n\t\tif (labelText) {\r\n\t\t\tline.label = new Label({x:0,y:0}, labelText, \"#000000\", strokeStyle, 5, 10, \"12px Monserrat, sans-serif\", 10);\r\n\t\t}\r\n\t\tthis.addDrawable(line);\r\n\r\n\t\tlet prevTime = Date.now();\r\n\t\tlet scope: FlowCanvas = this;\r\n\r\n\t\tlet interval = setInterval(function(){\r\n\r\n\t\t\tlet deltaTime = Date.now() - prevTime;\r\n\t\t\tprevTime = Date.now();\r\n\r\n\t\t\tlet startPoint = line.getStartPoint();\r\n\t\t\tlet endPoint = line.getEndPoint();\r\n\r\n\t\t\tlet distance = Math.sqrt(\r\n\t\t\t\t((startPoint.x - endPoint.x)*(startPoint.x - endPoint.x)) + ((startPoint.y - endPoint.y)*(startPoint.y - endPoint.y))\r\n\t\t\t);\r\n\r\n\t\t\tline.time = clamp(line.time + ((deltaTime/1000) * (speed/distance)), 0, 1);\r\n\r\n\t\t\tscope.draw();\r\n\t\t\t\r\n\t\t\tif (line.time >= 1) {\r\n\r\n\t\t\t\tline.time = 1;\r\n\r\n\t\t\t\tline.label = undefined;\r\n\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t\t\r\n\t\t\t\tscope.draw();\r\n\t\t\t}\r\n\r\n\t\t}, this.props.fixedDeltaTime);\r\n\r\n\t\tthis.lineIntervals.push(interval);\r\n\r\n\t\treturn line;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Connects multiple nodes, in succession.\r\n\t * @param connections The list of connections to be made.\r\n\t * @param callback What do to when the last line finishes being drawn.\r\n\t */\r\n\tpublic connectMultipleNodes = (connections: NodeConnection[], callback: Function = undefined) => {\r\n\r\n\t\tlet iterativeConnect = (index: number) => {\r\n\r\n\t\t\tif(index < connections.length){\r\n\t\t\t\tlet connection = connections[index];\r\n\t\t\t\tindex++;\r\n\t\t\t\t\t\t\r\n\t\t\t\tthis.connectNodes(connection.from, connection.to, connection.strokeStyle, connection.lineWidth, connection.speed, connection.labelText, function () {\r\n\t\t\t\t\titerativeConnect(index);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\titerativeConnect(0);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the position of a Node or Label when put aligned to another one.\r\n\t * @param from The Node or Label to be positioned relative to.\r\n\t * @param to The Node or Label to be positioned.\r\n\t * @param positionY How to align the Node or Label vertically. Can be \"top\", \"center\" or \"bottom\".\r\n\t * @param positionX How to align the Node or Label horizontally. Can be \"left\", \"center\" or \"right\".\r\n\t */\r\n\tpublic getAlignedPoint = (from: Node|Label, to: Node|Label, positionY: \"top\"|\"center\"|\"bottom\", positionX: \"left\"|\"center\"|\"right\"): Point => {\r\n\r\n\t\tlet offX: number;\t\r\n\t\tlet offY: number;\t\r\n\r\n\t\tswitch (positionX) {\r\n\t\t\tcase \"left\": offX = -0.5; break;\r\n\t\t\tcase \"center\": offX = 0; break;\r\n\t\t\tcase \"right\": offX = 0.5; break;\r\n\t\t}\r\n\r\n\t\tswitch (positionY) {\r\n\t\t\tcase \"top\": offY = -0.5; break;\r\n\t\t\tcase \"center\": offY = 0; break;\r\n\t\t\tcase \"bottom\": offY = 0.5; break;\r\n\t\t}\r\n\r\n\t\tlet fromWidth: number;\r\n\t\tlet fromHeight: number;\r\n\t\tlet toWidth: number;\r\n\t\tlet toHeight: number;\r\n\r\n\t\tif (from instanceof Node) {\r\n\t\t\tfromWidth = from.width;\t\t\r\n\t\t\tfromHeight = from.height;\t\t\r\n\t\t}\r\n\t\tif (to instanceof Node) {\r\n\t\t\ttoWidth = to.width;\t\t\r\n\t\t\ttoHeight = to.height;\t\t\r\n\t\t}\r\n\t\tif (from instanceof Label) {\r\n\t\t\tfromWidth = from.getRealWidth(this.canvas.current.getContext(\"2d\"));\t\t\r\n\t\t\tfromHeight = from.getRealHeight();\t\t\r\n\t\t}\r\n\t\tif (to instanceof Label) {\r\n\t\t\ttoWidth = to.getRealWidth(this.canvas.current.getContext(\"2d\"));\t\t\r\n\t\t\ttoHeight = to.getRealHeight();\t\t\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tx: from.pos.x + (offX * (fromWidth + toWidth)),\r\n\t\t\ty: from.pos.y + (offY * (fromHeight + toHeight))\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t* Renders all the Drawables to the canvas.\r\n\t*/\r\n\tpublic draw = () => {\r\n\r\n\t\tlet ctx = this.canvas.current.getContext(\"2d\");\r\n\r\n\t\tctx.clearRect(0, 0, this.props.width, this.props.height);\r\n\r\n\t\tif (this.drawables) {\r\n\t\t\tfor (let i = 0; i < this.drawables.length; i++) {\r\n\t\t\t\tthis.drawables[i].draw(ctx);\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.canvas = React.createRef();\r\n\t}\t\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.stopLineAnimations();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <canvas width={this.props.width} height={this.props.height} ref={this.canvas} className=\"flow-canvas\"></canvas>;\r\n\t}\r\n\r\n}\r\n\r\nexport default FlowCanvas;","/**\r\n * Draws a rounded rectangle in the canvas.\r\n * @param x The x coordinate of the rectangle.\r\n * @param y The y coordinate of the rectangle.\r\n * @param w The width of the rectangle.\r\n * @param h The height of the rectangle.\r\n * @param r The radius of the border.\r\n */\r\nexport function roundRect(ctx: CanvasRenderingContext2D, x: number, y: number, w: number, h: number, r: number): CanvasRenderingContext2D {\r\n\tif (w < 2 * r) r = w / 2;\r\n\tif (h < 2 * r) r = h / 2;\r\n\tctx.beginPath();\r\n\tctx.moveTo(x + r, y);\r\n\tctx.arcTo(x + w, y, x + w, y + h, r);\r\n\tctx.arcTo(x + w, y + h, x, y + h, r);\r\n\tctx.arcTo(x, y + h, x, y, r);\r\n\tctx.arcTo(x, y, x + w, y, r);\r\n\tctx.closePath();\r\n\treturn ctx;\r\n}","// DNSFlow\r\n// +=========================+\r\n// Author: Henrique Colini\r\n// Version: 2.0 (2019-08-30)\r\n\r\nimport React, { Component, RefObject } from \"react\";\r\n\r\nimport FlowCanvas, { Node, Label, NodeConnection, Line } from \"../../../components/FlowCanvas\";\r\nimport ErrorBox from \"../../../components/ErrorBox\";\r\nimport { Domain, ERROR_INVALID_LABEL, ERROR_FULL_NAME_RANGE, ERROR_SMALL_DOMAIN } from \"../../../wireworks/networking/layers/layer-5/domain\";\r\n\r\n// Images used in the canvas.\r\n\r\nconst serverImage = new Image();\r\nconst clientImage = new Image();\r\n\r\nimport(\"src/images/layers/5/client.png\").then(res => clientImage.src = res.default);\r\nimport(\"src/images/layers/5/server.png\").then(res => serverImage.src = res.default);\r\n\r\n// Wire colors.\r\n\r\nconst greenWire = \"#a9cc78\";\r\nconst redWire = \"#db938a\";\r\nconst blueWire = \"#9ac9ed\";\r\nconst yellowWire = \"#e5c16e\";\r\n\r\n// Simulation speed constants.\r\n\r\nconst verySlowSpeed = 10;\r\nconst slowSpeed = 25;\r\nconst normalSpeed = 100;\r\nconst fastSpeed = 400;\r\nconst veryFastSpeed = 600;\r\n\r\ntype Speed = \"veryslow\" | \"slow\" | \"normal\" | \"fast\" | \"veryfast\";\r\n\r\n// Constants representing the mode of a DNS server.\r\n\r\nconst ITERATIVE = \"iterative\";\r\nconst RECURSIVE = \"recursive\";\r\n\r\ntype ServerMode = \"iterative\" | \"recursive\";\r\n\r\n/**\r\n * A data structure that represents servers and hosts.\r\n */\r\ntype DNSMachine = {\r\n\tname: string,\r\n\tnode: Node,\r\n\tlabel: Label,\r\n\tmode: ServerMode\r\n};\r\n\r\n// +==============================================+\r\n\r\nclass DnsFlow extends Component {\r\n\r\n\t/** The reference to the domain input. */\r\n\tprivate txtDomain: RefObject<HTMLInputElement>;\r\n\t/** The reference to the DnsFlowCanvas. */\r\n\tprivate dnsCanvas: RefObject<DnsFlowCanvas>;\r\n\t/** The reference to the speed select. */\r\n\tprivate selectSpeed: RefObject<HTMLSelectElement>;\r\n\t/** The reference to the Local server mode select. */\r\n\tprivate selectLocalMode: RefObject<HTMLSelectElement>;\r\n\t/** The reference to the Root server mode select. */\r\n\tprivate selectRootMode: RefObject<HTMLSelectElement>;\r\n\t/** The reference to the TLD server mode select. */\r\n\tprivate selectTldMode: RefObject<HTMLSelectElement>;\r\n\t/** The reference to the Intermediary server mode select. */\r\n\tprivate selectInterMode: RefObject<HTMLSelectElement>;\r\n\r\n\tstate = {\r\n\t\terrorMessage: null as string,\r\n\t\tdomain: undefined as Domain,\r\n\t\tspeed: \"normal\" as Speed,\r\n\t\tlocalMode: \"recursive\" as ServerMode,\r\n\t\trootMode: \"iterative\" as ServerMode,\r\n\t\ttldMode: \"iterative\" as ServerMode,\r\n\t\tinterMode: \"iterative\" as ServerMode\r\n\t}\r\n\r\n\t/**\r\n\t * Runs the simulation.\r\n\t */\r\n\tpublic run = () => {\r\n\r\n\t\tthis.setState({errorMessage: null});\r\n\t\tlet errStr: string = undefined;\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet fullName = this.txtDomain.current.value;\r\n\t\t\t\r\n\t\t\tif (fullName === \"localhost\") {\r\n\t\t\t\terrStr = \"Você não pode usar esse nome.\";\r\n\t\t\t\tthrow Error();\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet tmpDomain = Domain.extractDomain(new Domain(\".\", undefined), fullName);\t\r\n\t\t\t\t\r\n\t\t\t\tthis.setState(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdomain: tmpDomain,\r\n\t\t\t\t\t\tspeed: this.selectSpeed.current.value,\r\n\t\t\t\t\t\tlocalMode: this.selectLocalMode.current.value,\r\n\t\t\t\t\t\trootMode: this.selectRootMode.current.value,\r\n\t\t\t\t\t\ttldMode: this.selectTldMode.current.value,\r\n\t\t\t\t\t\tinterMode: this.selectInterMode.current.value,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tthis.dnsCanvas.current.run\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\r\n\t\t\tif (!errStr) {\r\n\r\n\t\t\t\tswitch (error.name) {\r\n\t\t\t\t\tcase ERROR_INVALID_LABEL:\r\n\t\t\t\t\t\terrStr = \"Esse domínio possui um nome inválido.\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ERROR_FULL_NAME_RANGE:\r\n\t\t\t\t\t\terrStr = \"Esse domínio possui um nome grande demais.\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ERROR_SMALL_DOMAIN:\r\n\t\t\t\t\t\terrStr = \"Você deve inserir um domínio com mais partes.\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\terrStr = \"Erro desconhecido (\" + error.name + \").\"\r\n\t\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({errorMessage: \"Entrada inválida. \" + errStr});\r\n\r\n\t\t}\r\n\t}\t\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.txtDomain = React.createRef();\r\n\t\tthis.dnsCanvas = React.createRef();\r\n\t\tthis.selectSpeed = React.createRef();\r\n\t\tthis.selectLocalMode = React.createRef();\r\n\t\tthis.selectRootMode = React.createRef();\r\n\t\tthis.selectTldMode = React.createRef();\r\n\t\tthis.selectInterMode = React.createRef();\r\n\t}\t\r\n\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<main>\r\n\t\t\t\t<div className=\"hbox\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label htmlFor=\"domain\">Domínio</label>\r\n\t\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"domain\" ref={this.txtDomain} onKeyDown={(ev) => {if(ev.key===\"Enter\")this.run()}} placeholder=\"www.exemplo.com.br\"/>\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label htmlFor=\"speed\">Velocidade</label>\r\n\t\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t\t<select name=\"speed\" id=\"speed\" ref={this.selectSpeed} defaultValue=\"normal\">\r\n\t\t\t\t\t\t\t\t<option value=\"veryslow\">Muito Lento</option>\r\n\t\t\t\t\t\t\t\t<option value=\"slow\">Lento</option>\r\n\t\t\t\t\t\t\t\t<option value=\"normal\">Normal</option>\r\n\t\t\t\t\t\t\t\t<option value=\"fast\">Rápido</option>\r\n\t\t\t\t\t\t\t\t<option value=\"veryfast\">Muito Rápido</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t<button onClick={this.run}>Visualizar</button>\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<ErrorBox errorMessage={this.state.errorMessage}/>\r\n\r\n\t\t\t\t<DnsFlowCanvas ref={this.dnsCanvas} domain={this.state.domain} speed={this.state.speed} localMode={this.state.localMode} rootMode={this.state.rootMode} tldMode={this.state.tldMode} interMode={this.state.interMode} />\r\n\r\n\t\t\t\t<div className=\"hbox\">\r\n\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label>Local</label>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<select id=\"local_mode\" ref={this.selectLocalMode} defaultValue=\"recursive\">\r\n\t\t\t\t\t\t\t\t<option value=\"iterative\">Iterativo</option>\r\n\t\t\t\t\t\t\t\t<option value=\"recursive\">Recursivo</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label>Root</label>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<select id=\"root_mode\" ref={this.selectRootMode} defaultValue=\"iterative\">\r\n\t\t\t\t\t\t\t\t<option value=\"iterative\">Iterativo</option>\r\n\t\t\t\t\t\t\t\t<option value=\"recursive\">Recursivo</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label>TLD</label>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<select id=\"tld_mode\" ref={this.selectTldMode} defaultValue=\"iterative\">\r\n\t\t\t\t\t\t\t\t<option value=\"iterative\">Iterativo</option>\r\n\t\t\t\t\t\t\t\t<option value=\"recursive\">Recursivo</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label>Intermediários</label>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<select id=\"inter_mode\" ref={this.selectInterMode} defaultValue=\"iterative\">\r\n\t\t\t\t\t\t\t\t<option value=\"iterative\">Iterativos</option>\r\n\t\t\t\t\t\t\t\t<option value=\"recursive\">Recursivos</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DnsFlow;\r\n\r\ninterface DnsFlowCanvasProps {\r\n\tdomain: Domain,\r\n\tspeed: Speed,\r\n\tlocalMode: ServerMode,\r\n\trootMode: ServerMode,\r\n\ttldMode: ServerMode,\r\n\tinterMode: ServerMode\r\n}\r\n\r\n/**\r\n * A component representing the DNSFlow FlowCanvas.\r\n */\r\nclass DnsFlowCanvas extends Component<DnsFlowCanvasProps> {\r\n\r\n\t/** The reference to the FlowCanvas. */\r\n\tprivate flowCanvas: RefObject<FlowCanvas>;\r\n\t/** The origin client. */\r\n\tprivate client: DNSMachine;\r\n\t/** The local server. */\r\n\tprivate local: DNSMachine;\r\n\t/** The root server. */\r\n\tprivate root: DNSMachine;\r\n\t/** The TLD server. */\r\n\tprivate tld: DNSMachine;\r\n\t/** The intermediary server. */\r\n\tprivate inter: DNSMachine;\r\n\t/** The administrative server. */\r\n\tprivate admin: DNSMachine;\r\n\t/** The destination client. */\r\n\tprivate dest: DNSMachine;\r\n\t/** The configurations for the line maker. */\r\n\tprivate makerConfigs = {\r\n\t\twidth: 0,\r\n\t\tspeed: 0\r\n\t}\r\n\r\n\t/**\r\n\t * Runs the simulation.\r\n\t */\r\n\tpublic run = () => {\r\n\r\n\t\tconst drawables = this.flowCanvas.current.getDrawables();\r\n\t\tlet drawIndex = drawables.length;\r\n\r\n\t\twhile(drawIndex--) {\r\n\t\t\tif(drawables[drawIndex] instanceof Line) {\r\n\t\t\t\tthis.flowCanvas.current.removeDrawable(drawables[drawIndex]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.flowCanvas.current.stopLineAnimations();\r\n\r\n\t\tthis.makerConfigs.width = 10;\r\n\r\n\t\tswitch (this.props.speed) {\r\n\t\t\tcase \"veryslow\": this.makerConfigs.speed = verySlowSpeed; break;\r\n\t\t\tcase \"slow\": this.makerConfigs.speed = slowSpeed; break;\r\n\t\t\tcase \"normal\": this.makerConfigs.speed = normalSpeed; break;\r\n\t\t\tcase \"fast\": this.makerConfigs.speed = fastSpeed; break;\r\n\t\t\tcase \"veryfast\": this.makerConfigs.speed = veryFastSpeed; break;\r\n\t\t}\r\n\r\n\t\tlet cons = this.calculateConnections(this.props.domain);\r\n\t\t\r\n\t\tthis.flowCanvas.current.connectMultipleNodes(cons.connections, cons.success ? this.onSuccess : this.onFailure);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * What to do when a DNS query ends in success. \r\n\t */\r\n\tpublic onSuccess = () => {\r\n\t\tthis.flowCanvas.current.connectNodes(this.client.node, this.dest.node, blueWire, 10, fastSpeed, undefined);\r\n\t\tthis.flowCanvas.current.connectNodes(this.dest.node, this.client.node, blueWire, 10, fastSpeed, undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * What to do when a DNS query ends in failure.\r\n\t */\r\n\tpublic onFailure = () => {}\r\n\r\n\t/**\r\n\t * Calculates the connections between servers needed in a DNS query. Returns a list of said connections and whether the query was successful.\r\n\t * @param domain The host domain.\r\n\t */\r\n\tpublic calculateConnections = (domain: Domain): { connections: NodeConnection[], success: boolean} => {\r\n\t\t\r\n\t\t\r\n\t\tlet parts = domain.getDomainParts();\r\n\t\tlet connections: NodeConnection[] = [\r\n\t\t\tthis.makeConnection(this.client, this.local, \"request\", parts.full + \"?\")\r\n\t\t];\r\n\t\tlet success = false;\r\n\r\n\t\t// LOCAL returns \".\"\r\n\t\tif (this.local.mode === ITERATIVE) {\r\n\t\t\tconnections.push(this.makeConnection(this.local, this.client, \"partial\", \".\"));\r\n\t\t}\r\n\t\t// LOCAL returns \"www.example.com.br\"\r\n\t\telse if (this.local.mode === RECURSIVE) {\r\n\r\n\t\t\tconnections.push(this.makeConnection(this.local, this.root, \"request\", parts.full + \"?\"));\r\n\r\n\t\t\t// ROOT returns \"br\"\r\n\t\t\tif (this.root.mode === ITERATIVE) {\r\n\r\n\t\t\t\tconnections.push(this.makeConnection(this.root, this.local, \"partial\", parts.tld));\r\n\t\t\t\tconnections.push(this.makeConnection(this.local, this.tld, \"request\", parts.full + \"?\"));\r\n\r\n\t\t\t\t// TLD returns \"com.br\"\r\n\t\t\t\tif (this.tld.mode === ITERATIVE) {\t\t\t\r\n\r\n\t\t\t\t\tif (parts.inter) {\r\n\r\n\t\t\t\t\t\t// INTER returns \"example.com.br\"\r\n\t\t\t\t\t\tif (this.inter.mode === ITERATIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.local, \"partial\", parts.inter + \".\" + parts.tld),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.local, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.local, \"partial\", parts.admin + \".\" + parts.inter + \".\" + parts.tld),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.local, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.local, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// INTER returns \"www.example.com.br\"\r\n\t\t\t\t\t\telse if (this.inter.mode === RECURSIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.local, \"partial\", parts.inter + \".\" + parts.tld),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.local, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.inter, \"full\", parts.full),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.local, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.local, \"partial\", parts.admin + \".\" + parts.tld),\r\n\t\t\t\t\t\t\tthis.makeConnection(this.local, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.local, \"full\", parts.full)\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// TLD returns \"www.example.com.br\"\r\n\t\t\t\telse if (this.tld.mode === RECURSIVE) {\r\n\r\n\t\t\t\t\tif (parts.inter) {\t\t\t\t\t\r\n\t\t\t\t\t\t// INTER returns \"example.com.br\"\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\tif (this.inter.mode === ITERATIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.tld, \"partial\", parts.admin + \".\" + parts.inter + \".\" + parts.tld),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.tld, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// INTER returns \"www.example.com.br\"\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\telse if (this.inter.mode === RECURSIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.inter, \"full\", parts.full),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.tld, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.tld, \"full\", parts.full)\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconnections.push(this.makeConnection(this.tld, this.local, \"full\", parts.full));\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t// ROOT returns \"www.example.com.br\"\r\n\t\t\telse if (this.root.mode === RECURSIVE) {\r\n\r\n\t\t\t\tconnections.push(this.makeConnection(this.root, this.tld, \"request\", parts.full + \"?\"));\r\n\r\n\t\t\t\t// TLD returns \"com.br\"\r\n\t\t\t\tif (this.tld.mode === ITERATIVE) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (parts.inter) {\r\n\r\n\t\t\t\t\t\tconnections.push(this.makeConnection(this.tld, this.root, \"partial\", parts.inter + \".\" + parts.tld));\r\n\r\n\t\t\t\t\t\t// INTER returns \"example.com.br\"\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\tif (this.inter.mode === ITERATIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.root, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.root, \"partial\", parts.admin + \".\" + parts.inter + \".\" + parts.tld),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.root, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.root, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// INTER returns \"www.example.com.br\"\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\telse if (this.inter.mode === RECURSIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.root, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.inter, \"full\", parts.full),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.root, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.root, \"partial\", parts.admin + \".\" + parts.tld),\r\n\t\t\t\t\t\t\tthis.makeConnection(this.root, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.root, \"full\", parts.full)\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// TLD returns \"www.example.com.br\"\r\n\t\t\t\telse if (this.tld.mode === RECURSIVE) {\r\n\r\n\t\t\t\t\tif (parts.inter) {\r\n\t\t\t\t\t\t// INTER returns \"example.com.br\"\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\tif (this.inter.mode === ITERATIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.tld, \"partial\", parts.admin + \".\" + parts.inter + \".\" + parts.tld),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.tld, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// INTER returns \"www.example.com.br\"\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\telse if (this.inter.mode === RECURSIVE) {\r\n\t\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.inter, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.inter, \"full\", parts.full),\r\n\t\t\t\t\t\t\t\tthis.makeConnection(this.inter, this.tld, \"full\", parts.full)\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// ADMIN returns \"www.example.com.br\"\r\n\t\t\t\t\t\tconnections.push(...[\r\n\t\t\t\t\t\t\tthis.makeConnection(this.tld, this.admin, \"request\", parts.full + \"?\"),\r\n\t\t\t\t\t\t\tthis.makeConnection(this.admin, this.tld, \"full\", parts.full)\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconnections.push(this.makeConnection(this.tld, this.root, \"full\", parts.full));\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconnections.push(this.makeConnection(this.root, this.local, \"full\", parts.full));\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconnections.push(this.makeConnection(this.local, this.client, \"full\", parts.full));\r\n\t\t\tsuccess = true;\r\n\t\t}\r\n\r\n\t\treturn { connections: connections, success: success };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates NodeConnections.\r\n\t * @param from What machine to start from.\r\n\t * @param to What machine to go to.\r\n\t * @param kind What kind of connection to create. Must be either \"request\", \"partial\" (responses) or \"full\" (responses).\r\n\t * @param msg What message to carry in the end of the line.\r\n\t */\r\n\tpublic makeConnection = (from: DNSMachine, to: DNSMachine, kind: \"request\" | \"partial\" | \"full\", msg: string): NodeConnection => {\r\n\t\tlet style: string;\r\n\t\tswitch (kind) {\r\n\t\t\tcase (\"request\"): style = yellowWire; break;\r\n\t\t\tcase (\"partial\"): style = redWire; break;\r\n\t\t\tcase (\"full\"): style = greenWire; break;\r\n\t\t}\r\n\t\treturn { from: from.node, to: to.node, strokeStyle: style, lineWidth: this.makerConfigs.width, speed: this.makerConfigs.speed, labelText: msg };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes all drawables, sets up all Nodes and their Labels.\r\n\t */\r\n\tpublic resetCanvas = () => {\r\n\r\n\t\tlet pl = 80; // padding\r\n\t\tlet pr = 80;\r\n\t\tlet pt = 70;\r\n\t\tlet pb = 70;\r\n\r\n\t\tlet w = this.flowCanvas.current.props.width;\r\n\t\tlet h = this.flowCanvas.current.props.height;\r\n\t\t\r\n\t\tthis.client.node = new Node({ x: pl, y: h - pb },           60, 60, {l: 10, t: 10, r: 10, b: 10}, clientImage);\r\n\t\tthis.local.node  = new Node({ x: pl, y: h - pb - 180 },     60, 60, {l: 10, t: 10, r: 10, b: 40}, serverImage);\r\n\t\tthis.root.node   = new Node({ x: pl, y: pt + 80 },          60, 60, {l: 10, t: 10, r: 10, b: 10}, serverImage);\r\n\t\tthis.inter.node  = new Node({ x: w - pr, y: pt + 80 },      60, 60, {l: 10, t: 10, r: 10, b: 10}, serverImage);\r\n\t\tthis.tld.node    = new Node({ x: (w+pl-pr)/2, y: pt },      60, 60, {l: 10, t: 10, r: 10, b: 10}, serverImage);\r\n\t\tthis.admin.node  = new Node({ x: w - pr, y: h - pb - 180 }, 60, 60, {l: 10, t: 10, r: 10, b: 10}, serverImage);\r\n\t\tthis.dest.node   = new Node({ x: w - pr, y: h - pb },       60, 60, {l: 10, t: 10, r: 10, b: 10}, clientImage);\r\n\r\n\t\tthis.client.label = new Label({x: 0, y: 0}, this.client.name, \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 14);\r\n\t\tthis.local.label  = new Label({x: 0, y: 0}, this.local.name,  \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 14);\r\n\t\tthis.root.label   = new Label({x: 0, y: 0}, this.root.name,   \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 14);\r\n\t\tthis.tld.label    = new Label({x: 0, y: 0}, this.tld.name,    \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 14);\r\n\t\tthis.inter.label  = new Label({x: 0, y: 0}, this.inter.name,  \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 14);\r\n\t\tthis.admin.label  = new Label({x: 0, y: 0}, this.admin.name,  \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 14);\r\n\t\tthis.dest.label   = new Label({x: 0, y: 0}, this.dest.name,   \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 14);\r\n\t\t\r\n\t\tthis.client.label.pos = this.flowCanvas.current.getAlignedPoint(this.client.node, this.client.label, \"bottom\", \"center\");\r\n\t\tthis.local.label.pos  = this.flowCanvas.current.getAlignedPoint(this.local.node, this.local.label, \"bottom\", \"center\");\r\n\t\tthis.root.label.pos   = this.flowCanvas.current.getAlignedPoint(this.root.node, this.root.label, \"top\", \"center\");\r\n\t\tthis.tld.label.pos    = this.flowCanvas.current.getAlignedPoint(this.tld.node, this.tld.label, \"top\", \"center\");\r\n\t\tthis.inter.label.pos  = this.flowCanvas.current.getAlignedPoint(this.inter.node, this.inter.label, \"top\", \"center\");\r\n\t\tthis.admin.label.pos  = this.flowCanvas.current.getAlignedPoint(this.admin.node, this.admin.label, \"bottom\", \"center\");\r\n\t\tthis.dest.label.pos   = this.flowCanvas.current.getAlignedPoint(this.dest.node, this.dest.label, \"bottom\", \"center\");\r\n\r\n\t\tthis.flowCanvas.current.clearDrawables();\r\n\r\n\t\tthis.flowCanvas.current.addDrawable(this.client.node);\r\n\t\tthis.flowCanvas.current.addDrawable(this.local.node);\r\n\t\tthis.flowCanvas.current.addDrawable(this.root.node);\r\n\t\tthis.flowCanvas.current.addDrawable(this.inter.node);\r\n\t\tthis.flowCanvas.current.addDrawable(this.admin.node);\r\n\t\tthis.flowCanvas.current.addDrawable(this.dest.node);\r\n\t\tthis.flowCanvas.current.addDrawable(this.tld.node);\r\n\r\n\t\tthis.flowCanvas.current.addDrawable(this.client.label);\r\n\t\tthis.flowCanvas.current.addDrawable(this.local.label);\r\n\t\tthis.flowCanvas.current.addDrawable(this.root.label);\r\n\t\tthis.flowCanvas.current.addDrawable(this.inter.label);\r\n\t\tthis.flowCanvas.current.addDrawable(this.admin.label);\r\n\t\tthis.flowCanvas.current.addDrawable(this.dest.label);\r\n\t\tthis.flowCanvas.current.addDrawable(this.tld.label);\r\n\r\n\t\tthis.flowCanvas.current.draw();\r\n\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(props: DnsFlowCanvasProps) {\t\t\r\n\t\tthis.local.mode = props.localMode;\r\n\t\tthis.root.mode = props.rootMode;\r\n\t\tthis.tld.mode = props.tldMode;\r\n\t\tthis.inter.mode = props.interMode;\r\n\t}\r\n\r\n\r\n\r\n\tcomponentDidMount() {\t\t\r\n\t\t\r\n\t\tthis.client = { name: \"Host Cliente\", node: undefined, label: undefined, mode: undefined };\r\n\t\tthis.local = { name: \"Local\", node: undefined, label: undefined, mode: undefined };\r\n\t\tthis.root = { name: \"Root\", node: undefined, label: undefined, mode: undefined };\r\n\t\tthis.tld = { name: \"TLD\", node: undefined, label: undefined, mode: undefined };\r\n\t\tthis.inter = { name: \"Intermediários\", node: undefined, label: undefined, mode: undefined };\r\n\t\tthis.admin = { name: \"Autoritativo\", node: undefined, label: undefined, mode: undefined };\r\n\t\tthis.dest = { name: \"Host Destino\", node: undefined, label: undefined, mode: undefined };\r\n\r\n\t\tthis.resetCanvas();\r\n\r\n\t\tserverImage.onload = this.flowCanvas.current.draw;\r\n\t\tclientImage.onload = this.flowCanvas.current.draw;\r\n\t}\r\n\r\n\tconstructor(props: DnsFlowCanvasProps) {\r\n\t\tsuper(props);\r\n\t\tthis.flowCanvas = React.createRef();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <FlowCanvas ref={this.flowCanvas} width={750} height={560} fixedDeltaTime={1000 / 60}/>;\r\n\t}\r\n\r\n}"],"sourceRoot":""}