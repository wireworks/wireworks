{"version":3,"sources":["app/wireworks/networking/byte.ts","app/wireworks/utils/math.ts","app/wireworks/networking/layers/layer-3/ip.ts","app/components/ErrorBox.tsx","app/components/FlowCanvas.tsx","app/wireworks/utils/canvas.ts","app/wireworks/networking/layers/layer-2/mac.ts","app/pages/tools/layer-2/macfetch.tsx"],"names":["ByteZero","Byte","ByteMax","ERROR_BYTE_RANGE","value","Object","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","bits","decimal","setDecimal","setBits","D_Henrique_Programming_Javascript_wireworks_github_io_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","Math","floor","err","RangeError","name","arr","length","bit8","i","undefined","booleanArrayToBit8","decimalToBinary","binaryToDecimal","index","arguments","slice","clamp","min","max","binary","reversed","realIndex","pow","tmpDecimal","reverse","__webpack_require__","d","__webpack_exports__","Byte4Zero","cloneByte4","byte4","clone","ERROR_MASK_RANGE","ERROR_ADDRESS_PARSE","ERROR_NOT_NETWORK","joinBitIndex","byteIndex","bitIndex","splitBitIndex","byte4Index","IP","ip","mask","requireMask","requireNetwork","maskShort","parseIP","setMaskShort","setMask","isNetworkAddress","Error","bytes","Array","minByte","maskByte","bit","maxByte","allowAbove30","compare","getNetworkAddress","getBroadcastAddress","other","j","ipBytes","maskBytes","net","getDecimal","subnets","secondIpBytes","_splitBitIndex","maskShortTmp","end","tmpMask","address","trim","match","exec","ipByte0","parseInt","ipByte1","ipByte2","ipByte3","setIp","matchIp","omitMask","shortMaskString","getMaskShort","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ErrorBox","_ref","errorMessage","a","createElement","className","Node","pos","width","heigth","margins","image","connectorOffset","classCallCheck","visible","height","createClass","ctx","drawImage","x","y","w2","h2","b","c","side","p","getVertices","fw","fh","t","l","r","Label","text","textColor","backgroundColor","padding","borderRadius","font","textHeight","textAlign","lineDistance","getRealWidth","getRealHeight","fillStyle","w","h","beginPath","moveTo","arcTo","closePath","roundRect","fill","lines","split","line","spacer","measureText","fillText","biggest","Line","from","to","time","strokeStyle","strokeWidth","lineWidth","label","offX","offY","abs","getOutput","getInput","fromPoint","getStartPoint","toPoint","getEndPoint","currEnd","getCurrentEndPoint","lineCap","lineTo","stroke","draw","FlowCanvas","props","_this","possibleConstructorReturn","getPrototypeOf","call","drawables","canvas","lineIntervals","addDrawable","drawable","push","removeDrawable","indexOf","splice","clearDrawables","getDrawables","stopLineAnimations","clearInterval","connectNodes","speed","labelText","callback","prevTime","Date","now","scope","assertThisInitialized","interval","setInterval","deltaTime","startPoint","endPoint","distance","sqrt","fixedDeltaTime","connectMultipleNodes","connections","iterativeConnect","connection","getAlignedPoint","positionY","positionX","fromWidth","fromHeight","toWidth","toHeight","current","getContext","clearRect","React","createRef","react_default","ref","Component","ERROR_MAC_ADDRESS_PARSE","allowedChars","MAC","mac","asString","parseAddress","setBytes","str","toUpperCase","replace","piece","toString","computerImage","Image","routerImage","internetImage","switchImage","e","then","bind","res","src","default","speedValues","veryslow","slow","normal","fast","veryfast","grayWire","greenWire","yellowWire","MacFetch","txtTarget","selectOrigin","selectSpeed","macCanvas","state","origin","target","run","errStr","setState","ipFetch","error","console","_this2","htmlFor","id","defaultValue","type","onKeyDown","ev","placeholder","onClick","macfetch_MacFetchCanvas","MacFetchCanvas","_this3","flowCanvas","mSwitch","isSwitch","node","pcA","pcB","pcC","router","fixedLines","origins","A","B","C","fCanvas","drawIndex","lookingFor","nextHop","previous","path","_loop","targetStr","machine","response","resetCanvas","internetNode","internetLabel","pcALabel","pcBLabel","pcCLabel","routerLabel","onload"],"mappings":"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","file":"static/js/6.7b6bfdca.chunk.js","sourcesContent":["import { decimalToBinary, binaryToDecimal } from \"../utils/math\";\r\n\r\n/**\r\n * An array of 8 bits (boolean values).\r\n */\r\nexport type Bit8 = [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];\r\n\r\n/**\r\n * Returns a Bit8 filled with false.\r\n */\r\nexport function Bit8Zero(): Bit8 {\r\n\treturn [false, false, false, false, false, false, false, false];\r\n}\r\n\r\n/**\r\n * Returns a Bit8 filled with true.\r\n */\r\nexport function Bit8Max(): Bit8 {\r\n\treturn [true, true, true, true, true, true, true, true];\r\n}\r\n\r\n/**\r\n * Returns a Byte corresponding to the number 0.\r\n */\r\nexport function ByteZero(): Byte {\r\n\treturn new Byte(Bit8Zero());\r\n}\r\n\r\n/**\r\n * Returns a Byte corresponding to the number 255.\r\n */\r\nexport function ByteMax(): Byte {\r\n\treturn new Byte(Bit8Max());\r\n}\r\n\r\nexport function booleanArrayToBit8 (arr: boolean[]): Bit8 {\r\n\tif (arr.length > 8) {\r\n\t\tthrow new RangeError(\"The boolean array must have a length of 8 or less\");\r\n\t}\r\n\tlet bit8: Bit8 = Bit8Zero();\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t\tbit8[i] = arr[i] !== undefined ? arr[i] : false;\r\n\t}\r\n\treturn bit8;\r\n}\r\n\r\n/**\r\n * Error name for a byte outside the correct range.\r\n */\r\nexport const ERROR_BYTE_RANGE = \"ByteRangeError\";\r\n\r\n/**\r\n * A Byte, composed of 8 bits (boolean values).\r\n * @author Henrique Colini\r\n */\r\nexport class Byte {\r\n\r\n\t/**\r\n\t * This Byte's Bit8 representation.\r\n\t */\t\r\n\tprivate bits: Bit8;\r\n\r\n\t/**\r\n\t * This Byte's numerical representation.\r\n\t */\r\n\tprivate decimal: number;\r\n\t\r\n\t/**\r\n\t * Constructs a Byte from a number (0-255) or a Bit8.\r\n\t * @constructor\r\n\t * @param  {number|Bit8} value The value of this Byte.\r\n\t */\r\n\r\n\tconstructor(value: number | Bit8) {\r\n\r\n\t\tif (typeof value === \"number\") {\r\n\t\t\tthis.setDecimal(value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setBits(value);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value of this Byte, using a number (0-255).\r\n\t * @param  {number} decimal\r\n\t */\r\n\r\n\tsetDecimal(decimal: number): void {\r\n\r\n\t\tif (decimal < 0 || decimal > 255 || decimal !== Math.floor(decimal)) {\r\n\t\t\tlet err = new RangeError(\"The decimal value of a byte must be an integer between 0-255 (inclusive)\");\r\n\t\t\terr.name = ERROR_BYTE_RANGE;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tthis.bits = booleanArrayToBit8(decimalToBinary(decimal));\r\n\t\tthis.decimal = decimal;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value of this Byte, using a Bit8.\r\n\t * @param  {Bit8} bits\r\n\t */\r\n\r\n\tsetBits(bits: Bit8): void {\r\n\r\n\t\tthis.bits = bits;\r\n\t\tthis.decimal = binaryToDecimal(bits);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this Byte's numeric value.\r\n\t */\r\n\r\n\tgetDecimal(): number {\r\n\t\treturn this.decimal;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this Byte's Bit8 representation.\r\n\t */\r\n\r\n\tgetBits(): Bit8 {\r\n\t\treturn this.bits;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter/Setter of a single bit from this Byte.\r\n\t * @param  {number} index The index of the bit.\r\n\t * @param  {boolean|undefined=undefined} value Optional. Sets the value for this bit.\r\n\t */\r\n\r\n\tbit(index: number, value: boolean | undefined = undefined): boolean {\r\n\r\n\t\tif (value !== undefined) {\r\n\t\t\tlet bits = this.bits;\r\n\t\t\tbits[index] = value;\r\n\t\t\tthis.setBits(bits);\r\n\t\t}\r\n\r\n\t\treturn this.bits[index];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones this Byte.\r\n\t */\r\n\tclone(): Byte {\r\n\r\n\t\treturn new Byte(this.bits.slice() as Bit8)\r\n\r\n\t}\r\n\r\n}","/**\r\n * Returns a value, clamped between max and min.\r\n * @param  {number} value The number to be clamped.\r\n * @param  {number} min The minimum possible number.\r\n * @param  {number} max The maximum possible number.\r\n */\r\nexport function clamp(value: number, min: number, max: number): number {\r\n\treturn Math.min(Math.max(value, min), max);\r\n};\r\n\r\n/**\r\n * Converts a binary number (as a string, boolean array, or number array) to a decimal number.\r\n * @param  {boolean[]} binary The number to be converted. An array of booleans, read from left to right (e.g. 001 equals 4).\r\n * @param  {boolean} reversed Optional. Whether the input should be reversed (read from right to left). Defaults to false.\r\n */\r\nexport function binaryToDecimal(binary: boolean[], reversed: boolean = false): number {\r\n\r\n\tif (binary.length === 0) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tlet decimal = 0;\r\n\r\n\tfor (let realIndex = 0; realIndex < binary.length; realIndex++) {\r\n\r\n\t\tlet i = reversed ? binary.length - realIndex - 1 : realIndex;\r\n\r\n\t\tdecimal += binary[i] ? Math.pow(2, i) : 0;\r\n\t\t\r\n\t}\r\n\r\n\treturn decimal;\r\n\t\r\n}\r\n\r\n/**\r\n * Converts a decimal number (must be a positive integer) to an array of booleans (read from left to right, such that 001 equals 4).\r\n * @param  {number} decimal The number to be converted. Must be a positive integer.\r\n * @param  {boolean} reversed Optional. Whether the output should be reversed (read from right to left). Defaults to false.\r\n */\r\nexport function decimalToBinary(decimal: number, reversed: boolean = false): boolean[] {\r\n\r\n\tif (decimal < 0) {\r\n\t\tthrow new RangeError(\"Attempting to convert negative number to binary\");\r\n\t}\r\n\r\n\tif (decimal !== Math.floor(decimal)) {\r\n\t\tthrow new RangeError(\"Attempting to convert non-integer number to binary\");\r\n\t}\r\n\r\n\tlet binary: boolean[] = [];\r\n\r\n\tlet tmpDecimal = decimal, i = 0;\r\n\r\n\twhile (tmpDecimal > 0) {\r\n\r\n\t\tbinary[i] = tmpDecimal % 2 ? true : false;\r\n\t\ttmpDecimal = Math.floor(tmpDecimal / 2);\r\n\r\n\t\ti++;\r\n\r\n\t}\r\n\r\n\tif (reversed) {\r\n\t\tbinary.reverse();\r\n\t}\r\n\r\n\treturn binary;\r\n\r\n}","import { Byte, ByteZero, ByteMax } from \"../../byte\";\r\n\r\n/**\r\n * An array of 4 Bytes.\r\n */\r\nexport type Byte4 = [Byte,Byte,Byte,Byte];\r\n\r\n/**\r\n * Returns a Byte4 corresponding to 0, 0, 0, 0.\r\n */\r\nexport function Byte4Zero(): Byte4 {\r\n\treturn [ByteZero(), ByteZero(), ByteZero(), ByteZero()];\r\n}\r\n\r\n/**\r\n * Returns a Byte4 corresponding to 255, 255, 255, 255.\r\n */\r\nexport function Byte4Max(): Byte4 {\r\n\treturn [ByteMax(), ByteMax(), ByteMax(), ByteMax()];\r\n}\r\n\r\n/**\r\n * Clones a Byte4.\r\n * @param  {Byte4} byte4 The Byte4 to be cloned.\r\n */\r\nexport function cloneByte4(byte4: Byte4): Byte4 {\r\n\r\n\tbyte4 = byte4.slice() as Byte4;\r\n\r\n\tfor (let i = 0; i < 4; i++) {\r\n\t\tbyte4[i] = byte4[i].clone();\t\t\r\n\t}\r\n\r\n\treturn byte4;\r\n\r\n}\r\n\r\n/**\r\n * Error name for a mask with holes.\r\n */\r\nexport const ERROR_MASK_HOLES = \"MaskHolesError\";\r\n/**\r\n * Error name for a mask outside the correct range.\r\n */\r\nexport const ERROR_MASK_RANGE = \"MaskRangeError\";\r\n/**\r\n * Error name for a malformated address string.\r\n */\r\nexport const ERROR_ADDRESS_PARSE = \"AddressParseError\";\r\n/**\r\n * Error name for a when an IP Address should be a network address, but isn't.\r\n */\r\nexport const ERROR_NOT_NETWORK = \"NotNetworkError\";\r\n\r\n/**\r\n * Converts a bit in Byte index to a bit in Byte4 index.\r\n * @param  {number} byteIndex The index of the Byte in a Byte4.\r\n * @param  {number} bitIndex The index of the bit in the Byte.\r\n */\r\nexport function joinBitIndex(byteIndex: number, bitIndex: number): number {\r\n\tif (byteIndex > 3 || byteIndex < 0) {\r\n\t\tthrow new RangeError(\"The byteIndex must be between 0-3 (inclusive)\");\r\n\t}\r\n\tif (bitIndex > 7 || bitIndex < 0) {\r\n\t\tthrow new RangeError(\"The bitIndex must be between 0-7 (inclusive)\");\r\n\t}\r\n\treturn (8 * byteIndex) + (7 - bitIndex);\r\n}\r\n\r\n/**\r\n * Converts a bit in Byte4 index to a bit in Byte index.\r\n * @param  {number} byte4Index The index of the bit in a Byte4.\r\n */\r\nexport function splitBitIndex(byte4Index: number): { byteIndex: number, bitIndex: number } {\r\n\tif (byte4Index > 31 || byte4Index < 0) {\r\n\t\tthrow new RangeError(\"The byte4Index must be between 0-31 (inclusive)\");\r\n\t}\r\n\treturn {\r\n\t\tbyteIndex: Math.floor(byte4Index / 8),\r\n\t\tbitIndex: 7 - (byte4Index % 8)\r\n\t};\r\n}\r\n\r\n/**\r\n * A full IP/Mask address.\r\n * @author Henrique Colini\r\n */\r\nexport class IP {\r\n\t\r\n\t/**\r\n\t * This IP address's IP octets.\r\n\t */\r\n\tprivate ip: Byte4;\r\n\r\n\t/**\r\n\t * This IP address' mask.\r\n\t */\r\n\tprivate mask: Byte4;\r\n\r\n\t/**\r\n\t * The numerical representation of this IP address' mask.\r\n\t */\r\n\tprivate maskShort: number;\r\n\r\n\t\r\n\t/**\r\n\t * Constructs an IP address, given an IP and a mask.\r\n\t * @constructor\r\n\t * @param  {Byte4|string} ip The IP of this address. May be a Byte4 or a formatted string.\r\n\t * @param  {Byte4|number} mask Optional. The mask of this address. May be a Byte4 or its numerical representation. If not given, defaults to /0.\r\n\t * @param  {boolean} requireMask Optional. If set to true, the mask becomes a required parameter in the formatted string.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tconstructor(ip: Byte4 | string, mask?: Byte4 | number, requireMask: boolean = false, requireNetwork: boolean = false) {\r\n\r\n\t\tif (typeof ip === \"string\") {\r\n\t\t\tthis.parseIP(ip, requireMask);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.ip = ip;\r\n\t\t}\r\n\r\n\t\tif (!this.mask) {\r\n\t\t\tif (mask) {\r\n\t\t\t\tif (typeof mask === \"number\") {\r\n\t\t\t\t\tthis.setMaskShort(mask);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setMask(mask);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setMask(Byte4Zero());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a Network Address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the network address of this IP Address.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns undefined if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic getNetworkAddress(allowAbove30: boolean = false): IP {\r\n\r\n\t\tif (!allowAbove30 && this.maskShort > 30) return undefined;\r\n\r\n\t\tlet bytes: Byte4 = Array<Byte>(4) as Byte4;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\r\n\t\t\tlet minByte = this.ip[i].clone();\r\n\t\t\tlet maskByte = this.mask[i];\r\n\r\n\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\tif (!maskByte.bit(i)) {\r\n\t\t\t\t\tminByte.bit(i, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbytes[i] = minByte;\r\n\r\n\t\t}\r\n\r\n\t\treturn new IP(bytes, cloneByte4(this.mask));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the broadcast address of this IP Address' network.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns undefined if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic getBroadcastAddress(allowAbove30: boolean = false): IP {\r\n\r\n\t\tif (!allowAbove30 && this.maskShort > 30) return undefined;\r\n\r\n\t\tlet bytes: Byte4 = Array<Byte>(4) as Byte4;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\r\n\t\t\tlet maxByte = this.ip[i].clone();\r\n\t\t\tlet maskByte = this.mask[i];\r\n\r\n\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\tif (!maskByte.bit(i)) {\r\n\t\t\t\t\tmaxByte.bit(i, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbytes[i] = maxByte;\r\n\r\n\t\t}\r\n\r\n\t\treturn new IP(bytes, cloneByte4(this.mask));\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether this IP Address is a network address.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns false if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic isNetworkAddress(allowAbove30: boolean = false): boolean {\r\n\t\treturn this.compare(this.getNetworkAddress(allowAbove30));\r\n\t};\r\n\r\n\t/**\r\n\t * Returns whether this IP Address is a broadcast address.\r\n\t * @param {boolean} allowAbove30 Optional. If false, returns false if the mask is greater than 30. Defaults to false.\r\n\t */\r\n\tpublic isBroadcastAddress(allowAbove30: boolean = false): boolean {\r\n\t\treturn this.compare(this.getBroadcastAddress(allowAbove30));\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns true if this IP Address is the same as another.\r\n\t * @param {IP} other the IP Address to be compared with.\r\n\t */\r\n\tpublic compare(other: IP): boolean {\r\n\r\n\t\tif (!other) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this === other)\r\n\t\t\treturn true;\r\n\r\n\t\tif (this.ip === other.ip && (this.mask === other.mask || this.maskShort === other.maskShort))\r\n\t\t\treturn true;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tif ((this.ip[i].bit(j) !== other.ip[i].bit(j)) || (this.mask[i].bit(j) !== other.mask[i].bit(j))) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the amount of hosts that this IP Address' network has.\r\n\t * @param {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic numberOfHosts(requireNetwork: boolean = false): number {\r\n\r\n\t\tif(requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a network address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tif (this.maskShort === 31)\r\n\t\t\treturn 2;\r\n\t\tif (this.maskShort === 32)\r\n\t\t\treturn 1;\r\n\t\treturn (Math.pow(2, 32 - this.maskShort) - 2);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the first valid host IP Address of this network.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic firstHost(requireNetwork: boolean = false): IP {\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a network address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet ipBytes: Byte4;\r\n\t\tlet maskBytes: Byte4;\r\n\r\n\t\tif (requireNetwork) {\r\n\t\t\tipBytes = cloneByte4(this.ip);\r\n\t\t\tmaskBytes = cloneByte4(this.mask);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet net = this.getNetworkAddress(true);\r\n\t\t\tipBytes = net.ip;\r\n\t\t\tmaskBytes = net.mask;\r\n\t\t}\r\n\r\n\t\tif (this.maskShort < 31) {\r\n\t\t\tipBytes[3].setDecimal(ipBytes[3].getDecimal() + 1);\r\n\t\t}\r\n\r\n\t\treturn new IP(ipBytes, maskBytes);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the last valid host IP Address of this network.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic lastHost(requireNetwork: boolean = false): IP {\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a Network Address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet ipBytes: Byte4;\r\n\t\tlet maskBytes: Byte4;\r\n\r\n\t\tlet net = this.getBroadcastAddress(true);\r\n\t\tipBytes = net.ip;\r\n\t\tmaskBytes = net.mask;\r\n\r\n\t\tif (this.maskShort < 31) {\r\n\t\t\tipBytes[3].setDecimal(ipBytes[3].getDecimal() - 1);\r\n\t\t}\r\n\r\n\t\treturn new IP(ipBytes, maskBytes);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this IP Address into two subnets.\r\n\t * @param  {boolean} requireNetwork Optional. If true, throws an error if this is not a network address. Defaults to false.\r\n\t */\r\n\tpublic subdivide(requireNetwork: boolean = false): [IP, IP] {\r\n\r\n\t\tif (requireNetwork && !this.isNetworkAddress(true)) {\r\n\t\t\tlet err = new Error(\"Not a Network Address\");\r\n\t\t\terr.name = ERROR_NOT_NETWORK;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet subnets: [IP, IP] = [undefined, undefined];\r\n\r\n\t\tif (this.maskShort === 32) {\r\n\t\t\treturn subnets;\r\n\t\t}\r\n\r\n\t\tlet ipBytes: Byte4;\r\n\r\n\t\tif (requireNetwork) {\r\n\t\t\tipBytes = cloneByte4(this.ip);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet net = this.getNetworkAddress(true);\r\n\t\t\tipBytes = net.ip;\r\n\t\t}\r\n\r\n\t\tsubnets[0] = new IP(cloneByte4(ipBytes), this.maskShort+1);\r\n\t\t\r\n\t\tlet secondIpBytes: Byte4 = cloneByte4(ipBytes);\r\n\t\tlet {byteIndex, bitIndex} = splitBitIndex(this.maskShort);\r\n\t\tsecondIpBytes[byteIndex].bit(bitIndex, true);\r\n\r\n\t\tsubnets[1] = new IP(secondIpBytes, this.maskShort+1);\r\n\r\n\t\treturn subnets;\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets this IP Address' mask.\r\n\t * @param  {Byte4} mask The Byte4 mask to be set.\r\n\t */\r\n\tpublic setMask(mask: Byte4): void {\r\n\r\n\t\tlet maskShortTmp = 0;\r\n\t\tlet end = false;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\r\n\t\t\t\tif (mask[i].bit(8 - 1 - j)) {\r\n\t\t\t\t\tif(!end) {\r\n\t\t\t\t\t\tmaskShortTmp++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet err = new Error(\"Mask contains holes\");\r\n\t\t\t\t\t\terr.name = ERROR_MASK_HOLES;\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tend = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.maskShort = maskShortTmp;\r\n\t\tthis.mask = mask;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this IP Address' mask, given its numerical representation (0-32).\r\n\t * @param  {number} maskShort The numerical mask to be set.\r\n\t */\r\n\tpublic setMaskShort(maskShort: number): void {\r\n\r\n\t\tif (maskShort < 0 || maskShort > 32) {\r\n\t\t\tlet err = new RangeError(\"The short mask should be between 0 and 32\");\r\n\t\t\terr.name = ERROR_MASK_RANGE;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tlet tmpMask: Byte4 = Byte4Zero();\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tif (((8 * i) + j) < maskShort) {\r\n\t\t\t\t\ttmpMask[i].bit(8 - 1 - j, true);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttmpMask[i].bit(8 - 1 - j, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.maskShort = maskShort;\r\n\t\tthis.mask = tmpMask;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this IP Address' IP value.\r\n\t * @param  {Byte4} ip\r\n\t */\r\n\tpublic setIp(ip: Byte4): void {\r\n\t\tthis.ip = ip;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this IP Address' mask.\r\n\t */\r\n\tpublic getMask(): Byte4 {\r\n\t\treturn this.mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the numerical representation of this IP Address' mask.\r\n\t */\r\n\tpublic getMaskShort(): number {\r\n\t\treturn this.maskShort;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns this IP Address' IP value.\r\n\t */\r\n\tpublic getIp(): Byte4 {\r\n\t\treturn this.ip;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this IP Address IP/Mask values from a parsed string.\r\n\t * @param  {string} address The full address, in the X.X.X.X/X format. If requireMask is false, the mask can be ommited and defaults to /0.\r\n\t * @param  {boolean=true} requireMask Whether the address requires the mask to be given.\r\n\t */\r\n\tpublic parseIP(address: string, requireMask: boolean = true): void {\r\n\r\n\t\taddress = address.trim();\r\n\t\tconst fullRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\/(\\d+)$/;\r\n\t\tconst ipRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/;\r\n\r\n\t\tlet match = fullRegex.exec(address);\r\n\r\n\t\tif (match !== null) {\r\n\t\t\tlet ipByte0 = new Byte(parseInt(match[1], 10));\r\n\t\t\tlet ipByte1 = new Byte(parseInt(match[2], 10));\r\n\t\t\tlet ipByte2 = new Byte(parseInt(match[3], 10));\r\n\t\t\tlet ipByte3 = new Byte(parseInt(match[4], 10));\r\n\t\t\tlet maskShort = parseInt(match[5], 10);\r\n\r\n\t\t\tif (maskShort < 0 || maskShort > 32) {\r\n\t\t\t\tlet err = new RangeError(\"The short mask should be between 0 and 32\");\r\n\t\t\t\terr.name = ERROR_MASK_RANGE;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\r\n\t\t\tthis.setIp([ipByte0, ipByte1, ipByte2, ipByte3]);\r\n\t\t\tthis.setMaskShort(maskShort);\r\n\t\t}\r\n\t\telse if (!requireMask) {\r\n\r\n\t\t\tlet matchIp = ipRegex.exec(address);\r\n\r\n\t\t\tif (matchIp !== null) {\r\n\t\t\t\tlet ipByte0 = new Byte(parseInt(matchIp[1], 10));\r\n\t\t\t\tlet ipByte1 = new Byte(parseInt(matchIp[2], 10));\r\n\t\t\t\tlet ipByte2 = new Byte(parseInt(matchIp[3], 10));\r\n\t\t\t\tlet ipByte3 = new Byte(parseInt(matchIp[4], 10));\r\n\r\n\t\t\t\tthis.setIp([ipByte0, ipByte1, ipByte2, ipByte3]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet err = new Error(\"Invalid IP/mask address string\");\r\n\t\t\t\terr.name = ERROR_ADDRESS_PARSE;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet err = new Error(\"Invalid IP/mask address string\");\r\n\t\t\terr.name = ERROR_ADDRESS_PARSE;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Returns the string representation of this IP Address in the X.X.X.X/X format.\r\n\t * @param  {boolean} omitMask Whether the mask should be ommited. Defaults to false.\r\n\t */\r\n\ttoString(omitMask: boolean = false): string {\r\n\r\n\t\treturn \"\" +\r\n\t\t\tthis.ip[0].getDecimal() + \".\" +\r\n\t\t\tthis.ip[1].getDecimal() + \".\" +\r\n\t\t\tthis.ip[2].getDecimal() + \".\" +\r\n\t\t\tthis.ip[3].getDecimal() + (omitMask? \"\" : this.shortMaskString());\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the string representation of the mask.\r\n\t */\r\n\tmaskString(): string {\r\n\t\treturn \"\" +\r\n\t\t\tthis.mask[0].getDecimal() + \".\" +\r\n\t\t\tthis.mask[1].getDecimal() + \".\" +\r\n\t\t\tthis.mask[2].getDecimal() + \".\" +\r\n\t\t\tthis.mask[3].getDecimal();\r\n\t}\r\n\r\n\tshortMaskString(): string {\r\n\t\treturn \"/\" + this.getMaskShort();\r\n\t}\r\n\r\n}","import React, { FC } from \"react\";\r\n\r\ninterface ErrorBoxProps {\r\n\terrorMessage: string\r\n}\r\n\r\nconst ErrorBox: FC<ErrorBoxProps> = ({errorMessage}) => {\r\n\r\n    if (errorMessage) {\r\n        return (\r\n            <div className=\"errorbox\">{errorMessage}</div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n\r\nexport default ErrorBox;","import React, { Component, RefObject } from \"react\";\r\nimport { clamp } from \"../wireworks/utils/math\";\r\nimport { roundRect } from \"../wireworks/utils/canvas\";\r\n\r\n/**\r\n * A 2D point.\r\n */\r\nexport type Point = { x: number, y: number }\r\n\r\n/**\r\n * Interface representing anything that can be drawn on the canvas.\r\n */\r\nexport interface Drawable {\r\n\r\n\tvisible: boolean;\r\n\tdraw(ctx: CanvasRenderingContext2D): void;\r\n\r\n}\r\n\r\n/**\r\n * A Drawable image that has special connecting points. Used to represent servers and clients in the canvas.\r\n */\r\nexport class Node implements Drawable {\r\n\t\r\n\tpublic visible = true;\r\n\tpublic pos: Point;\r\n\tpublic margins: { l: number, t: number, r: number, b: number };\r\n\tpublic width: number;\r\n\tpublic height: number;\r\n\tpublic image: HTMLImageElement;\r\n\tpublic connectorOffset: number;\r\n\r\n\tconstructor(pos: Point, width: number, heigth: number, margins: { l: number, t: number, r: number, b: number }, image: HTMLImageElement, connectorOffset: number = 0.25) {\r\n\t\tthis.pos = pos;\r\n\t\tthis.width = width;\r\n\t\tthis.height = heigth;\r\n\t\tthis.image = image;\r\n\t\tthis.margins = margins;\r\n\t\tthis.connectorOffset = connectorOffset;\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\t\r\n\t\tif (this.visible)\r\n\t\t\tctx.drawImage(this.image, this.pos.x - (this.width / 2), this.pos.y - (this.height / 2), this.width, this.height);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the 4 vertices of this rectangular Node. A, B, C and D represent the vertices clockwise, starting from the top left corner.\r\n\t */\r\n\tpublic getVertices(): {a: Point, b: Point, c: Point, d: Point} {\r\n\r\n\t\tlet x = this.pos.x;\r\n\t\tlet y = this.pos.y;\r\n\t\tlet w2 = this.width / 2;\r\n\t\tlet h2 = this.height / 2;\r\n\r\n\t\tlet a = { x: x - w2, y: y - h2 };\r\n\t\tlet b = { x: x + w2, y: y - h2 };\r\n\t\tlet c = { x: x + w2, y: y + h2 };\r\n\t\tlet d = { x: x - w2, y: y + h2 };\r\n\r\n\t\treturn {a,b,c,d};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an exit point of this Node, given the side.\r\n\t * @param side Which side to get the point from.\r\n\t */\r\n\tpublic getOutput(side: \"top\" | \"bottom\" | \"left\" | \"right\"): Point {\r\n\r\n\t\tlet p = this.getVertices();\r\n\t\tlet fw = this.connectorOffset * this.width;\r\n\t\tlet fh = this.connectorOffset * this.height;\r\n\r\n\t\tswitch (side) {\r\n\r\n\t\t\tcase \"top\":\r\n\t\t\t\treturn { x: p.a.x + fw, y: p.a.y - this.margins.t };\r\n\t\t\tcase \"bottom\":\r\n\t\t\t\treturn { x: p.c.x - fw, y: p.c.y + this.margins.b };\r\n\t\t\tcase \"left\":\r\n\t\t\t\treturn { x: p.d.x - this.margins.l, y: p.d.y - fh };\r\n\t\t\tcase \"right\":\r\n\t\t\t\treturn { x: p.c.x + this.margins.r, y: p.b.y + fh };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an entry point of this Node, given the side.\r\n\t * @param side Which side to get the point from.\r\n\t */\r\n\tpublic getInput(side: \"top\" | \"bottom\" | \"left\" | \"right\"): Point {\r\n\r\n\t\tlet p = this.getVertices();\r\n\t\tlet fw = this.connectorOffset * this.width;\r\n\t\tlet fh = this.connectorOffset * this.height;\r\n\r\n\t\tswitch (side) {\r\n\r\n\t\t\tcase \"top\":\r\n\t\t\t\treturn { x: p.b.x - fw, y: p.a.y - this.margins.t };\r\n\t\t\tcase \"bottom\":\r\n\t\t\t\treturn { x: p.d.x + fw, y: p.c.y + this.margins.b };\r\n\t\t\tcase \"left\":\r\n\t\t\t\treturn { x: p.d.x - this.margins.l, y: p.a.y + fh };\r\n\t\t\tcase \"right\":\r\n\t\t\t\treturn { x: p.c.x + this.margins.r, y: p.c.y - fh };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A Drawable text box.\r\n */\r\nexport class Label implements Drawable {\r\n\t\r\n\tpublic visible = true;\r\n\tpublic pos: Point;\r\n\tpublic text: string;\r\n\tpublic textColor: string;\r\n\tpublic backgroundColor: string;\r\n\tpublic padding: number;\r\n\tpublic borderRadius: number;\r\n\tpublic font: string;\r\n\tpublic textHeight: number;\r\n\tpublic lineDistance: number;\r\n\tpublic textAlign: \"left\"|\"center\"|\"right\";\r\n\r\n\tconstructor(pos: Point, text: string, textColor: string, backgroundColor: string, padding: number, borderRadius: number, font: string, textHeight: number, textAlign:\"left\"|\"center\"|\"right\" = \"left\", lineDistance: number = 3) {\r\n\t\tthis.pos = pos;\r\n\t\tthis.text = text;\r\n\t\tthis.textColor = textColor;\r\n\t\tthis.backgroundColor = backgroundColor;\r\n\t\tthis.padding = padding;\r\n\t\tthis.borderRadius = borderRadius;\r\n\t\tthis.font = font;\r\n\t\tthis.textHeight = textHeight;\r\n\t\tthis.lineDistance = lineDistance;\r\n\t\tthis.textAlign = textAlign;\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\t\r\n\t\tif (this.visible) {\r\n\t\t\tlet width = this.getRealWidth(ctx);\r\n\t\t\tlet height = this.getRealHeight();\r\n\r\n\t\t\tctx.fillStyle = this.backgroundColor;\r\n\t\t\troundRect(ctx, this.pos.x - (width / 2), this.pos.y - (height / 2), width, height, this.borderRadius).fill();\r\n\r\n\t\t\tctx.fillStyle = this.textColor;\r\n\t\t\tctx.font = this.font;\r\n\r\n\t\t\tlet lines = this.text.split(\"\\n\");\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < lines.length; i++) {\r\n\t\t\t\tconst line = lines[i];\r\n\t\t\t\tconst lineWidth = ctx.measureText(line).width + (2*this.padding);\r\n\t\t\t\tlet spacer = width-lineWidth;\r\n\r\n\t\t\t\tswitch (this.textAlign) {\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tspacer = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"center\":\r\n\t\t\t\t\t\tspacer /= 2;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tctx.fillText(line, this.pos.x + this.padding - (width / 2) + spacer, this.pos.y + this.padding + ((i+1)*this.textHeight) + ((i)*this.lineDistance) - (height / 2));\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\t/**\r\n\t * Returns the width of this Label, considering the width of the text and the padding.\r\n\t */\r\n\tpublic getRealWidth(ctx: CanvasRenderingContext2D): number {\r\n\t\t\r\n\t\tlet biggest = 0;\r\n\t\tctx.font = this.font;\r\n\r\n\t\tlet lines = this.text.split('\\n');\r\n\t\t\r\n\t\tfor (let i = 0; i < lines.length; i++) {\r\n\t\t\tconst line = lines[i];\r\n\t\t\tlet w = ctx.measureText(line).width + (2*this.padding);\r\n\t\t\tif (w > biggest) biggest = w;\r\n\t\t}\r\n\r\n\t\treturn biggest;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the height of this Label, considering the height of the text and the padding.\r\n\t */\r\n\tpublic getRealHeight(): number {\r\n\t\t// return this.textHeight + (2*this.padding);\r\n\t\tlet lines = this.text.split('\\n').length;\r\n\t\treturn (lines * this.textHeight) + ((lines-1) * this.lineDistance) + (2*this.padding);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A Drawable line that connects the outputs and inputs of Nodes.\r\n */\r\nexport class Line implements Drawable {\r\n\r\n\tpublic visible = true;\r\n\tpublic from: Node;\r\n\tpublic to: Node;\r\n\tpublic time: number;\r\n\tpublic strokeStyle: string;\r\n\tpublic lineWidth: number;\r\n\tpublic label: Label;\r\n\r\n\tconstructor(from: Node, to: Node, time: number, strokeStyle: string, strokeWidth: number) {\r\n\r\n\t\tthis.from = from;\r\n\t\tthis.to = to;\r\n\t\tthis.time = time;\r\n\t\tthis.strokeStyle = strokeStyle;\r\n\t\tthis.lineWidth = strokeWidth;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the start point of this Line.\r\n\t */\r\n\tpublic getStartPoint(): Point {\r\n\r\n\t\tlet offX = this.from.pos.x - this.to.pos.x;\r\n\t\tlet offY = this.from.pos.y - this.to.pos.y;\r\n\r\n\t\tif (Math.abs(offX) > Math.abs(offY)) {\r\n\t\t\tif (offX > 0) {\r\n\t\t\t\treturn this.from.getOutput(\"left\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.from.getOutput(\"right\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (offY > 0) {\r\n\t\t\t\treturn this.from.getOutput(\"top\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.from.getOutput(\"bottom\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the end point of this Line.\r\n\t */\r\n\tpublic getEndPoint(): Point {\r\n\r\n\t\tlet offX = this.from.pos.x - this.to.pos.x;\r\n\t\tlet offY = this.from.pos.y - this.to.pos.y;\r\n\r\n\t\tif (Math.abs(offX) > Math.abs(offY)) {\r\n\t\t\tif (offX > 0) {\r\n\t\t\t\treturn this.to.getInput(\"right\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.to.getInput(\"left\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (offY > 0) {\r\n\t\t\t\treturn this.to.getInput(\"bottom\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.to.getInput(\"top\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current end point of this Line in a point of time.\r\n\t * @param fromPoint The starting point.\r\n\t * @param toPoint The end point to be reached.\r\n\t */\r\n\tpublic getCurrentEndPoint(fromPoint = this.getStartPoint(), toPoint = this.getEndPoint()): Point {\r\n\t\treturn {x: fromPoint.x + (this.time * (toPoint.x - fromPoint.x)), y: fromPoint.y + (this.time * (toPoint.y - fromPoint.y))};\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\r\n\t\tif (this.visible){\r\n\r\n\t\t\tlet fromPoint = this.getStartPoint();\r\n\t\t\tlet currEnd = this.getCurrentEndPoint(fromPoint);\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.strokeStyle = this.strokeStyle;\r\n\t\t\tctx.lineWidth = this.lineWidth;\r\n\t\t\tctx.lineCap = \"round\";\r\n\r\n\t\t\tctx.moveTo(fromPoint.x, fromPoint.y);\r\n\t\t\tctx.lineTo(currEnd.x, currEnd.y);\r\n\t\t\tctx.stroke();\r\n\r\n\t\t\tif (this.label) {\t\t\t\t\t\t\t\t\r\n\t\t\t\tthis.label.pos = currEnd;\r\n\t\t\t\tthis.label.draw(ctx);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A helper data structure used to represent the connection between two Nodes when creating a line. \r\n */\r\nexport type NodeConnection = {\r\n\tfrom: Node, \r\n\tto: Node, \r\n\tstrokeStyle: string, \r\n\tlineWidth: number, \r\n\tspeed: number, \r\n\tlabelText: string | undefined \r\n};\r\n\r\nexport interface FlowCanvasProps {\r\n\twidth: number,\r\n\theight: number,\r\n\tfixedDeltaTime: number\r\n};\r\n\r\nclass FlowCanvas extends Component<FlowCanvasProps> {\r\n\r\n\t/**\r\n\t * The list of elements drawn to the canvas.\r\n\t */\r\n\tprivate drawables: Drawable[] = [];\r\n\r\n\t/**\r\n\t * The reference to the canvas.\r\n\t */\r\n\tprotected canvas: RefObject<HTMLCanvasElement>;\t\t\r\n\t\r\n\t/**\r\n\t * The intervals of each line being drawn.\r\n\t */\r\n\tprotected lineIntervals: NodeJS.Timeout[] = [];\r\n\r\n\t/**\r\n\t * Adds a drawable to this FlowCanvas.\r\n\t * @param drawable The drawable to be added.\r\n\t */\r\n\tpublic addDrawable = (drawable: Drawable) => {\r\n\t\tthis.drawables.push(drawable);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a drawable from this FlowCanvas.\r\n\t * @param drawable The drawable to be removed.\r\n\t */\r\n\tpublic removeDrawable = (drawable: Drawable): boolean => {\r\n\t\tlet index = this.drawables.indexOf(drawable);\t\t\r\n\t\tif (index < 0) return false;\r\n\t\tthis.drawables.splice(index, 1);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all drawables from this FlowCanvas.\r\n\t */\r\n\tpublic clearDrawables = () => {\r\n\t\tthis.drawables = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the list of drawables of this FlowCanvas.\r\n\t */\r\n\tpublic getDrawables = (): Drawable[] => {\r\n\t\treturn this.drawables;\r\n\t}\r\n\r\n\t/**\r\n\t * Stops all line animations.\r\n\t */\r\n\tpublic stopLineAnimations = () => {\r\n\t\tfor (let i = 0; i < this.lineIntervals.length; i++) {\r\n\t\t\tclearInterval(this.lineIntervals[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Connects two Nodes with a Line, drawing it over time, given a speed. \r\n\t * @param from The Node to start the Line from.\r\n\t * @param to The Node to get the Line to.\r\n\t * @param strokeStyle The stroke style of the Line.\r\n\t * @param lineWidth The line width.\r\n\t * @param speed The speed of the Line being drawn, in pixels per second.\r\n\t * @param labelText The text of the Line's label.\r\n\t * @param callback A callback for when the Line finishes drawing.\r\n\t */\r\n\tpublic connectNodes = (from: Node, to: Node, strokeStyle: string, lineWidth: number, speed: number, labelText: string|undefined, callback: Function = undefined): Line => {\r\n\r\n\t\tlet line = new Line(from, to, 0, strokeStyle, lineWidth);\r\n\r\n\t\tif (labelText) {\r\n\t\t\tline.label = new Label({x:0,y:0}, labelText, \"#000000\", strokeStyle, 5, 10, \"12px Monserrat, sans-serif\", 10);\r\n\t\t}\r\n\t\tthis.addDrawable(line);\r\n\r\n\t\tlet prevTime = Date.now();\r\n\t\tlet scope: FlowCanvas = this;\r\n\r\n\t\tlet interval = setInterval(function(){\r\n\r\n\t\t\tlet deltaTime = Date.now() - prevTime;\r\n\t\t\tprevTime = Date.now();\r\n\r\n\t\t\tlet startPoint = line.getStartPoint();\r\n\t\t\tlet endPoint = line.getEndPoint();\r\n\r\n\t\t\tlet distance = Math.sqrt(\r\n\t\t\t\t((startPoint.x - endPoint.x)*(startPoint.x - endPoint.x)) + ((startPoint.y - endPoint.y)*(startPoint.y - endPoint.y))\r\n\t\t\t);\r\n\r\n\t\t\tline.time = clamp(line.time + ((deltaTime/1000) * (speed/distance)), 0, 1);\r\n\r\n\t\t\tscope.draw();\r\n\t\t\t\r\n\t\t\tif (line.time >= 1) {\r\n\r\n\t\t\t\tline.time = 1;\r\n\r\n\t\t\t\tline.label = undefined;\r\n\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t\t\r\n\t\t\t\tscope.draw();\r\n\t\t\t}\r\n\r\n\t\t}, this.props.fixedDeltaTime);\r\n\r\n\t\tthis.lineIntervals.push(interval);\r\n\r\n\t\treturn line;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Connects multiple nodes, in succession.\r\n\t * @param connections The list of connections to be made.\r\n\t * @param callback What do to when the last line finishes being drawn.\r\n\t */\r\n\tpublic connectMultipleNodes = (connections: NodeConnection[], callback: Function = undefined) => {\r\n\r\n\t\tlet iterativeConnect = (index: number) => {\r\n\r\n\t\t\tif(index < connections.length){\r\n\t\t\t\tlet connection = connections[index];\r\n\t\t\t\tindex++;\r\n\t\t\t\t\t\t\r\n\t\t\t\tthis.connectNodes(connection.from, connection.to, connection.strokeStyle, connection.lineWidth, connection.speed, connection.labelText, function () {\r\n\t\t\t\t\titerativeConnect(index);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\titerativeConnect(0);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the position of a Node or Label when put aligned to another one.\r\n\t * @param from The Node or Label to be positioned relative to.\r\n\t * @param to The Node or Label to be positioned.\r\n\t * @param positionY How to align the Node or Label vertically. Can be \"top\", \"center\" or \"bottom\".\r\n\t * @param positionX How to align the Node or Label horizontally. Can be \"left\", \"center\" or \"right\".\r\n\t */\r\n\tpublic getAlignedPoint = (from: Node|Label, to: Node|Label, positionY: \"top\"|\"center\"|\"bottom\", positionX: \"left\"|\"center\"|\"right\"): Point => {\r\n\r\n\t\tlet offX: number;\t\r\n\t\tlet offY: number;\t\r\n\r\n\t\tswitch (positionX) {\r\n\t\t\tcase \"left\": offX = -0.5; break;\r\n\t\t\tcase \"center\": offX = 0; break;\r\n\t\t\tcase \"right\": offX = 0.5; break;\r\n\t\t}\r\n\r\n\t\tswitch (positionY) {\r\n\t\t\tcase \"top\": offY = -0.5; break;\r\n\t\t\tcase \"center\": offY = 0; break;\r\n\t\t\tcase \"bottom\": offY = 0.5; break;\r\n\t\t}\r\n\r\n\t\tlet fromWidth: number;\r\n\t\tlet fromHeight: number;\r\n\t\tlet toWidth: number;\r\n\t\tlet toHeight: number;\r\n\r\n\t\tif (from instanceof Node) {\r\n\t\t\tfromWidth = from.width;\t\t\r\n\t\t\tfromHeight = from.height;\t\t\r\n\t\t}\r\n\t\tif (to instanceof Node) {\r\n\t\t\ttoWidth = to.width;\t\t\r\n\t\t\ttoHeight = to.height;\t\t\r\n\t\t}\r\n\t\tif (from instanceof Label) {\r\n\t\t\tfromWidth = from.getRealWidth(this.canvas.current.getContext(\"2d\"));\t\t\r\n\t\t\tfromHeight = from.getRealHeight();\t\t\r\n\t\t}\r\n\t\tif (to instanceof Label) {\r\n\t\t\ttoWidth = to.getRealWidth(this.canvas.current.getContext(\"2d\"));\t\t\r\n\t\t\ttoHeight = to.getRealHeight();\t\t\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tx: from.pos.x + (offX * (fromWidth + toWidth)),\r\n\t\t\ty: from.pos.y + (offY * (fromHeight + toHeight))\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t* Renders all the Drawables to the canvas.\r\n\t*/\r\n\tpublic draw = () => {\r\n\r\n\t\tlet ctx = this.canvas.current.getContext(\"2d\");\r\n\r\n\t\tctx.clearRect(0, 0, this.props.width, this.props.height);\r\n\r\n\t\tif (this.drawables) {\r\n\t\t\tfor (let i = 0; i < this.drawables.length; i++) {\r\n\t\t\t\tthis.drawables[i].draw(ctx);\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.canvas = React.createRef();\r\n\t}\t\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.stopLineAnimations();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <canvas width={this.props.width} height={this.props.height} ref={this.canvas} className=\"flow-canvas\"></canvas>;\r\n\t}\r\n\r\n}\r\n\r\nexport default FlowCanvas;","/**\r\n * Draws a rounded rectangle in the canvas.\r\n * @param x The x coordinate of the rectangle.\r\n * @param y The y coordinate of the rectangle.\r\n * @param w The width of the rectangle.\r\n * @param h The height of the rectangle.\r\n * @param r The radius of the border.\r\n */\r\nexport function roundRect(ctx: CanvasRenderingContext2D, x: number, y: number, w: number, h: number, r: number): CanvasRenderingContext2D {\r\n\tif (w < 2 * r) r = w / 2;\r\n\tif (h < 2 * r) r = h / 2;\r\n\tctx.beginPath();\r\n\tctx.moveTo(x + r, y);\r\n\tctx.arcTo(x + w, y, x + w, y + h, r);\r\n\tctx.arcTo(x + w, y + h, x, y + h, r);\r\n\tctx.arcTo(x, y + h, x, y, r);\r\n\tctx.arcTo(x, y, x + w, y, r);\r\n\tctx.closePath();\r\n\treturn ctx;\r\n}","import { Byte, ByteZero, ByteMax } from \"../../byte\";\r\n\r\n/**\r\n * An array of 6 Bytes.\r\n */\r\nexport type Byte6 = [Byte,Byte,Byte,Byte,Byte,Byte];\r\n\r\n/**\r\n * Returns a Byte6 corresponding to 0, 0, 0, 0, 0, 0.\r\n */\r\nexport function Byte6Zero(): Byte6 {\r\n\treturn [ByteZero(), ByteZero(), ByteZero(), ByteZero(), ByteZero(), ByteZero()];\r\n}\r\n\r\n/**\r\n * Returns a Byte6 corresponding to 255, 255, 255, 255, 255, 255.\r\n */\r\nexport function Byte6Max(): Byte6 {\r\n\treturn [ByteMax(), ByteMax(), ByteMax(), ByteMax(), ByteMax(), ByteMax()];\r\n}\r\n\r\n/**\r\n * Clones a Byte6.\r\n * @param  {Byte6} byte6 The Byte6 to be cloned.\r\n */\r\nexport function cloneByte6(byte6: Byte6): Byte6 {\r\n\r\n\tbyte6 = byte6.slice() as Byte6;\r\n\r\n\tfor (let i = 0; i < 6; i++) {\r\n\t\tbyte6[i] = byte6[i].clone();\t\t\r\n\t}\r\n\r\n\treturn byte6;\r\n\r\n}\r\n\r\n/**\r\n * Error name for a malformated MAC address string.\r\n */\r\nexport const ERROR_MAC_ADDRESS_PARSE = \"AddressParseError\";\r\n\r\nconst allowedChars = ['A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9'];\r\n\r\n/**\r\n * A MAC address.\r\n * @author Henrique Colini\r\n */\r\nexport default class MAC {\r\n\r\n\tprivate bytes: Byte6 = Byte6Zero();\r\n\tprivate asString: string;\r\n\t\r\n\t/**\r\n\t * Constructs a MAC address.\r\n\t * @param  {Byte6|string} mac The MAC address itself. May be a Byte6 or a formatted string.\r\n\t */\r\n\tconstructor(mac: Byte6|string) {\r\n\t\tif (typeof mac === \"string\") this.parseAddress(mac);\r\n\t\telse this.setBytes(mac);\r\n\t}\r\n\r\n\tpublic parseAddress(str: string) {\r\n\t\t\r\n\t\tstr = str.toUpperCase().replace(/[:.-]/g, \"\");\r\n\r\n\t\tif (str.length !== 12) {\r\n\t\t\tlet err = new Error(\"Invalid MAC address string\");\r\n\t\t\terr.name = ERROR_MAC_ADDRESS_PARSE;\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i = 0; i < str.length; i++) {\r\n\t\t\tconst c = str[i];\r\n\t\t\tif (allowedChars.indexOf(c) === -1) {\r\n\t\t\t\tlet err = new Error(\"Invalid MAC address string\");\r\n\t\t\t\terr.name = ERROR_MAC_ADDRESS_PARSE;\r\n\t\t\t\tthrow err;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tthis.asString = \"\";\r\n\t\t\r\n\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\tconst piece = str[i*2]+str[(i*2)+1];\r\n\t\t\tthis.bytes[i] = new Byte(parseInt(piece, 16));\r\n\t\t\tthis.asString += piece;\r\n\t\t\tif (i < 6-1) this.asString += \"-\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if this MAC address is the same as another.\r\n\t * @param {MAC} other the MAC address to be compared with.\r\n\t */\r\n\tpublic compare(other: MAC): boolean {\r\n\r\n\t\tif (!other) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this === other)\r\n\t\t\treturn true;\r\n\r\n\t\tif (this.bytes === other.bytes)\r\n\t\t\treturn true;\r\n\r\n\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tif (this.bytes[i].bit(j) !== other.bytes[i].bit(j)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tpublic setBytes(bytes: Byte6) {\r\n\t\tthis.bytes = bytes;\r\n\t\tthis.asString = \"\";\r\n\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\tlet piece = bytes[i].getDecimal().toString(16).toUpperCase();\r\n\t\t\tthis.asString += (piece.length<2? '0' : '') + piece;\r\n\t\t\tif (i < 6-1) this.asString += \"-\";\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getBytes(): Byte6 {\r\n\t\treturn this.bytes;\r\n\t}\r\n\r\n\tpublic toString(): string {\r\n\t\treturn this.asString;\r\n\t}\r\n\r\n}","// MACFetch\r\n// +=========================+\r\n// Author: Henrique Colini\r\n// Version: 1.0 (2019-09-02)\r\n\r\nimport React, { Component, RefObject } from \"react\";\r\nimport FlowCanvas, { Node, Label, NodeConnection, Line } from \"../../../components/FlowCanvas\";\r\nimport { IP, ERROR_ADDRESS_PARSE, ERROR_MASK_RANGE } from \"../../../wireworks/networking/layers/layer-3/ip\";\r\nimport ErrorBox from \"../../../components/ErrorBox\";\r\nimport { ERROR_BYTE_RANGE } from \"../../../wireworks/networking/byte\";\r\nimport MAC, { ERROR_MAC_ADDRESS_PARSE } from \"../../../wireworks/networking/layers/layer-2/mac\";\r\n\r\n// Images used in the canvas.\r\n\r\nconst computerImage = new Image();\r\nconst routerImage = new Image();\r\nconst internetImage = new Image();\r\nconst switchImage = new Image();\r\n\r\nimport(\"src/images/layers/2/computer.png\").then(res => computerImage.src = res.default);\r\nimport(\"src/images/layers/2/router.png\").then(res => routerImage.src = res.default);\r\nimport(\"src/images/layers/2/internet.png\").then(res => internetImage.src = res.default);\r\nimport(\"src/images/layers/2/switch.png\").then(res => switchImage.src = res.default);\r\n\r\n// Simulation speed constants.\r\n\r\ntype Speed = \"veryslow\" | \"slow\" | \"normal\" | \"fast\" | \"veryfast\";\r\n\r\nconst speedValues = {\r\n\tveryslow: 10,\r\n\tslow: 25,\r\n\tnormal: 50,\r\n\tfast: 200,\r\n\tveryfast: 600\r\n};\r\n\r\n// Wire colors.\r\n\r\nconst grayWire = \"#aaaaaa\";\r\nconst greenWire = \"#a9cc78\";\r\nconst yellowWire = \"#e5c16e\";\r\n\r\n/**\r\n * Helper data structure used to refer to MACFetch's computers and other network devices.\r\n */\r\ntype MACMachine = {\r\n\tip: IP,\r\n\tmac: MAC,\r\n\tnode: Node,\r\n\tconnections: MACMachine[],\r\n\tisSwitch: boolean\r\n};\r\n\r\n// +==============================================+\r\n\r\ninterface MacFetchProps {\r\n\tipFetch: boolean\r\n}\r\n\r\nclass MacFetch extends Component<MacFetchProps> {\r\n\r\n\t/** The reference to the target IP input. */\r\n\tprivate txtTarget: RefObject<HTMLInputElement>;\r\n\t/** The reference to the origin select. */\r\n\tprivate selectOrigin: RefObject<HTMLSelectElement>;\r\n\t/** The reference to the speed select. */\r\n\tprivate selectSpeed: RefObject<HTMLSelectElement>;\r\n\t/** The reference to the MacFetchCanvas. */\r\n\tprivate macCanvas: RefObject<MacFetchCanvas>;\r\n\t\r\n\tstate = {\r\n\t\terrorMessage: null as string,\r\n\t\torigin: undefined as \"A\"|\"B\"|\"C\",\r\n\t\ttarget: undefined as IP|MAC,\r\n\t\tspeed: undefined as Speed\r\n\t}\r\n\r\n\t/**\r\n\t * Runs the simulation.\r\n\t */\r\n\tpublic run = () => {\r\n\r\n\t\tlet errStr: string = null;\r\n\t\tthis.setState({errorMessage: null});\r\n\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet target: IP|MAC;\r\n\r\n\t\t\tif (this.props.ipFetch) {\r\n\t\t\t\ttarget = new MAC(this.txtTarget.current.value);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttarget = new IP(this.txtTarget.current.value, undefined, true);\r\n\t\t\t\t\r\n\t\t\t\tif (target.isNetworkAddress()) {\r\n\t\t\t\t\terrStr = \"Este é um endereço de rede. Escolha outro endereço.\";\r\n\t\t\t\t\tthrow Error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState(\r\n\t\t\t\t{\r\n\t\t\t\t\torigin: this.selectOrigin.current.value,\r\n\t\t\t\t\ttarget: target,\r\n\t\t\t\t\tspeed: this.selectSpeed.current.value\r\n\t\t\t\t},\r\n\t\t\t\tthis.macCanvas.current.run\r\n\t\t\t);\r\n\t\t\r\n\t\t} catch (error) {\r\n\t\t\t\r\n\t\t\tif(!errStr){\r\n\t\t\t\t\r\n\t\t\t\tswitch (error.name) {\r\n\t\t\t\t\tcase ERROR_MAC_ADDRESS_PARSE:\r\n\t\t\t\t\t\terrStr = \"O MAC do destino deve possuir o formato 00-00-00-00-00-00.\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ERROR_ADDRESS_PARSE:\r\n\t\t\t\t\t\terrStr = \"O IP do destino deve possuir o formato 0.0.0.0/0.\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ERROR_MASK_RANGE:\r\n\t\t\t\t\t\terrStr = \"O valor da máscara é alto demais (deve estar entre 0-32).\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ERROR_BYTE_RANGE:\r\n\t\t\t\t\t\terrStr = \"Um ou mais octetos possui um valor alto demais (deve estar entre 0-255).\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\terrStr = \"Erro desconhecido (\" + error.name + \").\";\r\n\t\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.setState({errorMessage: \"Entrada inválida. \" + errStr})\r\n\t\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.txtTarget = React.createRef();\r\n\t\tthis.selectSpeed = React.createRef();\r\n\t\tthis.selectOrigin = React.createRef();\r\n\t\tthis.macCanvas = React.createRef();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<main>\r\n\t\t\t\t<div className=\"hbox align-end mb-3\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label htmlFor=\"origin\">Host de Origem</label>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<select id=\"origin\" ref={this.selectOrigin} defaultValue=\"A\">\r\n\t\t\t\t\t\t\t\t<option value=\"A\">Computador A</option>\r\n\t\t\t\t\t\t\t\t<option value=\"B\">Computador B</option>\r\n\t\t\t\t\t\t\t\t<option value=\"C\">Computador C</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label htmlFor=\"target_ip\">{this.props.ipFetch? \"MAC\" : \"IP\"} de Destino</label>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type=\"text\" id=\"target_ip\" ref={this.txtTarget} onKeyDown={(ev) => { if (ev.key === \"Enter\") this.run() }} placeholder={this.props.ipFetch ? \"00-00-00-00-00-00\" : \"0.0.0.1/0\"}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label htmlFor=\"speed\">Velocidade</label>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<select name=\"speed\" id=\"speed\" ref={this.selectSpeed} defaultValue=\"normal\">\r\n\t\t\t\t\t\t\t\t<option value=\"veryslow\">Muito Lento</option>\r\n\t\t\t\t\t\t\t\t<option value=\"slow\">Lento</option>\r\n\t\t\t\t\t\t\t\t<option value=\"normal\">Normal</option>\r\n\t\t\t\t\t\t\t\t<option value=\"fast\">Rápido</option>\r\n\t\t\t\t\t\t\t\t<option value=\"veryfast\">Muito Rápido</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t<button onClick={this.run}>Visualizar</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ErrorBox errorMessage={this.state.errorMessage}/>\r\n\t\t\t\t<MacFetchCanvas ref={this.macCanvas} origin={this.state.origin} target={this.state.target} speed={this.state.speed} ipFetch={this.props.ipFetch}/>\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default MacFetch;\r\n\r\ninterface MacFetchCanvasProps {\r\n\torigin: \"A\"|\"B\"|\"C\",\r\n\ttarget: IP|MAC,\r\n\tspeed: Speed,\r\n\tipFetch: boolean\r\n}\r\n\r\n/**\r\n * The component representing MACFetch's FlowCanvas.\r\n */\r\nclass MacFetchCanvas extends Component<MacFetchCanvasProps> {\r\n\r\n\t/** The reference to the FlowCanvas. */\r\n\tprivate flowCanvas: RefObject<FlowCanvas>;\r\n\t\r\n\t// MACFetch's network devices and computers.\r\n\r\n\tprivate mSwitch: MACMachine = {ip: undefined, mac: undefined, connections: [], isSwitch: true, node: undefined};\r\n\tprivate pcA: MACMachine =     {ip: new IP(\"10.10.0.2/24\"), mac: new MAC(\"00-00-00-AA-AA-AA\"), connections: [this.mSwitch], isSwitch: false, node: undefined};\r\n\tprivate pcB: MACMachine =     {ip: new IP(\"10.10.0.3/24\"), mac: new MAC(\"00-00-00-BB-BB-BB\"), connections: [this.mSwitch], isSwitch: false, node: undefined};\r\n\tprivate pcC: MACMachine =     {ip: new IP(\"10.10.0.4/24\"), mac: new MAC(\"00-00-00-CC-CC-CC\"), connections: [this.mSwitch], isSwitch: false, node: undefined};\r\n\tprivate router: MACMachine =  {ip: new IP(\"10.10.0.1/24\"), mac: new MAC(\"00-00-00-F0-F0-F0\"), connections: [this.mSwitch], isSwitch: false, node: undefined};\r\n\t\r\n\t/** A list of fixed lines that shouldn't be removed upon simulation resetting. */\r\n\tprivate fixedLines: Line[] = [];\r\n\r\n\t/** An object mapping machines to simplified names. */\r\n\tprivate origins = {\r\n\t\tA: this.pcA,\r\n\t\tB: this.pcB,\r\n\t\tC: this.pcC\r\n\t}\r\n\r\n\t/**\r\n\t * Runs the simulation.\r\n\t */\r\n\tpublic run = () => {\r\n\r\n\t\tconst speed = speedValues[this.props.speed];\r\n\t\tconst fCanvas = this.flowCanvas.current;\r\n\t\tconst router = this.router;\r\n\t\tconst ipFetch = this.props.ipFetch;\r\n\r\n\t\tfCanvas.stopLineAnimations();\r\n\r\n\t\tconst drawables = fCanvas.getDrawables();\r\n\t\tlet drawIndex = drawables.length;\r\n\r\n\t\twhile(drawIndex--) {\r\n\t\t\tif(drawables[drawIndex] instanceof Line && this.fixedLines.indexOf(drawables[drawIndex] as Line) < 0) {\r\n\t\t\t\tfCanvas.removeDrawable(drawables[drawIndex]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet lookingFor = this.props.target;\r\n\r\n\t\tconst response = function(path: MACMachine[]) {\r\n\t\t\t\r\n\t\t\tlet targetStr = (ipFetch? path[path.length-1].ip : path[path.length-1].mac).toString();\r\n\t\t\tlet connections: NodeConnection[] = [];\r\n\r\n\t\t\tfor (let i = path.length-1; i >= 1; i--) {\r\n\t\t\t\tconst machine = path[i];\r\n\r\n\t\t\t\tconnections.push({\r\n\t\t\t\t\tfrom: machine.node,\r\n\t\t\t\t\tto: path[i-1].node,\r\n\t\t\t\t\tstrokeStyle: greenWire,\r\n\t\t\t\t\tlineWidth: 5,\r\n\t\t\t\t\tspeed: speed,\r\n\t\t\t\t\tlabelText: targetStr\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tfCanvas.connectMultipleNodes(connections);\r\n\r\n\t\t}\r\n\r\n\t\tconst nextHop = function (previous: MACMachine, from: MACMachine, path: MACMachine[]) {\r\n\t\t\r\n\t\t\tpath.push(from);\r\n\r\n\t\t\tfor (let i = 0; i < from.connections.length; i++) {\r\n\r\n\t\t\t\tconst to = from.connections[i];\r\n\t\r\n\t\t\t\tif (to !== previous) {\r\n\t\t\t\t\tlet line = fCanvas.connectNodes(\r\n\t\t\t\t\t\tfrom.node,\r\n\t\t\t\t\t\tto.node,\r\n\t\t\t\t\t\tyellowWire,\r\n\t\t\t\t\t\t5,\r\n\t\t\t\t\t\tspeed,\r\n\t\t\t\t\t\t(ipFetch ? \"IP de \" : \"MAC de \")+lookingFor.toString()+\"?\",\r\n\t\t\t\t\t\t() => { \r\n\t\t\t\t\t\t\tfCanvas.removeDrawable(line);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (to.connections.length > 1)\r\n\t\t\t\t\t\t\t\tnextHop(from, to, path);\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (!to.isSwitch) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet comparison: boolean;\r\n\r\n\t\t\t\t\t\t\t\t\tif (ipFetch) comparison = to.mac.compare(lookingFor as MAC);\r\n\t\t\t\t\t\t\t\t\telse comparison = to.ip.compare(lookingFor as IP) || ((to === router) && !to.ip.getNetworkAddress().compare((lookingFor as IP).getNetworkAddress()));\r\n\r\n\t\t\t\t\t\t\t\t\tif (comparison) {\r\n\t\t\t\t\t\t\t\t\t\tpath.push(to);\r\n\t\t\t\t\t\t\t\t\t\tresponse(path);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnextHop(undefined, this.origins[this.props.origin], []);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the canvas.\r\n\t */\r\n\tresetCanvas = () => {\r\n\r\n\t\tlet pl = 100; // padding\r\n\t\tlet pr = 100;\r\n\t\tlet pt = 50;\r\n\t\tlet pb = 90;\r\n\r\n\t\tconst fCanvas = this.flowCanvas.current;\r\n\r\n\t\tlet w = fCanvas.props.width;\r\n\t\tlet h = fCanvas.props.height;\r\n\t\t\r\n\t\tlet internetNode =  new Node({ x: pr,  y: pt },      60, 60, {l: 10, t: 10, r: 10, b: 10}, internetImage, 0.5);\r\n\t\tthis.router.node =  new Node({ x: w/2, y: pt },\t\t 60, 60, {l: 10, t: 10, r: 10, b: 10}, routerImage,   0.5);\r\n\t\tthis.pcB.node  =    new Node({ x: w/2, y: h - pb },  60, 60, {l: 10, t: 10, r: 10, b: 10}, computerImage, 0.5);\r\n\t\tthis.mSwitch.node = new Node({ x: w/2,  y: (this.pcB.node.pos.y + this.router.node.pos.y)/2 },  60, 30, {l: 10, t: 10, r: 10, b: 10}, switchImage,   0.5);\r\n\t\tthis.pcA.node  =    new Node({ x: pl,   y: (this.mSwitch.node.pos.y + this.pcB.node.pos.y)/2 }, 60, 60, {l: 10, t: 10, r: 10, b: 10}, computerImage, 0.5);\r\n\t\tthis.pcC.node  =    new Node({ x: w-pr, y: (this.mSwitch.node.pos.y + this.pcB.node.pos.y)/2 }, 60, 60, {l: 10, t: 10, r: 10, b: 10}, computerImage, 0.5);\r\n\r\n\t\tlet internetLabel = new Label({x: 0, y: 0}, \"Internet\",     \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 12);\r\n\t\tinternetLabel.pos = fCanvas.getAlignedPoint(internetNode, internetLabel, \"bottom\", \"center\");\r\n\r\n\t\tlet pcALabel =    new Label({x: 0, y: 0}, \"Computador A\\n\" + this.pcA.ip.toString() + \"\\n\" + this.pcA.mac.toString(), \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 12, \"center\");\r\n\t\tlet pcBLabel =    new Label({x: 0, y: 0}, \"Computador B\\n\" + this.pcB.ip.toString() + \"\\n\" + this.pcB.mac.toString(), \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 12, \"center\");\r\n\t\tlet pcCLabel =    new Label({x: 0, y: 0}, \"Computador C\\n\" + this.pcC.ip.toString() + \"\\n\" + this.pcC.mac.toString(), \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 12, \"center\");\r\n\t\tlet routerLabel = new Label({x: 0, y: 0}, \"Roteador\\n\" + this.router.ip.toString() + \"\\n\" + this.router.mac.toString(),     \"#505050\", \"transparent\", 6, 0, \"14px Work Sans, Montserrat, sans-serif\", 12);\r\n\r\n\t\tpcALabel.pos =    fCanvas.getAlignedPoint(this.pcA.node,    pcALabel,    \"bottom\", \"center\");\r\n\t\tpcBLabel.pos =    fCanvas.getAlignedPoint(this.pcB.node,    pcBLabel,    \"bottom\", \"center\");\r\n\t\tpcCLabel.pos =    fCanvas.getAlignedPoint(this.pcC.node,    pcCLabel,    \"bottom\", \"center\");\r\n\t\trouterLabel.pos = fCanvas.getAlignedPoint(this.router.node, routerLabel, \"center\", \"right\");\r\n\r\n\t\tthis.fixedLines = [\r\n\t\t\tnew Line(this.pcA.node, this.mSwitch.node, 1, grayWire, 10),\r\n\t\t\tnew Line(this.pcB.node, this.mSwitch.node, 1, grayWire, 10),\r\n\t\t\tnew Line(this.pcC.node, this.mSwitch.node, 1, grayWire, 10),\r\n\t\t\tnew Line(this.router.node, this.mSwitch.node, 1, grayWire, 10),\r\n\t\t\tnew Line(this.router.node, internetNode, 1, grayWire, 10)\r\n\t\t];\r\n\r\n\t\tfCanvas.clearDrawables();\r\n\r\n\t\tfCanvas.addDrawable(this.pcA.node);\r\n\t\tfCanvas.addDrawable(this.pcB.node);\r\n\t\tfCanvas.addDrawable(this.pcC.node);\r\n\t\tfCanvas.addDrawable(this.mSwitch.node);\r\n\t\tfCanvas.addDrawable(this.router.node);\r\n\t\tfCanvas.addDrawable(internetNode);\r\n\t\tfCanvas.addDrawable(pcALabel);\r\n\t\tfCanvas.addDrawable(pcBLabel);\r\n\t\tfCanvas.addDrawable(pcCLabel);\r\n\t\tfCanvas.addDrawable(routerLabel);\r\n\t\tfCanvas.addDrawable(internetLabel);\r\n\r\n\t\tfor (let i = 0; i < this.fixedLines.length; i++) {\r\n\t\t\tfCanvas.addDrawable(this.fixedLines[i]);\r\n\t\t}\r\n\r\n\t\tfCanvas.draw();\r\n\r\n\t}\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.flowCanvas = React.createRef();\r\n\t\tthis.mSwitch.connections = [this.pcA, this.pcB, this.pcC, this.router];\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.resetCanvas();\r\n\t\tcomputerImage.onload = this.flowCanvas.current.draw;\r\n\t\trouterImage.onload = this.flowCanvas.current.draw;\r\n\t\tswitchImage.onload = this.flowCanvas.current.draw;\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn <FlowCanvas ref={this.flowCanvas} width={750} height={560} fixedDeltaTime={1000 / 60}/>;\r\n\t}\r\n}"],"sourceRoot":""}